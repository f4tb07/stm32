
usartComunication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000430c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  080043c4  080043c4  000053c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044bc  080044bc  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080044bc  080044bc  0000605c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080044bc  080044bc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080044bc  080044bc  000054bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080044c4  080044c4  000054c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080044cc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000238  2000005c  08004528  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08004528  00006294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e41  00000000  00000000  00006084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ecd  00000000  00000000  0001bec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0001ed98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000075e  00000000  00000000  0001f740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c56  00000000  00000000  0001fe9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ecce  00000000  00000000  00038af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c79b  00000000  00000000  000477c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3f5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f8  00000000  00000000  000d3fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d7998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000005c 	.word	0x2000005c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080043ac 	.word	0x080043ac

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000060 	.word	0x20000060
 80000fc:	080043ac 	.word	0x080043ac

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f8f0 	bl	80003f8 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__divsi3>:
 8000224:	4603      	mov	r3, r0
 8000226:	430b      	orrs	r3, r1
 8000228:	d47f      	bmi.n	800032a <__divsi3+0x106>
 800022a:	2200      	movs	r2, #0
 800022c:	0843      	lsrs	r3, r0, #1
 800022e:	428b      	cmp	r3, r1
 8000230:	d374      	bcc.n	800031c <__divsi3+0xf8>
 8000232:	0903      	lsrs	r3, r0, #4
 8000234:	428b      	cmp	r3, r1
 8000236:	d35f      	bcc.n	80002f8 <__divsi3+0xd4>
 8000238:	0a03      	lsrs	r3, r0, #8
 800023a:	428b      	cmp	r3, r1
 800023c:	d344      	bcc.n	80002c8 <__divsi3+0xa4>
 800023e:	0b03      	lsrs	r3, r0, #12
 8000240:	428b      	cmp	r3, r1
 8000242:	d328      	bcc.n	8000296 <__divsi3+0x72>
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d30d      	bcc.n	8000266 <__divsi3+0x42>
 800024a:	22ff      	movs	r2, #255	@ 0xff
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	ba12      	rev	r2, r2
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d302      	bcc.n	800025c <__divsi3+0x38>
 8000256:	1212      	asrs	r2, r2, #8
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	d065      	beq.n	8000328 <__divsi3+0x104>
 800025c:	0b03      	lsrs	r3, r0, #12
 800025e:	428b      	cmp	r3, r1
 8000260:	d319      	bcc.n	8000296 <__divsi3+0x72>
 8000262:	e000      	b.n	8000266 <__divsi3+0x42>
 8000264:	0a09      	lsrs	r1, r1, #8
 8000266:	0bc3      	lsrs	r3, r0, #15
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x4c>
 800026c:	03cb      	lsls	r3, r1, #15
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b83      	lsrs	r3, r0, #14
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x58>
 8000278:	038b      	lsls	r3, r1, #14
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b43      	lsrs	r3, r0, #13
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x64>
 8000284:	034b      	lsls	r3, r1, #13
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b03      	lsrs	r3, r0, #12
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x70>
 8000290:	030b      	lsls	r3, r1, #12
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0ac3      	lsrs	r3, r0, #11
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x7c>
 800029c:	02cb      	lsls	r3, r1, #11
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a83      	lsrs	r3, r0, #10
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x88>
 80002a8:	028b      	lsls	r3, r1, #10
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a43      	lsrs	r3, r0, #9
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x94>
 80002b4:	024b      	lsls	r3, r1, #9
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a03      	lsrs	r3, r0, #8
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0xa0>
 80002c0:	020b      	lsls	r3, r1, #8
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	d2cd      	bcs.n	8000264 <__divsi3+0x40>
 80002c8:	09c3      	lsrs	r3, r0, #7
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xae>
 80002ce:	01cb      	lsls	r3, r1, #7
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0983      	lsrs	r3, r0, #6
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xba>
 80002da:	018b      	lsls	r3, r1, #6
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0943      	lsrs	r3, r0, #5
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xc6>
 80002e6:	014b      	lsls	r3, r1, #5
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0903      	lsrs	r3, r0, #4
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xd2>
 80002f2:	010b      	lsls	r3, r1, #4
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	08c3      	lsrs	r3, r0, #3
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xde>
 80002fe:	00cb      	lsls	r3, r1, #3
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0883      	lsrs	r3, r0, #2
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xea>
 800030a:	008b      	lsls	r3, r1, #2
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0843      	lsrs	r3, r0, #1
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xf6>
 8000316:	004b      	lsls	r3, r1, #1
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	1a41      	subs	r1, r0, r1
 800031e:	d200      	bcs.n	8000322 <__divsi3+0xfe>
 8000320:	4601      	mov	r1, r0
 8000322:	4152      	adcs	r2, r2
 8000324:	4610      	mov	r0, r2
 8000326:	4770      	bx	lr
 8000328:	e05d      	b.n	80003e6 <__divsi3+0x1c2>
 800032a:	0fca      	lsrs	r2, r1, #31
 800032c:	d000      	beq.n	8000330 <__divsi3+0x10c>
 800032e:	4249      	negs	r1, r1
 8000330:	1003      	asrs	r3, r0, #32
 8000332:	d300      	bcc.n	8000336 <__divsi3+0x112>
 8000334:	4240      	negs	r0, r0
 8000336:	4053      	eors	r3, r2
 8000338:	2200      	movs	r2, #0
 800033a:	469c      	mov	ip, r3
 800033c:	0903      	lsrs	r3, r0, #4
 800033e:	428b      	cmp	r3, r1
 8000340:	d32d      	bcc.n	800039e <__divsi3+0x17a>
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d312      	bcc.n	800036e <__divsi3+0x14a>
 8000348:	22fc      	movs	r2, #252	@ 0xfc
 800034a:	0189      	lsls	r1, r1, #6
 800034c:	ba12      	rev	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d30c      	bcc.n	800036e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d308      	bcc.n	800036e <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d304      	bcc.n	800036e <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	d03a      	beq.n	80003de <__divsi3+0x1ba>
 8000368:	1192      	asrs	r2, r2, #6
 800036a:	e000      	b.n	800036e <__divsi3+0x14a>
 800036c:	0989      	lsrs	r1, r1, #6
 800036e:	09c3      	lsrs	r3, r0, #7
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x154>
 8000374:	01cb      	lsls	r3, r1, #7
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0983      	lsrs	r3, r0, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x160>
 8000380:	018b      	lsls	r3, r1, #6
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0943      	lsrs	r3, r0, #5
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x16c>
 800038c:	014b      	lsls	r3, r1, #5
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0903      	lsrs	r3, r0, #4
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x178>
 8000398:	010b      	lsls	r3, r1, #4
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	08c3      	lsrs	r3, r0, #3
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x184>
 80003a4:	00cb      	lsls	r3, r1, #3
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0883      	lsrs	r3, r0, #2
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x190>
 80003b0:	008b      	lsls	r3, r1, #2
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	d2d9      	bcs.n	800036c <__divsi3+0x148>
 80003b8:	0843      	lsrs	r3, r0, #1
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d301      	bcc.n	80003c2 <__divsi3+0x19e>
 80003be:	004b      	lsls	r3, r1, #1
 80003c0:	1ac0      	subs	r0, r0, r3
 80003c2:	4152      	adcs	r2, r2
 80003c4:	1a41      	subs	r1, r0, r1
 80003c6:	d200      	bcs.n	80003ca <__divsi3+0x1a6>
 80003c8:	4601      	mov	r1, r0
 80003ca:	4663      	mov	r3, ip
 80003cc:	4152      	adcs	r2, r2
 80003ce:	105b      	asrs	r3, r3, #1
 80003d0:	4610      	mov	r0, r2
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x1b4>
 80003d4:	4240      	negs	r0, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d500      	bpl.n	80003dc <__divsi3+0x1b8>
 80003da:	4249      	negs	r1, r1
 80003dc:	4770      	bx	lr
 80003de:	4663      	mov	r3, ip
 80003e0:	105b      	asrs	r3, r3, #1
 80003e2:	d300      	bcc.n	80003e6 <__divsi3+0x1c2>
 80003e4:	4240      	negs	r0, r0
 80003e6:	b501      	push	{r0, lr}
 80003e8:	2000      	movs	r0, #0
 80003ea:	f000 f805 	bl	80003f8 <__aeabi_idiv0>
 80003ee:	bd02      	pop	{r1, pc}

080003f0 <__aeabi_idivmod>:
 80003f0:	2900      	cmp	r1, #0
 80003f2:	d0f8      	beq.n	80003e6 <__divsi3+0x1c2>
 80003f4:	e716      	b.n	8000224 <__divsi3>
 80003f6:	4770      	bx	lr

080003f8 <__aeabi_idiv0>:
 80003f8:	4770      	bx	lr
 80003fa:	46c0      	nop			@ (mov r8, r8)

080003fc <_ZN24SerialUsartCommunicationC1EP20__UART_HandleTypeDef>:
SerialUsartCommunication::SerialUsartCommunication() {
	// TODO Auto-generated constructor stub

}

SerialUsartCommunication::SerialUsartCommunication(
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
		UART_HandleTypeDef* usartHandle)
 8000406:	4a05      	ldr	r2, [pc, #20]	@ (800041c <_ZN24SerialUsartCommunicationC1EP20__UART_HandleTypeDef+0x20>)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	601a      	str	r2, [r3, #0]
{
	USART_HANDLER = usartHandle;
 800040c:	4b04      	ldr	r3, [pc, #16]	@ (8000420 <_ZN24SerialUsartCommunicationC1EP20__UART_HandleTypeDef+0x24>)
 800040e:	683a      	ldr	r2, [r7, #0]
 8000410:	601a      	str	r2, [r3, #0]

}
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	0018      	movs	r0, r3
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}
 800041c:	080043e0 	.word	0x080043e0
 8000420:	20000078 	.word	0x20000078

08000424 <_ZN24SerialUsartCommunication4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEa>:



void SerialUsartCommunication::send(std::string message, int8_t timeOut)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b087      	sub	sp, #28
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	1dfb      	adds	r3, r7, #7
 8000430:	701a      	strb	r2, [r3, #0]
	uint8_t* tmpCharMemPtr = (uint8_t*) malloc(message.size()+1);
 8000432:	68bb      	ldr	r3, [r7, #8]
 8000434:	0018      	movs	r0, r3
 8000436:	f003 fd82 	bl	8003f3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800043a:	0003      	movs	r3, r0
 800043c:	3301      	adds	r3, #1
 800043e:	0018      	movs	r0, r3
 8000440:	f003 fe0a 	bl	8004058 <malloc>
 8000444:	0003      	movs	r3, r0
 8000446:	613b      	str	r3, [r7, #16]

    for(int i=0;i<static_cast<int>(message.size());i++)
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
 800044c:	e00e      	b.n	800046c <_ZN24SerialUsartCommunication4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEa+0x48>
    {
    	tmpCharMemPtr[i]=message[i];
 800044e:	697a      	ldr	r2, [r7, #20]
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	0011      	movs	r1, r2
 8000454:	0018      	movs	r0, r3
 8000456:	f003 fd74 	bl	8003f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800045a:	0001      	movs	r1, r0
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	693a      	ldr	r2, [r7, #16]
 8000460:	18d3      	adds	r3, r2, r3
 8000462:	780a      	ldrb	r2, [r1, #0]
 8000464:	701a      	strb	r2, [r3, #0]
    for(int i=0;i<static_cast<int>(message.size());i++)
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	3301      	adds	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	0018      	movs	r0, r3
 8000470:	f003 fd65 	bl	8003f3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000474:	0003      	movs	r3, r0
 8000476:	001a      	movs	r2, r3
 8000478:	2301      	movs	r3, #1
 800047a:	1c19      	adds	r1, r3, #0
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	4293      	cmp	r3, r2
 8000480:	db01      	blt.n	8000486 <_ZN24SerialUsartCommunication4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEa+0x62>
 8000482:	2300      	movs	r3, #0
 8000484:	1c19      	adds	r1, r3, #0
 8000486:	b2cb      	uxtb	r3, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d1e0      	bne.n	800044e <_ZN24SerialUsartCommunication4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEa+0x2a>
    }
    tmpCharMemPtr[message.size()]='\0';
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	0018      	movs	r0, r3
 8000490:	f003 fd55 	bl	8003f3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000494:	0002      	movs	r2, r0
 8000496:	693b      	ldr	r3, [r7, #16]
 8000498:	189b      	adds	r3, r3, r2
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(USART_HANDLER, tmpCharMemPtr, message.size(),timeOut);
 800049e:	4b0b      	ldr	r3, [pc, #44]	@ (80004cc <_ZN24SerialUsartCommunication4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEa+0xa8>)
 80004a0:	681c      	ldr	r4, [r3, #0]
 80004a2:	68bb      	ldr	r3, [r7, #8]
 80004a4:	0018      	movs	r0, r3
 80004a6:	f003 fd4a 	bl	8003f3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80004aa:	0003      	movs	r3, r0
 80004ac:	b29a      	uxth	r2, r3
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	b25b      	sxtb	r3, r3
 80004b4:	6939      	ldr	r1, [r7, #16]
 80004b6:	0020      	movs	r0, r4
 80004b8:	f001 fd74 	bl	8001fa4 <HAL_UART_Transmit>
    free(tmpCharMemPtr);
 80004bc:	693b      	ldr	r3, [r7, #16]
 80004be:	0018      	movs	r0, r3
 80004c0:	f003 fdd4 	bl	800406c <free>
}
 80004c4:	46c0      	nop			@ (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	b007      	add	sp, #28
 80004ca:	bd90      	pop	{r4, r7, pc}
 80004cc:	20000078 	.word	0x20000078

080004d0 <HAL_UART_RxCpltCallback>:

extern "C"
{

	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]

		    memcpy(SerialUsartCommunication::reciveBuffer+rcvIdx,rcvByte,1);
 80004d8:	4b15      	ldr	r3, [pc, #84]	@ (8000530 <HAL_UART_RxCpltCallback+0x60>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <HAL_UART_RxCpltCallback+0x64>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	18d3      	adds	r3, r2, r3
 80004e2:	4a15      	ldr	r2, [pc, #84]	@ (8000538 <HAL_UART_RxCpltCallback+0x68>)
 80004e4:	7812      	ldrb	r2, [r2, #0]
 80004e6:	701a      	strb	r2, [r3, #0]
		    if(HAL_UART_Receive_IT(SerialUsartCommunication::USART_HANDLER,rcvByte ,1)!= HAL_BUSY && ++rcvIdx>=SerialUsartCommunication::RCV_BUFF_SIZE)
 80004e8:	4b14      	ldr	r3, [pc, #80]	@ (800053c <HAL_UART_RxCpltCallback+0x6c>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4912      	ldr	r1, [pc, #72]	@ (8000538 <HAL_UART_RxCpltCallback+0x68>)
 80004ee:	2201      	movs	r2, #1
 80004f0:	0018      	movs	r0, r3
 80004f2:	f001 fdfb 	bl	80020ec <HAL_UART_Receive_IT>
 80004f6:	0003      	movs	r3, r0
 80004f8:	2b02      	cmp	r3, #2
 80004fa:	d00d      	beq.n	8000518 <HAL_UART_RxCpltCallback+0x48>
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <HAL_UART_RxCpltCallback+0x64>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	1c5a      	adds	r2, r3, #1
 8000502:	4b0c      	ldr	r3, [pc, #48]	@ (8000534 <HAL_UART_RxCpltCallback+0x64>)
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <HAL_UART_RxCpltCallback+0x64>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0d      	ldr	r2, [pc, #52]	@ (8000540 <HAL_UART_RxCpltCallback+0x70>)
 800050c:	7812      	ldrb	r2, [r2, #0]
 800050e:	b252      	sxtb	r2, r2
 8000510:	4293      	cmp	r3, r2
 8000512:	db01      	blt.n	8000518 <HAL_UART_RxCpltCallback+0x48>
 8000514:	2301      	movs	r3, #1
 8000516:	e000      	b.n	800051a <HAL_UART_RxCpltCallback+0x4a>
 8000518:	2300      	movs	r3, #0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d004      	beq.n	8000528 <HAL_UART_RxCpltCallback+0x58>
		    		    {
		    		    	SerialUsartCommunication::receiveCompleted ();
 800051e:	f000 f851 	bl	80005c4 <_ZN24SerialUsartCommunication16receiveCompletedEv>
		    		    	rcvIdx=0;
 8000522:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <HAL_UART_RxCpltCallback+0x64>)
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
		    		    }


	}
 8000528:	46c0      	nop			@ (mov r8, r8)
 800052a:	46bd      	mov	sp, r7
 800052c:	b002      	add	sp, #8
 800052e:	bd80      	pop	{r7, pc}
 8000530:	2000007c 	.word	0x2000007c
 8000534:	20000088 	.word	0x20000088
 8000538:	20000084 	.word	0x20000084
 800053c:	20000078 	.word	0x20000078
 8000540:	20000080 	.word	0x20000080

08000544 <_ZN24SerialUsartCommunication7recieveEh>:
}

void SerialUsartCommunication::recieve(uint8_t rcvBuffSize)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
 800054c:	000a      	movs	r2, r1
 800054e:	1cfb      	adds	r3, r7, #3
 8000550:	701a      	strb	r2, [r3, #0]

	if(rcvBuffSize>0)
 8000552:	1cfb      	adds	r3, r7, #3
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b00      	cmp	r3, #0
 8000558:	d01b      	beq.n	8000592 <_ZN24SerialUsartCommunication7recieveEh+0x4e>
		{
		RCV_BUFF_SIZE = rcvBuffSize;
 800055a:	1cfb      	adds	r3, r7, #3
 800055c:	2200      	movs	r2, #0
 800055e:	569a      	ldrsb	r2, [r3, r2]
 8000560:	4b13      	ldr	r3, [pc, #76]	@ (80005b0 <_ZN24SerialUsartCommunication7recieveEh+0x6c>)
 8000562:	701a      	strb	r2, [r3, #0]
		reciveBuffer = 	(uint8_t*) malloc(rcvBuffSize);
 8000564:	1cfb      	adds	r3, r7, #3
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	0018      	movs	r0, r3
 800056a:	f003 fd75 	bl	8004058 <malloc>
 800056e:	0003      	movs	r3, r0
 8000570:	001a      	movs	r2, r3
 8000572:	4b10      	ldr	r3, [pc, #64]	@ (80005b4 <_ZN24SerialUsartCommunication7recieveEh+0x70>)
 8000574:	601a      	str	r2, [r3, #0]
					if(!reciveBuffer)
 8000576:	4b0f      	ldr	r3, [pc, #60]	@ (80005b4 <_ZN24SerialUsartCommunication7recieveEh+0x70>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d109      	bne.n	8000592 <_ZN24SerialUsartCommunication7recieveEh+0x4e>
						delete this;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d006      	beq.n	8000592 <_ZN24SerialUsartCommunication7recieveEh+0x4e>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3304      	adds	r3, #4
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	0010      	movs	r0, r2
 8000590:	4798      	blx	r3
		}
		rcvIdx=0;
 8000592:	4b09      	ldr	r3, [pc, #36]	@ (80005b8 <_ZN24SerialUsartCommunication7recieveEh+0x74>)
 8000594:	2200      	movs	r2, #0
 8000596:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(USART_HANDLER, rcvByte, 1);
 8000598:	4b08      	ldr	r3, [pc, #32]	@ (80005bc <_ZN24SerialUsartCommunication7recieveEh+0x78>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4908      	ldr	r1, [pc, #32]	@ (80005c0 <_ZN24SerialUsartCommunication7recieveEh+0x7c>)
 800059e:	2201      	movs	r2, #1
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 fda3 	bl	80020ec <HAL_UART_Receive_IT>
}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b002      	add	sp, #8
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	20000080 	.word	0x20000080
 80005b4:	2000007c 	.word	0x2000007c
 80005b8:	20000088 	.word	0x20000088
 80005bc:	20000078 	.word	0x20000078
 80005c0:	20000084 	.word	0x20000084

080005c4 <_ZN24SerialUsartCommunication16receiveCompletedEv>:


uint8_t* SerialUsartCommunication::receiveCompleted ()
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0

	if(rcvIdx>=RCV_BUFF_SIZE)
 80005c8:	4b07      	ldr	r3, [pc, #28]	@ (80005e8 <_ZN24SerialUsartCommunication16receiveCompletedEv+0x24>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	b25b      	sxtb	r3, r3
 80005ce:	001a      	movs	r2, r3
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <_ZN24SerialUsartCommunication16receiveCompletedEv+0x28>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	dc02      	bgt.n	80005de <_ZN24SerialUsartCommunication16receiveCompletedEv+0x1a>
		{
			 return reciveBuffer; //here we have a mem allocation which is not freed. And must mange
 80005d8:	4b05      	ldr	r3, [pc, #20]	@ (80005f0 <_ZN24SerialUsartCommunication16receiveCompletedEv+0x2c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	e000      	b.n	80005e0 <_ZN24SerialUsartCommunication16receiveCompletedEv+0x1c>
		}
	else
		return 0;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	0018      	movs	r0, r3
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	20000080 	.word	0x20000080
 80005ec:	20000088 	.word	0x20000088
 80005f0:	2000007c 	.word	0x2000007c

080005f4 <_ZN24SerialUsartCommunicationD1Ev>:

SerialUsartCommunication::~SerialUsartCommunication() {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
 80005fc:	4a03      	ldr	r2, [pc, #12]	@ (800060c <_ZN24SerialUsartCommunicationD1Ev+0x18>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	0018      	movs	r0, r3
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}
 800060c:	080043e0 	.word	0x080043e0

08000610 <_ZN24SerialUsartCommunicationD0Ev>:
SerialUsartCommunication::~SerialUsartCommunication() {
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
}
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	0018      	movs	r0, r3
 800061c:	f7ff ffea 	bl	80005f4 <_ZN24SerialUsartCommunicationD1Ev>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2108      	movs	r1, #8
 8000624:	0018      	movs	r0, r3
 8000626:	f003 fc27 	bl	8003e78 <_ZdlPvj>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	0018      	movs	r0, r3
 800062e:	46bd      	mov	sp, r7
 8000630:	b002      	add	sp, #8
 8000632:	bd80      	pop	{r7, pc}

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b086      	sub	sp, #24
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f000 fa79 	bl	8000b30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f825 	bl	800068c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f000 f8d1 	bl	80007e8 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 8000646:	f000 f871 	bl	800072c <_ZL19MX_USART1_UART_Initv>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  serial.recieve(5);
 800064a:	4b0e      	ldr	r3, [pc, #56]	@ (8000684 <main+0x50>)
 800064c:	2105      	movs	r1, #5
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff ff78 	bl	8000544 <_ZN24SerialUsartCommunication7recieveEh>
  while (1)
  {
	  serial.send(msg, 1);
 8000654:	4a0c      	ldr	r2, [pc, #48]	@ (8000688 <main+0x54>)
 8000656:	003b      	movs	r3, r7
 8000658:	0011      	movs	r1, r2
 800065a:	0018      	movs	r0, r3
 800065c:	f003 fc8e 	bl	8003f7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000660:	0039      	movs	r1, r7
 8000662:	4b08      	ldr	r3, [pc, #32]	@ (8000684 <main+0x50>)
 8000664:	2201      	movs	r2, #1
 8000666:	0018      	movs	r0, r3
 8000668:	f7ff fedc 	bl	8000424 <_ZN24SerialUsartCommunication4sendENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEa>
 800066c:	003b      	movs	r3, r7
 800066e:	0018      	movs	r0, r3
 8000670:	f003 fc5f 	bl	8003f32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
	  HAL_Delay(1000);
 8000674:	23fa      	movs	r3, #250	@ 0xfa
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	0018      	movs	r0, r3
 800067a:	f000 fadf 	bl	8000c3c <HAL_Delay>
	  serial.send(msg, 1);
 800067e:	46c0      	nop			@ (mov r8, r8)
 8000680:	e7e8      	b.n	8000654 <main+0x20>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	20000120 	.word	0x20000120
 8000688:	20000128 	.word	0x20000128

0800068c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b590      	push	{r4, r7, lr}
 800068e:	b093      	sub	sp, #76	@ 0x4c
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	2414      	movs	r4, #20
 8000694:	193b      	adds	r3, r7, r4
 8000696:	0018      	movs	r0, r3
 8000698:	2334      	movs	r3, #52	@ 0x34
 800069a:	001a      	movs	r2, r3
 800069c:	2100      	movs	r1, #0
 800069e:	f003 fda1 	bl	80041e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	0018      	movs	r0, r3
 80006a6:	2310      	movs	r3, #16
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f003 fd9a 	bl	80041e4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b0:	2380      	movs	r3, #128	@ 0x80
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fdf3 	bl	80012a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2202      	movs	r2, #2
 80006be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	2280      	movs	r2, #128	@ 0x80
 80006c4:	0052      	lsls	r2, r2, #1
 80006c6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2240      	movs	r2, #64	@ 0x40
 80006d2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	193b      	adds	r3, r7, r4
 80006dc:	0018      	movs	r0, r3
 80006de:	f000 fe2b 	bl	8001338 <HAL_RCC_OscConfig>
 80006e2:	0003      	movs	r3, r0
 80006e4:	1e5a      	subs	r2, r3, #1
 80006e6:	4193      	sbcs	r3, r2
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <_Z18SystemClock_Configv+0x66>
  {
    Error_Handler();
 80006ee:	f000 f891 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2207      	movs	r2, #7
 80006f6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000704:	1d3b      	adds	r3, r7, #4
 8000706:	2200      	movs	r2, #0
 8000708:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2100      	movs	r1, #0
 800070e:	0018      	movs	r0, r3
 8000710:	f001 f922 	bl	8001958 <HAL_RCC_ClockConfig>
 8000714:	0003      	movs	r3, r0
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	4193      	sbcs	r3, r2
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <_Z18SystemClock_Configv+0x98>
  {
    Error_Handler();
 8000720:	f000 f878 	bl	8000814 <Error_Handler>
  }
}
 8000724:	46c0      	nop			@ (mov r8, r8)
 8000726:	46bd      	mov	sp, r7
 8000728:	b013      	add	sp, #76	@ 0x4c
 800072a:	bd90      	pop	{r4, r7, pc}

0800072c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000730:	4b2b      	ldr	r3, [pc, #172]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000732:	4a2c      	ldr	r2, [pc, #176]	@ (80007e4 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000734:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000736:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000738:	22e1      	movs	r2, #225	@ 0xe1
 800073a:	0252      	lsls	r2, r2, #9
 800073c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800074a:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000768:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800076e:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000774:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 8000776:	0018      	movs	r0, r3
 8000778:	f001 fbbe 	bl	8001ef8 <HAL_UART_Init>
 800077c:	0003      	movs	r3, r0
 800077e:	1e5a      	subs	r2, r3, #1
 8000780:	4193      	sbcs	r3, r2
 8000782:	b2db      	uxtb	r3, r3
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <_ZL19MX_USART1_UART_Initv+0x60>
  {
    Error_Handler();
 8000788:	f000 f844 	bl	8000814 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078c:	4b14      	ldr	r3, [pc, #80]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 800078e:	2100      	movs	r1, #0
 8000790:	0018      	movs	r0, r3
 8000792:	f003 fa91 	bl	8003cb8 <HAL_UARTEx_SetTxFifoThreshold>
 8000796:	0003      	movs	r3, r0
 8000798:	1e5a      	subs	r2, r3, #1
 800079a:	4193      	sbcs	r3, r2
 800079c:	b2db      	uxtb	r3, r3
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <_ZL19MX_USART1_UART_Initv+0x7a>
  {
    Error_Handler();
 80007a2:	f000 f837 	bl	8000814 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80007a8:	2100      	movs	r1, #0
 80007aa:	0018      	movs	r0, r3
 80007ac:	f003 fac4 	bl	8003d38 <HAL_UARTEx_SetRxFifoThreshold>
 80007b0:	0003      	movs	r3, r0
 80007b2:	1e5a      	subs	r2, r3, #1
 80007b4:	4193      	sbcs	r3, r2
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <_ZL19MX_USART1_UART_Initv+0x94>
  {
    Error_Handler();
 80007bc:	f000 f82a 	bl	8000814 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80007c0:	4b07      	ldr	r3, [pc, #28]	@ (80007e0 <_ZL19MX_USART1_UART_Initv+0xb4>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f003 fa3e 	bl	8003c44 <HAL_UARTEx_DisableFifoMode>
 80007c8:	0003      	movs	r3, r0
 80007ca:	1e5a      	subs	r2, r3, #1
 80007cc:	4193      	sbcs	r3, r2
 80007ce:	b2db      	uxtb	r3, r3
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <_ZL19MX_USART1_UART_Initv+0xac>
  {
    Error_Handler();
 80007d4:	f000 f81e 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007d8:	46c0      	nop			@ (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			@ (mov r8, r8)
 80007e0:	2000008c 	.word	0x2000008c
 80007e4:	40013800 	.word	0x40013800

080007e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b08      	ldr	r3, [pc, #32]	@ (8000810 <_ZL12MX_GPIO_Initv+0x28>)
 80007f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007f2:	4b07      	ldr	r3, [pc, #28]	@ (8000810 <_ZL12MX_GPIO_Initv+0x28>)
 80007f4:	2101      	movs	r1, #1
 80007f6:	430a      	orrs	r2, r1
 80007f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007fa:	4b05      	ldr	r3, [pc, #20]	@ (8000810 <_ZL12MX_GPIO_Initv+0x28>)
 80007fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007fe:	2201      	movs	r2, #1
 8000800:	4013      	ands	r3, r2
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000806:	46c0      	nop			@ (mov r8, r8)
 8000808:	46bd      	mov	sp, r7
 800080a:	b002      	add	sp, #8
 800080c:	bd80      	pop	{r7, pc}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	40021000 	.word	0x40021000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	46c0      	nop			@ (mov r8, r8)
 800081e:	e7fd      	b.n	800081c <Error_Handler+0x8>

08000820 <_ZNSt15__new_allocatorIcED1Ev>:
#if __cplusplus >= 201103L
      __new_allocator& operator=(const __new_allocator&) = default;
#endif

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	0018      	movs	r0, r3
 800082c:	46bd      	mov	sp, r7
 800082e:	b002      	add	sp, #8
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <_Z41__static_initialization_and_destruction_0v>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
SerialUsartCommunication serial(&huart1);
 800083a:	4a0b      	ldr	r2, [pc, #44]	@ (8000868 <_Z41__static_initialization_and_destruction_0v+0x34>)
 800083c:	4b0b      	ldr	r3, [pc, #44]	@ (800086c <_Z41__static_initialization_and_destruction_0v+0x38>)
 800083e:	0011      	movs	r1, r2
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff fddb 	bl	80003fc <_ZN24SerialUsartCommunicationC1EP20__UART_HandleTypeDef>
 8000846:	003b      	movs	r3, r7
 8000848:	607b      	str	r3, [r7, #4]
std::string msg = "\n\rthis is a test\n\r";
 800084a:	003a      	movs	r2, r7
 800084c:	4908      	ldr	r1, [pc, #32]	@ (8000870 <_Z41__static_initialization_and_destruction_0v+0x3c>)
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <_Z41__static_initialization_and_destruction_0v+0x40>)
 8000850:	0018      	movs	r0, r3
 8000852:	f003 fbbb 	bl	8003fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>

      __attribute__((__always_inline__))
#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000856:	003b      	movs	r3, r7
 8000858:	0018      	movs	r0, r3
 800085a:	f7ff ffe1 	bl	8000820 <_ZNSt15__new_allocatorIcED1Ev>
}
 800085e:	46c0      	nop			@ (mov r8, r8)
 8000860:	46bd      	mov	sp, r7
 8000862:	b002      	add	sp, #8
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			@ (mov r8, r8)
 8000868:	2000008c 	.word	0x2000008c
 800086c:	20000120 	.word	0x20000120
 8000870:	080043c4 	.word	0x080043c4
 8000874:	20000128 	.word	0x20000128

08000878 <_Z41__static_initialization_and_destruction_1v>:
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
std::string msg = "\n\rthis is a test\n\r";
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <_Z41__static_initialization_and_destruction_1v+0x1c>)
 800087e:	0018      	movs	r0, r3
 8000880:	f003 fb57 	bl	8003f32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
SerialUsartCommunication serial(&huart1);
 8000884:	4b04      	ldr	r3, [pc, #16]	@ (8000898 <_Z41__static_initialization_and_destruction_1v+0x20>)
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff feb4 	bl	80005f4 <_ZN24SerialUsartCommunicationD1Ev>
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	20000128 	.word	0x20000128
 8000898:	20000120 	.word	0x20000120

0800089c <_GLOBAL__sub_I_huart1>:
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
 80008a0:	f7ff ffc8 	bl	8000834 <_Z41__static_initialization_and_destruction_0v>
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <_GLOBAL__sub_D_huart1>:
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	f7ff ffe4 	bl	8000878 <_Z41__static_initialization_and_destruction_1v>
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <HAL_MspInit+0x44>)
 80008bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008be:	4b0e      	ldr	r3, [pc, #56]	@ (80008f8 <HAL_MspInit+0x44>)
 80008c0:	2101      	movs	r1, #1
 80008c2:	430a      	orrs	r2, r1
 80008c4:	641a      	str	r2, [r3, #64]	@ 0x40
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <HAL_MspInit+0x44>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	2201      	movs	r2, #1
 80008cc:	4013      	ands	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_MspInit+0x44>)
 80008d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008d6:	4b08      	ldr	r3, [pc, #32]	@ (80008f8 <HAL_MspInit+0x44>)
 80008d8:	2180      	movs	r1, #128	@ 0x80
 80008da:	0549      	lsls	r1, r1, #21
 80008dc:	430a      	orrs	r2, r1
 80008de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008e0:	4b05      	ldr	r3, [pc, #20]	@ (80008f8 <HAL_MspInit+0x44>)
 80008e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008e4:	2380      	movs	r3, #128	@ 0x80
 80008e6:	055b      	lsls	r3, r3, #21
 80008e8:	4013      	ands	r3, r2
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	46bd      	mov	sp, r7
 80008f2:	b002      	add	sp, #8
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	46c0      	nop			@ (mov r8, r8)
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b091      	sub	sp, #68	@ 0x44
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	232c      	movs	r3, #44	@ 0x2c
 8000906:	18fb      	adds	r3, r7, r3
 8000908:	0018      	movs	r0, r3
 800090a:	2314      	movs	r3, #20
 800090c:	001a      	movs	r2, r3
 800090e:	2100      	movs	r1, #0
 8000910:	f003 fc68 	bl	80041e4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000914:	2414      	movs	r4, #20
 8000916:	193b      	adds	r3, r7, r4
 8000918:	0018      	movs	r0, r3
 800091a:	2318      	movs	r3, #24
 800091c:	001a      	movs	r2, r3
 800091e:	2100      	movs	r1, #0
 8000920:	f003 fc60 	bl	80041e4 <memset>
  if(huart->Instance==USART1)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a27      	ldr	r2, [pc, #156]	@ (80009c8 <HAL_UART_MspInit+0xcc>)
 800092a:	4293      	cmp	r3, r2
 800092c:	d147      	bne.n	80009be <HAL_UART_MspInit+0xc2>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800092e:	193b      	adds	r3, r7, r4
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800093a:	193b      	adds	r3, r7, r4
 800093c:	0018      	movs	r0, r3
 800093e:	f001 f9b5 	bl	8001cac <HAL_RCCEx_PeriphCLKConfig>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000946:	f7ff ff65 	bl	8000814 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800094a:	4b20      	ldr	r3, [pc, #128]	@ (80009cc <HAL_UART_MspInit+0xd0>)
 800094c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800094e:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <HAL_UART_MspInit+0xd0>)
 8000950:	2180      	movs	r1, #128	@ 0x80
 8000952:	01c9      	lsls	r1, r1, #7
 8000954:	430a      	orrs	r2, r1
 8000956:	641a      	str	r2, [r3, #64]	@ 0x40
 8000958:	4b1c      	ldr	r3, [pc, #112]	@ (80009cc <HAL_UART_MspInit+0xd0>)
 800095a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800095c:	2380      	movs	r3, #128	@ 0x80
 800095e:	01db      	lsls	r3, r3, #7
 8000960:	4013      	ands	r3, r2
 8000962:	613b      	str	r3, [r7, #16]
 8000964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b19      	ldr	r3, [pc, #100]	@ (80009cc <HAL_UART_MspInit+0xd0>)
 8000968:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <HAL_UART_MspInit+0xd0>)
 800096c:	2101      	movs	r1, #1
 800096e:	430a      	orrs	r2, r1
 8000970:	635a      	str	r2, [r3, #52]	@ 0x34
 8000972:	4b16      	ldr	r3, [pc, #88]	@ (80009cc <HAL_UART_MspInit+0xd0>)
 8000974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000976:	2201      	movs	r2, #1
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800097e:	212c      	movs	r1, #44	@ 0x2c
 8000980:	187b      	adds	r3, r7, r1
 8000982:	22c0      	movs	r2, #192	@ 0xc0
 8000984:	00d2      	lsls	r2, r2, #3
 8000986:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2202      	movs	r2, #2
 800098c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2201      	movs	r2, #1
 800099e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a0:	187a      	adds	r2, r7, r1
 80009a2:	23a0      	movs	r3, #160	@ 0xa0
 80009a4:	05db      	lsls	r3, r3, #23
 80009a6:	0011      	movs	r1, r2
 80009a8:	0018      	movs	r0, r3
 80009aa:	f000 fb15 	bl	8000fd8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	201b      	movs	r0, #27
 80009b4:	f000 fa12 	bl	8000ddc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009b8:	201b      	movs	r0, #27
 80009ba:	f000 fa24 	bl	8000e06 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	46bd      	mov	sp, r7
 80009c2:	b011      	add	sp, #68	@ 0x44
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	46c0      	nop			@ (mov r8, r8)
 80009c8:	40013800 	.word	0x40013800
 80009cc:	40021000 	.word	0x40021000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	e7fd      	b.n	80009d4 <NMI_Handler+0x4>

080009d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	e7fd      	b.n	80009dc <HardFault_Handler+0x4>

080009e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b580      	push	{r7, lr}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	46c0      	nop			@ (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f8:	f000 f904 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009fc:	46c0      	nop			@ (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a08:	4b03      	ldr	r3, [pc, #12]	@ (8000a18 <USART1_IRQHandler+0x14>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f001 fbc6 	bl	800219c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a10:	46c0      	nop			@ (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	2000008c 	.word	0x2000008c

08000a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  return 1;
 8000a20:	2301      	movs	r3, #1
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <_kill>:

int _kill(int pid, int sig)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a32:	f003 fc3b 	bl	80042ac <__errno>
 8000a36:	0003      	movs	r3, r0
 8000a38:	2216      	movs	r2, #22
 8000a3a:	601a      	str	r2, [r3, #0]
  return -1;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	425b      	negs	r3, r3
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	b002      	add	sp, #8
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <_exit>:

void _exit (int status)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000a50:	2301      	movs	r3, #1
 8000a52:	425a      	negs	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	0011      	movs	r1, r2
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f7ff ffe5 	bl	8000a28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	e7fd      	b.n	8000a5e <_exit+0x16>
	...

08000a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b086      	sub	sp, #24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a6c:	4a14      	ldr	r2, [pc, #80]	@ (8000ac0 <_sbrk+0x5c>)
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <_sbrk+0x60>)
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a78:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <_sbrk+0x64>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d102      	bne.n	8000a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a80:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <_sbrk+0x64>)
 8000a82:	4a12      	ldr	r2, [pc, #72]	@ (8000acc <_sbrk+0x68>)
 8000a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <_sbrk+0x64>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	18d3      	adds	r3, r2, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d207      	bcs.n	8000aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a94:	f003 fc0a 	bl	80042ac <__errno>
 8000a98:	0003      	movs	r3, r0
 8000a9a:	220c      	movs	r2, #12
 8000a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	425b      	negs	r3, r3
 8000aa2:	e009      	b.n	8000ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aa4:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <_sbrk+0x64>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aaa:	4b07      	ldr	r3, [pc, #28]	@ (8000ac8 <_sbrk+0x64>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	18d2      	adds	r2, r2, r3
 8000ab2:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <_sbrk+0x64>)
 8000ab4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b006      	add	sp, #24
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20002000 	.word	0x20002000
 8000ac4:	00000400 	.word	0x00000400
 8000ac8:	20000140 	.word	0x20000140
 8000acc:	20000298 	.word	0x20000298

08000ad0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	46c0      	nop			@ (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
	...

08000adc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000adc:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ade:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ae0:	f7ff fff6 	bl	8000ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ae4:	480c      	ldr	r0, [pc, #48]	@ (8000b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ae6:	490d      	ldr	r1, [pc, #52]	@ (8000b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae8:	4a0d      	ldr	r2, [pc, #52]	@ (8000b20 <LoopForever+0xe>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000aec:	e002      	b.n	8000af4 <LoopCopyDataInit>

08000aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af2:	3304      	adds	r3, #4

08000af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af8:	d3f9      	bcc.n	8000aee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000afc:	4c0a      	ldr	r4, [pc, #40]	@ (8000b28 <LoopForever+0x16>)
  movs r3, #0
 8000afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b00:	e001      	b.n	8000b06 <LoopFillZerobss>

08000b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b04:	3204      	adds	r2, #4

08000b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b08:	d3fb      	bcc.n	8000b02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b0a:	f003 fbd5 	bl	80042b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b0e:	f7ff fd91 	bl	8000634 <main>

08000b12 <LoopForever>:

LoopForever:
  b LoopForever
 8000b12:	e7fe      	b.n	8000b12 <LoopForever>
  ldr   r0, =_estack
 8000b14:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b1c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b20:	080044cc 	.word	0x080044cc
  ldr r2, =_sbss
 8000b24:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b28:	20000294 	.word	0x20000294

08000b2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b2c:	e7fe      	b.n	8000b2c <ADC1_IRQHandler>
	...

08000b30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <HAL_Init+0x3c>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <HAL_Init+0x3c>)
 8000b42:	2180      	movs	r1, #128	@ 0x80
 8000b44:	0049      	lsls	r1, r1, #1
 8000b46:	430a      	orrs	r2, r1
 8000b48:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b4a:	2003      	movs	r0, #3
 8000b4c:	f000 f810 	bl	8000b70 <HAL_InitTick>
 8000b50:	1e03      	subs	r3, r0, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b54:	1dfb      	adds	r3, r7, #7
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e001      	b.n	8000b60 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b5c:	f7ff feaa 	bl	80008b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b60:	1dfb      	adds	r3, r7, #7
 8000b62:	781b      	ldrb	r3, [r3, #0]
}
 8000b64:	0018      	movs	r0, r3
 8000b66:	46bd      	mov	sp, r7
 8000b68:	b002      	add	sp, #8
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40022000 	.word	0x40022000

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b78:	230f      	movs	r3, #15
 8000b7a:	18fb      	adds	r3, r7, r3
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000b80:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <HAL_InitTick+0x88>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d02b      	beq.n	8000be0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <HAL_InitTick+0x8c>)
 8000b8a:	681c      	ldr	r4, [r3, #0]
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf8 <HAL_InitTick+0x88>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	0019      	movs	r1, r3
 8000b92:	23fa      	movs	r3, #250	@ 0xfa
 8000b94:	0098      	lsls	r0, r3, #2
 8000b96:	f7ff fabb 	bl	8000110 <__udivsi3>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	0019      	movs	r1, r3
 8000b9e:	0020      	movs	r0, r4
 8000ba0:	f7ff fab6 	bl	8000110 <__udivsi3>
 8000ba4:	0003      	movs	r3, r0
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f000 f93d 	bl	8000e26 <HAL_SYSTICK_Config>
 8000bac:	1e03      	subs	r3, r0, #0
 8000bae:	d112      	bne.n	8000bd6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d80a      	bhi.n	8000bcc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2301      	movs	r3, #1
 8000bba:	425b      	negs	r3, r3
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 f90c 	bl	8000ddc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <HAL_InitTick+0x90>)
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	e00d      	b.n	8000be8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bcc:	230f      	movs	r3, #15
 8000bce:	18fb      	adds	r3, r7, r3
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	e008      	b.n	8000be8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bd6:	230f      	movs	r3, #15
 8000bd8:	18fb      	adds	r3, r7, r3
 8000bda:	2201      	movs	r2, #1
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e003      	b.n	8000be8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000be0:	230f      	movs	r3, #15
 8000be2:	18fb      	adds	r3, r7, r3
 8000be4:	2201      	movs	r2, #1
 8000be6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000be8:	230f      	movs	r3, #15
 8000bea:	18fb      	adds	r3, r7, r3
 8000bec:	781b      	ldrb	r3, [r3, #0]
}
 8000bee:	0018      	movs	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b005      	add	sp, #20
 8000bf4:	bd90      	pop	{r4, r7, pc}
 8000bf6:	46c0      	nop			@ (mov r8, r8)
 8000bf8:	20000008 	.word	0x20000008
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <HAL_IncTick+0x1c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	001a      	movs	r2, r3
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	18d2      	adds	r2, r2, r3
 8000c14:	4b03      	ldr	r3, [pc, #12]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c16:	601a      	str	r2, [r3, #0]
}
 8000c18:	46c0      	nop			@ (mov r8, r8)
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	46c0      	nop			@ (mov r8, r8)
 8000c20:	20000008 	.word	0x20000008
 8000c24:	20000144 	.word	0x20000144

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b02      	ldr	r3, [pc, #8]	@ (8000c38 <HAL_GetTick+0x10>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	0018      	movs	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	20000144 	.word	0x20000144

08000c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff fff0 	bl	8000c28 <HAL_GetTick>
 8000c48:	0003      	movs	r3, r0
 8000c4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	3301      	adds	r3, #1
 8000c54:	d005      	beq.n	8000c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <HAL_Delay+0x44>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	001a      	movs	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	189b      	adds	r3, r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	f7ff ffe0 	bl	8000c28 <HAL_GetTick>
 8000c68:	0002      	movs	r2, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8f7      	bhi.n	8000c64 <HAL_Delay+0x28>
  {
  }
}
 8000c74:	46c0      	nop			@ (mov r8, r8)
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b004      	add	sp, #16
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			@ (mov r8, r8)
 8000c80:	20000008 	.word	0x20000008

08000c84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	0002      	movs	r2, r0
 8000c8c:	1dfb      	adds	r3, r7, #7
 8000c8e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c90:	1dfb      	adds	r3, r7, #7
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c96:	d809      	bhi.n	8000cac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c98:	1dfb      	adds	r3, r7, #7
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	231f      	movs	r3, #31
 8000ca0:	401a      	ands	r2, r3
 8000ca2:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <__NVIC_EnableIRQ+0x30>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	000a      	movs	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000cac:	46c0      	nop			@ (mov r8, r8)
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b002      	add	sp, #8
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	e000e100 	.word	0xe000e100

08000cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	0002      	movs	r2, r0
 8000cc0:	6039      	str	r1, [r7, #0]
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	1dfb      	adds	r3, r7, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ccc:	d828      	bhi.n	8000d20 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cce:	4a2f      	ldr	r2, [pc, #188]	@ (8000d8c <__NVIC_SetPriority+0xd4>)
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	b25b      	sxtb	r3, r3
 8000cd6:	089b      	lsrs	r3, r3, #2
 8000cd8:	33c0      	adds	r3, #192	@ 0xc0
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	589b      	ldr	r3, [r3, r2]
 8000cde:	1dfa      	adds	r2, r7, #7
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	0011      	movs	r1, r2
 8000ce4:	2203      	movs	r2, #3
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	00d2      	lsls	r2, r2, #3
 8000cea:	21ff      	movs	r1, #255	@ 0xff
 8000cec:	4091      	lsls	r1, r2
 8000cee:	000a      	movs	r2, r1
 8000cf0:	43d2      	mvns	r2, r2
 8000cf2:	401a      	ands	r2, r3
 8000cf4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	019b      	lsls	r3, r3, #6
 8000cfa:	22ff      	movs	r2, #255	@ 0xff
 8000cfc:	401a      	ands	r2, r3
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	0018      	movs	r0, r3
 8000d04:	2303      	movs	r3, #3
 8000d06:	4003      	ands	r3, r0
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0c:	481f      	ldr	r0, [pc, #124]	@ (8000d8c <__NVIC_SetPriority+0xd4>)
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b25b      	sxtb	r3, r3
 8000d14:	089b      	lsrs	r3, r3, #2
 8000d16:	430a      	orrs	r2, r1
 8000d18:	33c0      	adds	r3, #192	@ 0xc0
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d1e:	e031      	b.n	8000d84 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d20:	4a1b      	ldr	r2, [pc, #108]	@ (8000d90 <__NVIC_SetPriority+0xd8>)
 8000d22:	1dfb      	adds	r3, r7, #7
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	0019      	movs	r1, r3
 8000d28:	230f      	movs	r3, #15
 8000d2a:	400b      	ands	r3, r1
 8000d2c:	3b08      	subs	r3, #8
 8000d2e:	089b      	lsrs	r3, r3, #2
 8000d30:	3306      	adds	r3, #6
 8000d32:	009b      	lsls	r3, r3, #2
 8000d34:	18d3      	adds	r3, r2, r3
 8000d36:	3304      	adds	r3, #4
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	1dfa      	adds	r2, r7, #7
 8000d3c:	7812      	ldrb	r2, [r2, #0]
 8000d3e:	0011      	movs	r1, r2
 8000d40:	2203      	movs	r2, #3
 8000d42:	400a      	ands	r2, r1
 8000d44:	00d2      	lsls	r2, r2, #3
 8000d46:	21ff      	movs	r1, #255	@ 0xff
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	000a      	movs	r2, r1
 8000d4c:	43d2      	mvns	r2, r2
 8000d4e:	401a      	ands	r2, r3
 8000d50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	019b      	lsls	r3, r3, #6
 8000d56:	22ff      	movs	r2, #255	@ 0xff
 8000d58:	401a      	ands	r2, r3
 8000d5a:	1dfb      	adds	r3, r7, #7
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2303      	movs	r3, #3
 8000d62:	4003      	ands	r3, r0
 8000d64:	00db      	lsls	r3, r3, #3
 8000d66:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d68:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <__NVIC_SetPriority+0xd8>)
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	001c      	movs	r4, r3
 8000d70:	230f      	movs	r3, #15
 8000d72:	4023      	ands	r3, r4
 8000d74:	3b08      	subs	r3, #8
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	3306      	adds	r3, #6
 8000d7c:	009b      	lsls	r3, r3, #2
 8000d7e:	18c3      	adds	r3, r0, r3
 8000d80:	3304      	adds	r3, #4
 8000d82:	601a      	str	r2, [r3, #0]
}
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	b003      	add	sp, #12
 8000d8a:	bd90      	pop	{r4, r7, pc}
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	1e5a      	subs	r2, r3, #1
 8000da0:	2380      	movs	r3, #128	@ 0x80
 8000da2:	045b      	lsls	r3, r3, #17
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d301      	bcc.n	8000dac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da8:	2301      	movs	r3, #1
 8000daa:	e010      	b.n	8000dce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dac:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <SysTick_Config+0x44>)
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	3a01      	subs	r2, #1
 8000db2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000db4:	2301      	movs	r3, #1
 8000db6:	425b      	negs	r3, r3
 8000db8:	2103      	movs	r1, #3
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff ff7c 	bl	8000cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dc0:	4b05      	ldr	r3, [pc, #20]	@ (8000dd8 <SysTick_Config+0x44>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dc6:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <SysTick_Config+0x44>)
 8000dc8:	2207      	movs	r2, #7
 8000dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dcc:	2300      	movs	r3, #0
}
 8000dce:	0018      	movs	r0, r3
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	b002      	add	sp, #8
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	46c0      	nop			@ (mov r8, r8)
 8000dd8:	e000e010 	.word	0xe000e010

08000ddc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	60b9      	str	r1, [r7, #8]
 8000de4:	607a      	str	r2, [r7, #4]
 8000de6:	210f      	movs	r1, #15
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	1c02      	adds	r2, r0, #0
 8000dec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	187b      	adds	r3, r7, r1
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	0011      	movs	r1, r2
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f7ff ff5d 	bl	8000cb8 <__NVIC_SetPriority>
}
 8000dfe:	46c0      	nop			@ (mov r8, r8)
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b004      	add	sp, #16
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b082      	sub	sp, #8
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	0002      	movs	r2, r0
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e12:	1dfb      	adds	r3, r7, #7
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	b25b      	sxtb	r3, r3
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f7ff ff33 	bl	8000c84 <__NVIC_EnableIRQ>
}
 8000e1e:	46c0      	nop			@ (mov r8, r8)
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	0018      	movs	r0, r3
 8000e32:	f7ff ffaf 	bl	8000d94 <SysTick_Config>
 8000e36:	0003      	movs	r3, r0
}
 8000e38:	0018      	movs	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b002      	add	sp, #8
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e050      	b.n	8000ef4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2225      	movs	r2, #37	@ 0x25
 8000e56:	5c9b      	ldrb	r3, [r3, r2]
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d008      	beq.n	8000e70 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2204      	movs	r2, #4
 8000e62:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2224      	movs	r2, #36	@ 0x24
 8000e68:	2100      	movs	r1, #0
 8000e6a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e041      	b.n	8000ef4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	210e      	movs	r1, #14
 8000e7c:	438a      	bics	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8a:	491c      	ldr	r1, [pc, #112]	@ (8000efc <HAL_DMA_Abort+0xbc>)
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	438a      	bics	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000ea0:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <HAL_DMA_Abort+0xc0>)
 8000ea2:	6859      	ldr	r1, [r3, #4]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	221c      	movs	r2, #28
 8000eaa:	4013      	ands	r3, r2
 8000eac:	2201      	movs	r2, #1
 8000eae:	409a      	lsls	r2, r3
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <HAL_DMA_Abort+0xc0>)
 8000eb2:	430a      	orrs	r2, r1
 8000eb4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000ebe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00c      	beq.n	8000ee2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ed2:	490a      	ldr	r1, [pc, #40]	@ (8000efc <HAL_DMA_Abort+0xbc>)
 8000ed4:	400a      	ands	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000ee0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2225      	movs	r2, #37	@ 0x25
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2224      	movs	r2, #36	@ 0x24
 8000eee:	2100      	movs	r1, #0
 8000ef0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b002      	add	sp, #8
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	fffffeff 	.word	0xfffffeff
 8000f00:	40020000 	.word	0x40020000

08000f04 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f0c:	210f      	movs	r1, #15
 8000f0e:	187b      	adds	r3, r7, r1
 8000f10:	2200      	movs	r2, #0
 8000f12:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2225      	movs	r2, #37	@ 0x25
 8000f18:	5c9b      	ldrb	r3, [r3, r2]
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	d006      	beq.n	8000f2e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2204      	movs	r2, #4
 8000f24:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000f26:	187b      	adds	r3, r7, r1
 8000f28:	2201      	movs	r2, #1
 8000f2a:	701a      	strb	r2, [r3, #0]
 8000f2c:	e049      	b.n	8000fc2 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	210e      	movs	r1, #14
 8000f3a:	438a      	bics	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2101      	movs	r1, #1
 8000f4a:	438a      	bics	r2, r1
 8000f4c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f58:	491d      	ldr	r1, [pc, #116]	@ (8000fd0 <HAL_DMA_Abort_IT+0xcc>)
 8000f5a:	400a      	ands	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <HAL_DMA_Abort_IT+0xd0>)
 8000f60:	6859      	ldr	r1, [r3, #4]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	221c      	movs	r2, #28
 8000f68:	4013      	ands	r3, r2
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	409a      	lsls	r2, r3
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <HAL_DMA_Abort_IT+0xd0>)
 8000f70:	430a      	orrs	r2, r1
 8000f72:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f7c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d00c      	beq.n	8000fa0 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f90:	490f      	ldr	r1, [pc, #60]	@ (8000fd0 <HAL_DMA_Abort_IT+0xcc>)
 8000f92:	400a      	ands	r2, r1
 8000f94:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000f9e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2225      	movs	r2, #37	@ 0x25
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2224      	movs	r2, #36	@ 0x24
 8000fac:	2100      	movs	r1, #0
 8000fae:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d004      	beq.n	8000fc2 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	0010      	movs	r0, r2
 8000fc0:	4798      	blx	r3
    }
  }
  return status;
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	781b      	ldrb	r3, [r3, #0]
}
 8000fc8:	0018      	movs	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	b004      	add	sp, #16
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	fffffeff 	.word	0xfffffeff
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fe6:	e147      	b.n	8001278 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2101      	movs	r1, #1
 8000fee:	697a      	ldr	r2, [r7, #20]
 8000ff0:	4091      	lsls	r1, r2
 8000ff2:	000a      	movs	r2, r1
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d100      	bne.n	8001000 <HAL_GPIO_Init+0x28>
 8000ffe:	e138      	b.n	8001272 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	2203      	movs	r2, #3
 8001006:	4013      	ands	r3, r2
 8001008:	2b01      	cmp	r3, #1
 800100a:	d005      	beq.n	8001018 <HAL_GPIO_Init+0x40>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2203      	movs	r2, #3
 8001012:	4013      	ands	r3, r2
 8001014:	2b02      	cmp	r3, #2
 8001016:	d130      	bne.n	800107a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	2203      	movs	r2, #3
 8001024:	409a      	lsls	r2, r3
 8001026:	0013      	movs	r3, r2
 8001028:	43da      	mvns	r2, r3
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68da      	ldr	r2, [r3, #12]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	409a      	lsls	r2, r3
 800103a:	0013      	movs	r3, r2
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800104e:	2201      	movs	r2, #1
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
 8001054:	0013      	movs	r3, r2
 8001056:	43da      	mvns	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	091b      	lsrs	r3, r3, #4
 8001064:	2201      	movs	r2, #1
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
 800106c:	0013      	movs	r3, r2
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	2203      	movs	r2, #3
 8001080:	4013      	ands	r3, r2
 8001082:	2b03      	cmp	r3, #3
 8001084:	d017      	beq.n	80010b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	68db      	ldr	r3, [r3, #12]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	005b      	lsls	r3, r3, #1
 8001090:	2203      	movs	r2, #3
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	43da      	mvns	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	409a      	lsls	r2, r3
 80010a8:	0013      	movs	r3, r2
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	2203      	movs	r2, #3
 80010bc:	4013      	ands	r3, r2
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d123      	bne.n	800110a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	08da      	lsrs	r2, r3, #3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3208      	adds	r2, #8
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	58d3      	ldr	r3, [r2, r3]
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	2207      	movs	r2, #7
 80010d4:	4013      	ands	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	220f      	movs	r2, #15
 80010da:	409a      	lsls	r2, r3
 80010dc:	0013      	movs	r3, r2
 80010de:	43da      	mvns	r2, r3
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	691a      	ldr	r2, [r3, #16]
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	2107      	movs	r1, #7
 80010ee:	400b      	ands	r3, r1
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	409a      	lsls	r2, r3
 80010f4:	0013      	movs	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	08da      	lsrs	r2, r3, #3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3208      	adds	r2, #8
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	6939      	ldr	r1, [r7, #16]
 8001108:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	2203      	movs	r2, #3
 8001116:	409a      	lsls	r2, r3
 8001118:	0013      	movs	r3, r2
 800111a:	43da      	mvns	r2, r3
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	4013      	ands	r3, r2
 8001120:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	2203      	movs	r2, #3
 8001128:	401a      	ands	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	409a      	lsls	r2, r3
 8001130:	0013      	movs	r3, r2
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	23c0      	movs	r3, #192	@ 0xc0
 8001144:	029b      	lsls	r3, r3, #10
 8001146:	4013      	ands	r3, r2
 8001148:	d100      	bne.n	800114c <HAL_GPIO_Init+0x174>
 800114a:	e092      	b.n	8001272 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800114c:	4a50      	ldr	r2, [pc, #320]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	089b      	lsrs	r3, r3, #2
 8001152:	3318      	adds	r3, #24
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	589b      	ldr	r3, [r3, r2]
 8001158:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	2203      	movs	r2, #3
 800115e:	4013      	ands	r3, r2
 8001160:	00db      	lsls	r3, r3, #3
 8001162:	220f      	movs	r2, #15
 8001164:	409a      	lsls	r2, r3
 8001166:	0013      	movs	r3, r2
 8001168:	43da      	mvns	r2, r3
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	4013      	ands	r3, r2
 800116e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	23a0      	movs	r3, #160	@ 0xa0
 8001174:	05db      	lsls	r3, r3, #23
 8001176:	429a      	cmp	r2, r3
 8001178:	d013      	beq.n	80011a2 <HAL_GPIO_Init+0x1ca>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a45      	ldr	r2, [pc, #276]	@ (8001294 <HAL_GPIO_Init+0x2bc>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d00d      	beq.n	800119e <HAL_GPIO_Init+0x1c6>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a44      	ldr	r2, [pc, #272]	@ (8001298 <HAL_GPIO_Init+0x2c0>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d007      	beq.n	800119a <HAL_GPIO_Init+0x1c2>
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a43      	ldr	r2, [pc, #268]	@ (800129c <HAL_GPIO_Init+0x2c4>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d101      	bne.n	8001196 <HAL_GPIO_Init+0x1be>
 8001192:	2303      	movs	r3, #3
 8001194:	e006      	b.n	80011a4 <HAL_GPIO_Init+0x1cc>
 8001196:	2305      	movs	r3, #5
 8001198:	e004      	b.n	80011a4 <HAL_GPIO_Init+0x1cc>
 800119a:	2302      	movs	r3, #2
 800119c:	e002      	b.n	80011a4 <HAL_GPIO_Init+0x1cc>
 800119e:	2301      	movs	r3, #1
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x1cc>
 80011a2:	2300      	movs	r3, #0
 80011a4:	697a      	ldr	r2, [r7, #20]
 80011a6:	2103      	movs	r1, #3
 80011a8:	400a      	ands	r2, r1
 80011aa:	00d2      	lsls	r2, r2, #3
 80011ac:	4093      	lsls	r3, r2
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80011b4:	4936      	ldr	r1, [pc, #216]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	089b      	lsrs	r3, r3, #2
 80011ba:	3318      	adds	r3, #24
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80011c2:	4b33      	ldr	r3, [pc, #204]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685a      	ldr	r2, [r3, #4]
 80011d6:	2380      	movs	r3, #128	@ 0x80
 80011d8:	035b      	lsls	r3, r3, #13
 80011da:	4013      	ands	r3, r2
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80011ec:	4b28      	ldr	r3, [pc, #160]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43da      	mvns	r2, r3
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	2380      	movs	r3, #128	@ 0x80
 8001202:	039b      	lsls	r3, r3, #14
 8001204:	4013      	ands	r3, r2
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001210:	4b1f      	ldr	r3, [pc, #124]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001216:	4a1e      	ldr	r2, [pc, #120]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 8001218:	2384      	movs	r3, #132	@ 0x84
 800121a:	58d3      	ldr	r3, [r2, r3]
 800121c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	43da      	mvns	r2, r3
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	029b      	lsls	r3, r3, #10
 8001230:	4013      	ands	r3, r2
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800123c:	4914      	ldr	r1, [pc, #80]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 800123e:	2284      	movs	r2, #132	@ 0x84
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001244:	4a12      	ldr	r2, [pc, #72]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 8001246:	2380      	movs	r3, #128	@ 0x80
 8001248:	58d3      	ldr	r3, [r2, r3]
 800124a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	43da      	mvns	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	2380      	movs	r3, #128	@ 0x80
 800125c:	025b      	lsls	r3, r3, #9
 800125e:	4013      	ands	r3, r2
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4313      	orrs	r3, r2
 8001268:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800126a:	4909      	ldr	r1, [pc, #36]	@ (8001290 <HAL_GPIO_Init+0x2b8>)
 800126c:	2280      	movs	r2, #128	@ 0x80
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	3301      	adds	r3, #1
 8001276:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	40da      	lsrs	r2, r3
 8001280:	1e13      	subs	r3, r2, #0
 8001282:	d000      	beq.n	8001286 <HAL_GPIO_Init+0x2ae>
 8001284:	e6b0      	b.n	8000fe8 <HAL_GPIO_Init+0x10>
  }
}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	46c0      	nop			@ (mov r8, r8)
 800128a:	46bd      	mov	sp, r7
 800128c:	b006      	add	sp, #24
 800128e:	bd80      	pop	{r7, pc}
 8001290:	40021800 	.word	0x40021800
 8001294:	50000400 	.word	0x50000400
 8001298:	50000800 	.word	0x50000800
 800129c:	50000c00 	.word	0x50000c00

080012a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80012a8:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a19      	ldr	r2, [pc, #100]	@ (8001314 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80012ae:	4013      	ands	r3, r2
 80012b0:	0019      	movs	r1, r3
 80012b2:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	2380      	movs	r3, #128	@ 0x80
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d11f      	bne.n	8001304 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	0013      	movs	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	189b      	adds	r3, r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4912      	ldr	r1, [pc, #72]	@ (800131c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80012d2:	0018      	movs	r0, r3
 80012d4:	f7fe ff1c 	bl	8000110 <__udivsi3>
 80012d8:	0003      	movs	r3, r0
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012de:	e008      	b.n	80012f2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	e001      	b.n	80012f2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e009      	b.n	8001306 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012f2:	4b07      	ldr	r3, [pc, #28]	@ (8001310 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	2380      	movs	r3, #128	@ 0x80
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	401a      	ands	r2, r3
 80012fc:	2380      	movs	r3, #128	@ 0x80
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	429a      	cmp	r2, r3
 8001302:	d0ed      	beq.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b004      	add	sp, #16
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			@ (mov r8, r8)
 8001310:	40007000 	.word	0x40007000
 8001314:	fffff9ff 	.word	0xfffff9ff
 8001318:	20000000 	.word	0x20000000
 800131c:	000f4240 	.word	0x000f4240

08001320 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	23e0      	movs	r3, #224	@ 0xe0
 800132a:	01db      	lsls	r3, r3, #7
 800132c:	4013      	ands	r3, r2
}
 800132e:	0018      	movs	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e2f3      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2201      	movs	r2, #1
 8001350:	4013      	ands	r3, r2
 8001352:	d100      	bne.n	8001356 <HAL_RCC_OscConfig+0x1e>
 8001354:	e07c      	b.n	8001450 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001356:	4bc3      	ldr	r3, [pc, #780]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2238      	movs	r2, #56	@ 0x38
 800135c:	4013      	ands	r3, r2
 800135e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001360:	4bc0      	ldr	r3, [pc, #768]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2203      	movs	r2, #3
 8001366:	4013      	ands	r3, r2
 8001368:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2b10      	cmp	r3, #16
 800136e:	d102      	bne.n	8001376 <HAL_RCC_OscConfig+0x3e>
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d002      	beq.n	800137c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b08      	cmp	r3, #8
 800137a:	d10b      	bne.n	8001394 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800137c:	4bb9      	ldr	r3, [pc, #740]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	2380      	movs	r3, #128	@ 0x80
 8001382:	029b      	lsls	r3, r3, #10
 8001384:	4013      	ands	r3, r2
 8001386:	d062      	beq.n	800144e <HAL_RCC_OscConfig+0x116>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d15e      	bne.n	800144e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e2ce      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	2380      	movs	r3, #128	@ 0x80
 800139a:	025b      	lsls	r3, r3, #9
 800139c:	429a      	cmp	r2, r3
 800139e:	d107      	bne.n	80013b0 <HAL_RCC_OscConfig+0x78>
 80013a0:	4bb0      	ldr	r3, [pc, #704]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4baf      	ldr	r3, [pc, #700]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80013a6:	2180      	movs	r1, #128	@ 0x80
 80013a8:	0249      	lsls	r1, r1, #9
 80013aa:	430a      	orrs	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	e020      	b.n	80013f2 <HAL_RCC_OscConfig+0xba>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	23a0      	movs	r3, #160	@ 0xa0
 80013b6:	02db      	lsls	r3, r3, #11
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d10e      	bne.n	80013da <HAL_RCC_OscConfig+0xa2>
 80013bc:	4ba9      	ldr	r3, [pc, #676]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	4ba8      	ldr	r3, [pc, #672]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80013c2:	2180      	movs	r1, #128	@ 0x80
 80013c4:	02c9      	lsls	r1, r1, #11
 80013c6:	430a      	orrs	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	4ba6      	ldr	r3, [pc, #664]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4ba5      	ldr	r3, [pc, #660]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	2180      	movs	r1, #128	@ 0x80
 80013d2:	0249      	lsls	r1, r1, #9
 80013d4:	430a      	orrs	r2, r1
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e00b      	b.n	80013f2 <HAL_RCC_OscConfig+0xba>
 80013da:	4ba2      	ldr	r3, [pc, #648]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	4ba1      	ldr	r3, [pc, #644]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80013e0:	49a1      	ldr	r1, [pc, #644]	@ (8001668 <HAL_RCC_OscConfig+0x330>)
 80013e2:	400a      	ands	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	4b9f      	ldr	r3, [pc, #636]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b9e      	ldr	r3, [pc, #632]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80013ec:	499f      	ldr	r1, [pc, #636]	@ (800166c <HAL_RCC_OscConfig+0x334>)
 80013ee:	400a      	ands	r2, r1
 80013f0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d014      	beq.n	8001424 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fa:	f7ff fc15 	bl	8000c28 <HAL_GetTick>
 80013fe:	0003      	movs	r3, r0
 8001400:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fc10 	bl	8000c28 <HAL_GetTick>
 8001408:	0002      	movs	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	@ 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e28d      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001416:	4b93      	ldr	r3, [pc, #588]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	029b      	lsls	r3, r3, #10
 800141e:	4013      	ands	r3, r2
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0xcc>
 8001422:	e015      	b.n	8001450 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fc00 	bl	8000c28 <HAL_GetTick>
 8001428:	0003      	movs	r3, r0
 800142a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800142c:	e008      	b.n	8001440 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142e:	f7ff fbfb 	bl	8000c28 <HAL_GetTick>
 8001432:	0002      	movs	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	2b64      	cmp	r3, #100	@ 0x64
 800143a:	d901      	bls.n	8001440 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800143c:	2303      	movs	r3, #3
 800143e:	e278      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001440:	4b88      	ldr	r3, [pc, #544]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	2380      	movs	r3, #128	@ 0x80
 8001446:	029b      	lsls	r3, r3, #10
 8001448:	4013      	ands	r3, r2
 800144a:	d1f0      	bne.n	800142e <HAL_RCC_OscConfig+0xf6>
 800144c:	e000      	b.n	8001450 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2202      	movs	r2, #2
 8001456:	4013      	ands	r3, r2
 8001458:	d100      	bne.n	800145c <HAL_RCC_OscConfig+0x124>
 800145a:	e099      	b.n	8001590 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800145c:	4b81      	ldr	r3, [pc, #516]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	2238      	movs	r2, #56	@ 0x38
 8001462:	4013      	ands	r3, r2
 8001464:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001466:	4b7f      	ldr	r3, [pc, #508]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2203      	movs	r2, #3
 800146c:	4013      	ands	r3, r2
 800146e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	2b10      	cmp	r3, #16
 8001474:	d102      	bne.n	800147c <HAL_RCC_OscConfig+0x144>
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	2b02      	cmp	r3, #2
 800147a:	d002      	beq.n	8001482 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d135      	bne.n	80014ee <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001482:	4b78      	ldr	r3, [pc, #480]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	2380      	movs	r3, #128	@ 0x80
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	4013      	ands	r3, r2
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x162>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e24b      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4b72      	ldr	r3, [pc, #456]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4a74      	ldr	r2, [pc, #464]	@ (8001670 <HAL_RCC_OscConfig+0x338>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	0019      	movs	r1, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	021a      	lsls	r2, r3, #8
 80014aa:	4b6e      	ldr	r3, [pc, #440]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80014ac:	430a      	orrs	r2, r1
 80014ae:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d112      	bne.n	80014dc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014b6:	4b6b      	ldr	r3, [pc, #428]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a6e      	ldr	r2, [pc, #440]	@ (8001674 <HAL_RCC_OscConfig+0x33c>)
 80014bc:	4013      	ands	r3, r2
 80014be:	0019      	movs	r1, r3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	691a      	ldr	r2, [r3, #16]
 80014c4:	4b67      	ldr	r3, [pc, #412]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80014ca:	4b66      	ldr	r3, [pc, #408]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0adb      	lsrs	r3, r3, #11
 80014d0:	2207      	movs	r2, #7
 80014d2:	4013      	ands	r3, r2
 80014d4:	4a68      	ldr	r2, [pc, #416]	@ (8001678 <HAL_RCC_OscConfig+0x340>)
 80014d6:	40da      	lsrs	r2, r3
 80014d8:	4b68      	ldr	r3, [pc, #416]	@ (800167c <HAL_RCC_OscConfig+0x344>)
 80014da:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014dc:	4b68      	ldr	r3, [pc, #416]	@ (8001680 <HAL_RCC_OscConfig+0x348>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff fb45 	bl	8000b70 <HAL_InitTick>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d051      	beq.n	800158e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e221      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d030      	beq.n	8001558 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80014f6:	4b5b      	ldr	r3, [pc, #364]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001674 <HAL_RCC_OscConfig+0x33c>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	0019      	movs	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691a      	ldr	r2, [r3, #16]
 8001504:	4b57      	ldr	r3, [pc, #348]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800150a:	4b56      	ldr	r3, [pc, #344]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4b55      	ldr	r3, [pc, #340]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001510:	2180      	movs	r1, #128	@ 0x80
 8001512:	0049      	lsls	r1, r1, #1
 8001514:	430a      	orrs	r2, r1
 8001516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001518:	f7ff fb86 	bl	8000c28 <HAL_GetTick>
 800151c:	0003      	movs	r3, r0
 800151e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001520:	e008      	b.n	8001534 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001522:	f7ff fb81 	bl	8000c28 <HAL_GetTick>
 8001526:	0002      	movs	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d901      	bls.n	8001534 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001530:	2303      	movs	r3, #3
 8001532:	e1fe      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001534:	4b4b      	ldr	r3, [pc, #300]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	00db      	lsls	r3, r3, #3
 800153c:	4013      	ands	r3, r2
 800153e:	d0f0      	beq.n	8001522 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001540:	4b48      	ldr	r3, [pc, #288]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a4a      	ldr	r2, [pc, #296]	@ (8001670 <HAL_RCC_OscConfig+0x338>)
 8001546:	4013      	ands	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	021a      	lsls	r2, r3, #8
 8001550:	4b44      	ldr	r3, [pc, #272]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001552:	430a      	orrs	r2, r1
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	e01b      	b.n	8001590 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001558:	4b42      	ldr	r3, [pc, #264]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 800155e:	4949      	ldr	r1, [pc, #292]	@ (8001684 <HAL_RCC_OscConfig+0x34c>)
 8001560:	400a      	ands	r2, r1
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fb60 	bl	8000c28 <HAL_GetTick>
 8001568:	0003      	movs	r3, r0
 800156a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800156c:	e008      	b.n	8001580 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156e:	f7ff fb5b 	bl	8000c28 <HAL_GetTick>
 8001572:	0002      	movs	r2, r0
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	1ad3      	subs	r3, r2, r3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e1d8      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001580:	4b38      	ldr	r3, [pc, #224]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	@ 0x80
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4013      	ands	r3, r2
 800158a:	d1f0      	bne.n	800156e <HAL_RCC_OscConfig+0x236>
 800158c:	e000      	b.n	8001590 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800158e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2208      	movs	r2, #8
 8001596:	4013      	ands	r3, r2
 8001598:	d047      	beq.n	800162a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800159a:	4b32      	ldr	r3, [pc, #200]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2238      	movs	r2, #56	@ 0x38
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b18      	cmp	r3, #24
 80015a4:	d10a      	bne.n	80015bc <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80015a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80015a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015aa:	2202      	movs	r2, #2
 80015ac:	4013      	ands	r3, r2
 80015ae:	d03c      	beq.n	800162a <HAL_RCC_OscConfig+0x2f2>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	699b      	ldr	r3, [r3, #24]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d138      	bne.n	800162a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e1ba      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	699b      	ldr	r3, [r3, #24]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d019      	beq.n	80015f8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80015c4:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80015c6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015c8:	4b26      	ldr	r3, [pc, #152]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80015ca:	2101      	movs	r1, #1
 80015cc:	430a      	orrs	r2, r1
 80015ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff fb2a 	bl	8000c28 <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015d8:	e008      	b.n	80015ec <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015da:	f7ff fb25 	bl	8000c28 <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d901      	bls.n	80015ec <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e1a2      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015ec:	4b1d      	ldr	r3, [pc, #116]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015f0:	2202      	movs	r2, #2
 80015f2:	4013      	ands	r3, r2
 80015f4:	d0f1      	beq.n	80015da <HAL_RCC_OscConfig+0x2a2>
 80015f6:	e018      	b.n	800162a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80015f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80015fa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015fc:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	2101      	movs	r1, #1
 8001600:	438a      	bics	r2, r1
 8001602:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001604:	f7ff fb10 	bl	8000c28 <HAL_GetTick>
 8001608:	0003      	movs	r3, r0
 800160a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800160e:	f7ff fb0b 	bl	8000c28 <HAL_GetTick>
 8001612:	0002      	movs	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e188      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001620:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001622:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001624:	2202      	movs	r2, #2
 8001626:	4013      	ands	r3, r2
 8001628:	d1f1      	bne.n	800160e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2204      	movs	r2, #4
 8001630:	4013      	ands	r3, r2
 8001632:	d100      	bne.n	8001636 <HAL_RCC_OscConfig+0x2fe>
 8001634:	e0c6      	b.n	80017c4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001636:	231f      	movs	r3, #31
 8001638:	18fb      	adds	r3, r7, r3
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800163e:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2238      	movs	r2, #56	@ 0x38
 8001644:	4013      	ands	r3, r2
 8001646:	2b20      	cmp	r3, #32
 8001648:	d11e      	bne.n	8001688 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800164a:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <HAL_RCC_OscConfig+0x32c>)
 800164c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800164e:	2202      	movs	r2, #2
 8001650:	4013      	ands	r3, r2
 8001652:	d100      	bne.n	8001656 <HAL_RCC_OscConfig+0x31e>
 8001654:	e0b6      	b.n	80017c4 <HAL_RCC_OscConfig+0x48c>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d000      	beq.n	8001660 <HAL_RCC_OscConfig+0x328>
 800165e:	e0b1      	b.n	80017c4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e166      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
 8001664:	40021000 	.word	0x40021000
 8001668:	fffeffff 	.word	0xfffeffff
 800166c:	fffbffff 	.word	0xfffbffff
 8001670:	ffff80ff 	.word	0xffff80ff
 8001674:	ffffc7ff 	.word	0xffffc7ff
 8001678:	00f42400 	.word	0x00f42400
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004
 8001684:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001688:	4bac      	ldr	r3, [pc, #688]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 800168a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800168c:	2380      	movs	r3, #128	@ 0x80
 800168e:	055b      	lsls	r3, r3, #21
 8001690:	4013      	ands	r3, r2
 8001692:	d101      	bne.n	8001698 <HAL_RCC_OscConfig+0x360>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <HAL_RCC_OscConfig+0x362>
 8001698:	2300      	movs	r3, #0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d011      	beq.n	80016c2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4ba7      	ldr	r3, [pc, #668]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80016a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016a2:	4ba6      	ldr	r3, [pc, #664]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80016a4:	2180      	movs	r1, #128	@ 0x80
 80016a6:	0549      	lsls	r1, r1, #21
 80016a8:	430a      	orrs	r2, r1
 80016aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80016ac:	4ba3      	ldr	r3, [pc, #652]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80016ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016b0:	2380      	movs	r3, #128	@ 0x80
 80016b2:	055b      	lsls	r3, r3, #21
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80016ba:	231f      	movs	r3, #31
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c2:	4b9f      	ldr	r3, [pc, #636]	@ (8001940 <HAL_RCC_OscConfig+0x608>)
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	2380      	movs	r3, #128	@ 0x80
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4013      	ands	r3, r2
 80016cc:	d11a      	bne.n	8001704 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016ce:	4b9c      	ldr	r3, [pc, #624]	@ (8001940 <HAL_RCC_OscConfig+0x608>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	4b9b      	ldr	r3, [pc, #620]	@ (8001940 <HAL_RCC_OscConfig+0x608>)
 80016d4:	2180      	movs	r1, #128	@ 0x80
 80016d6:	0049      	lsls	r1, r1, #1
 80016d8:	430a      	orrs	r2, r1
 80016da:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80016dc:	f7ff faa4 	bl	8000c28 <HAL_GetTick>
 80016e0:	0003      	movs	r3, r0
 80016e2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e4:	e008      	b.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e6:	f7ff fa9f 	bl	8000c28 <HAL_GetTick>
 80016ea:	0002      	movs	r2, r0
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e11c      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016f8:	4b91      	ldr	r3, [pc, #580]	@ (8001940 <HAL_RCC_OscConfig+0x608>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	@ 0x80
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4013      	ands	r3, r2
 8001702:	d0f0      	beq.n	80016e6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x3e2>
 800170c:	4b8b      	ldr	r3, [pc, #556]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 800170e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001710:	4b8a      	ldr	r3, [pc, #552]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 8001712:	2101      	movs	r1, #1
 8001714:	430a      	orrs	r2, r1
 8001716:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001718:	e01c      	b.n	8001754 <HAL_RCC_OscConfig+0x41c>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b05      	cmp	r3, #5
 8001720:	d10c      	bne.n	800173c <HAL_RCC_OscConfig+0x404>
 8001722:	4b86      	ldr	r3, [pc, #536]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 8001724:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001726:	4b85      	ldr	r3, [pc, #532]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 8001728:	2104      	movs	r1, #4
 800172a:	430a      	orrs	r2, r1
 800172c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800172e:	4b83      	ldr	r3, [pc, #524]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 8001730:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001732:	4b82      	ldr	r3, [pc, #520]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 8001734:	2101      	movs	r1, #1
 8001736:	430a      	orrs	r2, r1
 8001738:	65da      	str	r2, [r3, #92]	@ 0x5c
 800173a:	e00b      	b.n	8001754 <HAL_RCC_OscConfig+0x41c>
 800173c:	4b7f      	ldr	r3, [pc, #508]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 800173e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001740:	4b7e      	ldr	r3, [pc, #504]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 8001742:	2101      	movs	r1, #1
 8001744:	438a      	bics	r2, r1
 8001746:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001748:	4b7c      	ldr	r3, [pc, #496]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 800174a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800174c:	4b7b      	ldr	r3, [pc, #492]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 800174e:	2104      	movs	r1, #4
 8001750:	438a      	bics	r2, r1
 8001752:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d014      	beq.n	8001786 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175c:	f7ff fa64 	bl	8000c28 <HAL_GetTick>
 8001760:	0003      	movs	r3, r0
 8001762:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001764:	e009      	b.n	800177a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001766:	f7ff fa5f 	bl	8000c28 <HAL_GetTick>
 800176a:	0002      	movs	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	4a74      	ldr	r2, [pc, #464]	@ (8001944 <HAL_RCC_OscConfig+0x60c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e0db      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800177a:	4b70      	ldr	r3, [pc, #448]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 800177c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177e:	2202      	movs	r2, #2
 8001780:	4013      	ands	r3, r2
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x42e>
 8001784:	e013      	b.n	80017ae <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001786:	f7ff fa4f 	bl	8000c28 <HAL_GetTick>
 800178a:	0003      	movs	r3, r0
 800178c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800178e:	e009      	b.n	80017a4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fa4a 	bl	8000c28 <HAL_GetTick>
 8001794:	0002      	movs	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	4a6a      	ldr	r2, [pc, #424]	@ (8001944 <HAL_RCC_OscConfig+0x60c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0c6      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a4:	4b65      	ldr	r3, [pc, #404]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80017a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a8:	2202      	movs	r2, #2
 80017aa:	4013      	ands	r3, r2
 80017ac:	d1f0      	bne.n	8001790 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80017ae:	231f      	movs	r3, #31
 80017b0:	18fb      	adds	r3, r7, r3
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017b8:	4b60      	ldr	r3, [pc, #384]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80017ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017bc:	4b5f      	ldr	r3, [pc, #380]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80017be:	4962      	ldr	r1, [pc, #392]	@ (8001948 <HAL_RCC_OscConfig+0x610>)
 80017c0:	400a      	ands	r2, r1
 80017c2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d100      	bne.n	80017ce <HAL_RCC_OscConfig+0x496>
 80017cc:	e0b0      	b.n	8001930 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017ce:	4b5b      	ldr	r3, [pc, #364]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2238      	movs	r2, #56	@ 0x38
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b10      	cmp	r3, #16
 80017d8:	d100      	bne.n	80017dc <HAL_RCC_OscConfig+0x4a4>
 80017da:	e078      	b.n	80018ce <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d153      	bne.n	800188c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e4:	4b55      	ldr	r3, [pc, #340]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b54      	ldr	r3, [pc, #336]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80017ea:	4958      	ldr	r1, [pc, #352]	@ (800194c <HAL_RCC_OscConfig+0x614>)
 80017ec:	400a      	ands	r2, r1
 80017ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff fa1a 	bl	8000c28 <HAL_GetTick>
 80017f4:	0003      	movs	r3, r0
 80017f6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017fa:	f7ff fa15 	bl	8000c28 <HAL_GetTick>
 80017fe:	0002      	movs	r2, r0
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e092      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180c:	4b4b      	ldr	r3, [pc, #300]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	@ 0x80
 8001812:	049b      	lsls	r3, r3, #18
 8001814:	4013      	ands	r3, r2
 8001816:	d1f0      	bne.n	80017fa <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001818:	4b48      	ldr	r3, [pc, #288]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	4a4c      	ldr	r2, [pc, #304]	@ (8001950 <HAL_RCC_OscConfig+0x618>)
 800181e:	4013      	ands	r3, r2
 8001820:	0019      	movs	r1, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a1a      	ldr	r2, [r3, #32]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800182a:	431a      	orrs	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001830:	021b      	lsls	r3, r3, #8
 8001832:	431a      	orrs	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001838:	431a      	orrs	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	431a      	orrs	r2, r3
 8001840:	4b3e      	ldr	r3, [pc, #248]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 8001842:	430a      	orrs	r2, r1
 8001844:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001846:	4b3d      	ldr	r3, [pc, #244]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	4b3c      	ldr	r3, [pc, #240]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 800184c:	2180      	movs	r1, #128	@ 0x80
 800184e:	0449      	lsls	r1, r1, #17
 8001850:	430a      	orrs	r2, r1
 8001852:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001854:	4b39      	ldr	r3, [pc, #228]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 8001856:	68da      	ldr	r2, [r3, #12]
 8001858:	4b38      	ldr	r3, [pc, #224]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 800185a:	2180      	movs	r1, #128	@ 0x80
 800185c:	0549      	lsls	r1, r1, #21
 800185e:	430a      	orrs	r2, r1
 8001860:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001862:	f7ff f9e1 	bl	8000c28 <HAL_GetTick>
 8001866:	0003      	movs	r3, r0
 8001868:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff f9dc 	bl	8000c28 <HAL_GetTick>
 8001870:	0002      	movs	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e059      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	4b2f      	ldr	r3, [pc, #188]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	2380      	movs	r3, #128	@ 0x80
 8001884:	049b      	lsls	r3, r3, #18
 8001886:	4013      	ands	r3, r2
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0x534>
 800188a:	e051      	b.n	8001930 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b2b      	ldr	r3, [pc, #172]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	4b2a      	ldr	r3, [pc, #168]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 8001892:	492e      	ldr	r1, [pc, #184]	@ (800194c <HAL_RCC_OscConfig+0x614>)
 8001894:	400a      	ands	r2, r1
 8001896:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff f9c6 	bl	8000c28 <HAL_GetTick>
 800189c:	0003      	movs	r3, r0
 800189e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a2:	f7ff f9c1 	bl	8000c28 <HAL_GetTick>
 80018a6:	0002      	movs	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e03e      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018b4:	4b21      	ldr	r3, [pc, #132]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	049b      	lsls	r3, r3, #18
 80018bc:	4013      	ands	r3, r2
 80018be:	d1f0      	bne.n	80018a2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80018c0:	4b1e      	ldr	r3, [pc, #120]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	4b1d      	ldr	r3, [pc, #116]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80018c6:	4923      	ldr	r1, [pc, #140]	@ (8001954 <HAL_RCC_OscConfig+0x61c>)
 80018c8:	400a      	ands	r2, r1
 80018ca:	60da      	str	r2, [r3, #12]
 80018cc:	e030      	b.n	8001930 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69db      	ldr	r3, [r3, #28]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e02b      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80018da:	4b18      	ldr	r3, [pc, #96]	@ (800193c <HAL_RCC_OscConfig+0x604>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	2203      	movs	r2, #3
 80018e4:	401a      	ands	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d11e      	bne.n	800192c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2270      	movs	r2, #112	@ 0x70
 80018f2:	401a      	ands	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d117      	bne.n	800192c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	23fe      	movs	r3, #254	@ 0xfe
 8001900:	01db      	lsls	r3, r3, #7
 8001902:	401a      	ands	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001908:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800190a:	429a      	cmp	r2, r3
 800190c:	d10e      	bne.n	800192c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	23f8      	movs	r3, #248	@ 0xf8
 8001912:	039b      	lsls	r3, r3, #14
 8001914:	401a      	ands	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d106      	bne.n	800192c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	0f5b      	lsrs	r3, r3, #29
 8001922:	075a      	lsls	r2, r3, #29
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d001      	beq.n	8001930 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b008      	add	sp, #32
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			@ (mov r8, r8)
 800193c:	40021000 	.word	0x40021000
 8001940:	40007000 	.word	0x40007000
 8001944:	00001388 	.word	0x00001388
 8001948:	efffffff 	.word	0xefffffff
 800194c:	feffffff 	.word	0xfeffffff
 8001950:	1fc1808c 	.word	0x1fc1808c
 8001954:	effefffc 	.word	0xeffefffc

08001958 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d101      	bne.n	800196c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	e0e9      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800196c:	4b76      	ldr	r3, [pc, #472]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2207      	movs	r2, #7
 8001972:	4013      	ands	r3, r2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d91e      	bls.n	80019b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197a:	4b73      	ldr	r3, [pc, #460]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2207      	movs	r2, #7
 8001980:	4393      	bics	r3, r2
 8001982:	0019      	movs	r1, r3
 8001984:	4b70      	ldr	r3, [pc, #448]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800198c:	f7ff f94c 	bl	8000c28 <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001994:	e009      	b.n	80019aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001996:	f7ff f947 	bl	8000c28 <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	4a6a      	ldr	r2, [pc, #424]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e0ca      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019aa:	4b67      	ldr	r3, [pc, #412]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2207      	movs	r2, #7
 80019b0:	4013      	ands	r3, r2
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d1ee      	bne.n	8001996 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2202      	movs	r2, #2
 80019be:	4013      	ands	r3, r2
 80019c0:	d015      	beq.n	80019ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2204      	movs	r2, #4
 80019c8:	4013      	ands	r3, r2
 80019ca:	d006      	beq.n	80019da <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019cc:	4b60      	ldr	r3, [pc, #384]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 80019d2:	21e0      	movs	r1, #224	@ 0xe0
 80019d4:	01c9      	lsls	r1, r1, #7
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019da:	4b5d      	ldr	r3, [pc, #372]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	4a5d      	ldr	r2, [pc, #372]	@ (8001b54 <HAL_RCC_ClockConfig+0x1fc>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	0019      	movs	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	4b59      	ldr	r3, [pc, #356]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	2201      	movs	r2, #1
 80019f4:	4013      	ands	r3, r2
 80019f6:	d057      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d107      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a00:	4b53      	ldr	r3, [pc, #332]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	2380      	movs	r3, #128	@ 0x80
 8001a06:	029b      	lsls	r3, r3, #10
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d12b      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e097      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d107      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a18:	4b4d      	ldr	r3, [pc, #308]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	049b      	lsls	r3, r3, #18
 8001a20:	4013      	ands	r3, r2
 8001a22:	d11f      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e08b      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d107      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a30:	4b47      	ldr	r3, [pc, #284]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	2380      	movs	r3, #128	@ 0x80
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d113      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e07f      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a48:	4b41      	ldr	r3, [pc, #260]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001a4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4c:	2202      	movs	r2, #2
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d108      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e074      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a56:	4b3e      	ldr	r3, [pc, #248]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e06d      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a64:	4b3a      	ldr	r3, [pc, #232]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2207      	movs	r2, #7
 8001a6a:	4393      	bics	r3, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	4b37      	ldr	r3, [pc, #220]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001a74:	430a      	orrs	r2, r1
 8001a76:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a78:	f7ff f8d6 	bl	8000c28 <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a80:	e009      	b.n	8001a96 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a82:	f7ff f8d1 	bl	8000c28 <HAL_GetTick>
 8001a86:	0002      	movs	r2, r0
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e054      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a96:	4b2e      	ldr	r3, [pc, #184]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2238      	movs	r2, #56	@ 0x38
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d1ec      	bne.n	8001a82 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b27      	ldr	r3, [pc, #156]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	2207      	movs	r2, #7
 8001aae:	4013      	ands	r3, r2
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d21e      	bcs.n	8001af4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	4b24      	ldr	r3, [pc, #144]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2207      	movs	r2, #7
 8001abc:	4393      	bics	r3, r2
 8001abe:	0019      	movs	r1, r3
 8001ac0:	4b21      	ldr	r3, [pc, #132]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ac8:	f7ff f8ae 	bl	8000c28 <HAL_GetTick>
 8001acc:	0003      	movs	r3, r0
 8001ace:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ad0:	e009      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad2:	f7ff f8a9 	bl	8000c28 <HAL_GetTick>
 8001ad6:	0002      	movs	r2, r0
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	4a1b      	ldr	r2, [pc, #108]	@ (8001b4c <HAL_RCC_ClockConfig+0x1f4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e02c      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ae6:	4b18      	ldr	r3, [pc, #96]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2207      	movs	r2, #7
 8001aec:	4013      	ands	r3, r2
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d1ee      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2204      	movs	r2, #4
 8001afa:	4013      	ands	r3, r2
 8001afc:	d009      	beq.n	8001b12 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001afe:	4b14      	ldr	r3, [pc, #80]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	4a15      	ldr	r2, [pc, #84]	@ (8001b58 <HAL_RCC_ClockConfig+0x200>)
 8001b04:	4013      	ands	r3, r2
 8001b06:	0019      	movs	r1, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	4b10      	ldr	r3, [pc, #64]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001b12:	f000 f829 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8001b16:	0001      	movs	r1, r0
 8001b18:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <HAL_RCC_ClockConfig+0x1f8>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	220f      	movs	r2, #15
 8001b20:	401a      	ands	r2, r3
 8001b22:	4b0e      	ldr	r3, [pc, #56]	@ (8001b5c <HAL_RCC_ClockConfig+0x204>)
 8001b24:	0092      	lsls	r2, r2, #2
 8001b26:	58d3      	ldr	r3, [r2, r3]
 8001b28:	221f      	movs	r2, #31
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	000a      	movs	r2, r1
 8001b2e:	40da      	lsrs	r2, r3
 8001b30:	4b0b      	ldr	r3, [pc, #44]	@ (8001b60 <HAL_RCC_ClockConfig+0x208>)
 8001b32:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <HAL_RCC_ClockConfig+0x20c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff f819 	bl	8000b70 <HAL_InitTick>
 8001b3e:	0003      	movs	r3, r0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	00001388 	.word	0x00001388
 8001b50:	40021000 	.word	0x40021000
 8001b54:	fffff0ff 	.word	0xfffff0ff
 8001b58:	ffff8fff 	.word	0xffff8fff
 8001b5c:	080043e8 	.word	0x080043e8
 8001b60:	20000000 	.word	0x20000000
 8001b64:	20000004 	.word	0x20000004

08001b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b6e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	2238      	movs	r2, #56	@ 0x38
 8001b74:	4013      	ands	r3, r2
 8001b76:	d10f      	bne.n	8001b98 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b78:	4b39      	ldr	r3, [pc, #228]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	0adb      	lsrs	r3, r3, #11
 8001b7e:	2207      	movs	r2, #7
 8001b80:	4013      	ands	r3, r2
 8001b82:	2201      	movs	r2, #1
 8001b84:	409a      	lsls	r2, r3
 8001b86:	0013      	movs	r3, r2
 8001b88:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b8a:	6839      	ldr	r1, [r7, #0]
 8001b8c:	4835      	ldr	r0, [pc, #212]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001b8e:	f7fe fabf 	bl	8000110 <__udivsi3>
 8001b92:	0003      	movs	r3, r0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	e05d      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b98:	4b31      	ldr	r3, [pc, #196]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2238      	movs	r2, #56	@ 0x38
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d102      	bne.n	8001baa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ba4:	4b30      	ldr	r3, [pc, #192]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x100>)
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	e054      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001baa:	4b2d      	ldr	r3, [pc, #180]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2238      	movs	r2, #56	@ 0x38
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d138      	bne.n	8001c28 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	2203      	movs	r2, #3
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bc0:	4b27      	ldr	r3, [pc, #156]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	4013      	ands	r3, r2
 8001bca:	3301      	adds	r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2b03      	cmp	r3, #3
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	4824      	ldr	r0, [pc, #144]	@ (8001c68 <HAL_RCC_GetSysClockFreq+0x100>)
 8001bd8:	f7fe fa9a 	bl	8000110 <__udivsi3>
 8001bdc:	0003      	movs	r3, r0
 8001bde:	0019      	movs	r1, r3
 8001be0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	227f      	movs	r2, #127	@ 0x7f
 8001be8:	4013      	ands	r3, r2
 8001bea:	434b      	muls	r3, r1
 8001bec:	617b      	str	r3, [r7, #20]
        break;
 8001bee:	e00d      	b.n	8001c0c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	481c      	ldr	r0, [pc, #112]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001bf4:	f7fe fa8c 	bl	8000110 <__udivsi3>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	0019      	movs	r1, r3
 8001bfc:	4b18      	ldr	r3, [pc, #96]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	227f      	movs	r2, #127	@ 0x7f
 8001c04:	4013      	ands	r3, r2
 8001c06:	434b      	muls	r3, r1
 8001c08:	617b      	str	r3, [r7, #20]
        break;
 8001c0a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	0f5b      	lsrs	r3, r3, #29
 8001c12:	2207      	movs	r2, #7
 8001c14:	4013      	ands	r3, r2
 8001c16:	3301      	adds	r3, #1
 8001c18:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001c1a:	6879      	ldr	r1, [r7, #4]
 8001c1c:	6978      	ldr	r0, [r7, #20]
 8001c1e:	f7fe fa77 	bl	8000110 <__udivsi3>
 8001c22:	0003      	movs	r3, r0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	e015      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001c28:	4b0d      	ldr	r3, [pc, #52]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2238      	movs	r2, #56	@ 0x38
 8001c2e:	4013      	ands	r3, r2
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d103      	bne.n	8001c3c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	021b      	lsls	r3, r3, #8
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	e00b      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c3c:	4b08      	ldr	r3, [pc, #32]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2238      	movs	r2, #56	@ 0x38
 8001c42:	4013      	ands	r3, r2
 8001c44:	2b18      	cmp	r3, #24
 8001c46:	d103      	bne.n	8001c50 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001c48:	23fa      	movs	r3, #250	@ 0xfa
 8001c4a:	01db      	lsls	r3, r3, #7
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	e001      	b.n	8001c54 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c54:	693b      	ldr	r3, [r7, #16]
}
 8001c56:	0018      	movs	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	b006      	add	sp, #24
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	46c0      	nop			@ (mov r8, r8)
 8001c60:	40021000 	.word	0x40021000
 8001c64:	00f42400 	.word	0x00f42400
 8001c68:	007a1200 	.word	0x007a1200

08001c6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c70:	4b02      	ldr	r3, [pc, #8]	@ (8001c7c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	0018      	movs	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			@ (mov r8, r8)
 8001c7c:	20000000 	.word	0x20000000

08001c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c80:	b5b0      	push	{r4, r5, r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001c84:	f7ff fff2 	bl	8001c6c <HAL_RCC_GetHCLKFreq>
 8001c88:	0004      	movs	r4, r0
 8001c8a:	f7ff fb49 	bl	8001320 <LL_RCC_GetAPB1Prescaler>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	0b1a      	lsrs	r2, r3, #12
 8001c92:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c94:	0092      	lsls	r2, r2, #2
 8001c96:	58d3      	ldr	r3, [r2, r3]
 8001c98:	221f      	movs	r2, #31
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	40dc      	lsrs	r4, r3
 8001c9e:	0023      	movs	r3, r4
}
 8001ca0:	0018      	movs	r0, r3
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca6:	46c0      	nop			@ (mov r8, r8)
 8001ca8:	08004428 	.word	0x08004428

08001cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001cb4:	2313      	movs	r3, #19
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	2200      	movs	r2, #0
 8001cba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cbc:	2312      	movs	r3, #18
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	@ 0x80
 8001cca:	029b      	lsls	r3, r3, #10
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d100      	bne.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001cd0:	e0a3      	b.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd2:	2011      	movs	r0, #17
 8001cd4:	183b      	adds	r3, r7, r0
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cda:	4b7f      	ldr	r3, [pc, #508]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cde:	2380      	movs	r3, #128	@ 0x80
 8001ce0:	055b      	lsls	r3, r3, #21
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d110      	bne.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ce8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cea:	4b7b      	ldr	r3, [pc, #492]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cec:	2180      	movs	r1, #128	@ 0x80
 8001cee:	0549      	lsls	r1, r1, #21
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cf4:	4b78      	ldr	r3, [pc, #480]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001cf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cf8:	2380      	movs	r3, #128	@ 0x80
 8001cfa:	055b      	lsls	r3, r3, #21
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d02:	183b      	adds	r3, r7, r0
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d08:	4b74      	ldr	r3, [pc, #464]	@ (8001edc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b73      	ldr	r3, [pc, #460]	@ (8001edc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d0e:	2180      	movs	r1, #128	@ 0x80
 8001d10:	0049      	lsls	r1, r1, #1
 8001d12:	430a      	orrs	r2, r1
 8001d14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d16:	f7fe ff87 	bl	8000c28 <HAL_GetTick>
 8001d1a:	0003      	movs	r3, r0
 8001d1c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d20:	f7fe ff82 	bl	8000c28 <HAL_GetTick>
 8001d24:	0002      	movs	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d904      	bls.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8001d2e:	2313      	movs	r3, #19
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	2203      	movs	r2, #3
 8001d34:	701a      	strb	r2, [r3, #0]
        break;
 8001d36:	e005      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d38:	4b68      	ldr	r3, [pc, #416]	@ (8001edc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	2380      	movs	r3, #128	@ 0x80
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4013      	ands	r3, r2
 8001d42:	d0ed      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8001d44:	2313      	movs	r3, #19
 8001d46:	18fb      	adds	r3, r7, r3
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d154      	bne.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001d4e:	4b62      	ldr	r3, [pc, #392]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d52:	23c0      	movs	r3, #192	@ 0xc0
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4013      	ands	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d019      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d014      	beq.n	8001d94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001d6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d6e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001d70:	4013      	ands	r3, r2
 8001d72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001d74:	4b58      	ldr	r3, [pc, #352]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d78:	4b57      	ldr	r3, [pc, #348]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d7a:	2180      	movs	r1, #128	@ 0x80
 8001d7c:	0249      	lsls	r1, r1, #9
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001d82:	4b55      	ldr	r3, [pc, #340]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d86:	4b54      	ldr	r3, [pc, #336]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d88:	4956      	ldr	r1, [pc, #344]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001d8a:	400a      	ands	r2, r1
 8001d8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001d8e:	4b52      	ldr	r3, [pc, #328]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	2201      	movs	r2, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d016      	beq.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7fe ff44 	bl	8000c28 <HAL_GetTick>
 8001da0:	0003      	movs	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001da4:	e00c      	b.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f7fe ff3f 	bl	8000c28 <HAL_GetTick>
 8001daa:	0002      	movs	r2, r0
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d904      	bls.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8001db6:	2313      	movs	r3, #19
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	2203      	movs	r2, #3
 8001dbc:	701a      	strb	r2, [r3, #0]
            break;
 8001dbe:	e004      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dc0:	4b45      	ldr	r3, [pc, #276]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d0ed      	beq.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8001dca:	2313      	movs	r3, #19
 8001dcc:	18fb      	adds	r3, r7, r3
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d10a      	bne.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001dd4:	4b40      	ldr	r3, [pc, #256]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd8:	4a41      	ldr	r2, [pc, #260]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001dda:	4013      	ands	r3, r2
 8001ddc:	0019      	movs	r1, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001de4:	430a      	orrs	r2, r1
 8001de6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001de8:	e00c      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001dea:	2312      	movs	r3, #18
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	2213      	movs	r2, #19
 8001df0:	18ba      	adds	r2, r7, r2
 8001df2:	7812      	ldrb	r2, [r2, #0]
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e005      	b.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001df8:	2312      	movs	r3, #18
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	2213      	movs	r2, #19
 8001dfe:	18ba      	adds	r2, r7, r2
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e04:	2311      	movs	r3, #17
 8001e06:	18fb      	adds	r3, r7, r3
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d105      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0e:	4b32      	ldr	r3, [pc, #200]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e12:	4b31      	ldr	r3, [pc, #196]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e14:	4935      	ldr	r1, [pc, #212]	@ (8001eec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001e16:	400a      	ands	r2, r1
 8001e18:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4013      	ands	r3, r2
 8001e22:	d009      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e24:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e28:	2203      	movs	r2, #3
 8001e2a:	4393      	bics	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4b29      	ldr	r3, [pc, #164]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e34:	430a      	orrs	r2, r1
 8001e36:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2220      	movs	r2, #32
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d009      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e42:	4b25      	ldr	r3, [pc, #148]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e46:	4a2a      	ldr	r2, [pc, #168]	@ (8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001e48:	4013      	ands	r3, r2
 8001e4a:	0019      	movs	r1, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	2380      	movs	r3, #128	@ 0x80
 8001e5c:	01db      	lsls	r3, r3, #7
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d015      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	0899      	lsrs	r1, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	05db      	lsls	r3, r3, #23
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d106      	bne.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001e80:	4b15      	ldr	r3, [pc, #84]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e82:	68da      	ldr	r2, [r3, #12]
 8001e84:	4b14      	ldr	r3, [pc, #80]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e86:	2180      	movs	r1, #128	@ 0x80
 8001e88:	0249      	lsls	r1, r1, #9
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	011b      	lsls	r3, r3, #4
 8001e96:	4013      	ands	r3, r2
 8001e98:	d016      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e9e:	4a15      	ldr	r2, [pc, #84]	@ (8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	0019      	movs	r1, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001eaa:	430a      	orrs	r2, r1
 8001eac:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	2380      	movs	r3, #128	@ 0x80
 8001eb4:	01db      	lsls	r3, r3, #7
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d106      	bne.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8001eba:	4b07      	ldr	r3, [pc, #28]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ebc:	68da      	ldr	r2, [r3, #12]
 8001ebe:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001ec0:	2180      	movs	r1, #128	@ 0x80
 8001ec2:	0249      	lsls	r1, r1, #9
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8001ec8:	2312      	movs	r3, #18
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	781b      	ldrb	r3, [r3, #0]
}
 8001ece:	0018      	movs	r0, r3
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	b006      	add	sp, #24
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	46c0      	nop			@ (mov r8, r8)
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40007000 	.word	0x40007000
 8001ee0:	fffffcff 	.word	0xfffffcff
 8001ee4:	fffeffff 	.word	0xfffeffff
 8001ee8:	00001388 	.word	0x00001388
 8001eec:	efffffff 	.word	0xefffffff
 8001ef0:	ffffcfff 	.word	0xffffcfff
 8001ef4:	ffff3fff 	.word	0xffff3fff

08001ef8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d101      	bne.n	8001f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e046      	b.n	8001f98 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2288      	movs	r2, #136	@ 0x88
 8001f0e:	589b      	ldr	r3, [r3, r2]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2284      	movs	r2, #132	@ 0x84
 8001f18:	2100      	movs	r1, #0
 8001f1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f7fe fcec 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2288      	movs	r2, #136	@ 0x88
 8001f28:	2124      	movs	r1, #36	@ 0x24
 8001f2a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2101      	movs	r1, #1
 8001f38:	438a      	bics	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d003      	beq.n	8001f4c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fdd4 	bl	8002af4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 fc66 	bl	8002820 <UART_SetConfig>
 8001f54:	0003      	movs	r3, r0
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e01c      	b.n	8001f98 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	490d      	ldr	r1, [pc, #52]	@ (8001fa0 <HAL_UART_Init+0xa8>)
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	212a      	movs	r1, #42	@ 0x2a
 8001f7a:	438a      	bics	r2, r1
 8001f7c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	0018      	movs	r0, r3
 8001f92:	f000 fe63 	bl	8002c5c <UART_CheckIdleState>
 8001f96:	0003      	movs	r3, r0
}
 8001f98:	0018      	movs	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	ffffb7ff 	.word	0xffffb7ff

08001fa4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	@ 0x28
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	1dbb      	adds	r3, r7, #6
 8001fb2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2288      	movs	r2, #136	@ 0x88
 8001fb8:	589b      	ldr	r3, [r3, r2]
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d000      	beq.n	8001fc0 <HAL_UART_Transmit+0x1c>
 8001fbe:	e090      	b.n	80020e2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_UART_Transmit+0x2a>
 8001fc6:	1dbb      	adds	r3, r7, #6
 8001fc8:	881b      	ldrh	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e088      	b.n	80020e4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	2380      	movs	r3, #128	@ 0x80
 8001fd8:	015b      	lsls	r3, r3, #5
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d109      	bne.n	8001ff2 <HAL_UART_Transmit+0x4e>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d105      	bne.n	8001ff2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	4013      	ands	r3, r2
 8001fec:	d001      	beq.n	8001ff2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e078      	b.n	80020e4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2290      	movs	r2, #144	@ 0x90
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2288      	movs	r2, #136	@ 0x88
 8001ffe:	2121      	movs	r1, #33	@ 0x21
 8002000:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002002:	f7fe fe11 	bl	8000c28 <HAL_GetTick>
 8002006:	0003      	movs	r3, r0
 8002008:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1dba      	adds	r2, r7, #6
 800200e:	2154      	movs	r1, #84	@ 0x54
 8002010:	8812      	ldrh	r2, [r2, #0]
 8002012:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1dba      	adds	r2, r7, #6
 8002018:	2156      	movs	r1, #86	@ 0x56
 800201a:	8812      	ldrh	r2, [r2, #0]
 800201c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689a      	ldr	r2, [r3, #8]
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	015b      	lsls	r3, r3, #5
 8002026:	429a      	cmp	r2, r3
 8002028:	d108      	bne.n	800203c <HAL_UART_Transmit+0x98>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d104      	bne.n	800203c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002032:	2300      	movs	r3, #0
 8002034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	e003      	b.n	8002044 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002040:	2300      	movs	r3, #0
 8002042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002044:	e030      	b.n	80020a8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	68f8      	ldr	r0, [r7, #12]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	0013      	movs	r3, r2
 8002050:	2200      	movs	r2, #0
 8002052:	2180      	movs	r1, #128	@ 0x80
 8002054:	f000 feac 	bl	8002db0 <UART_WaitOnFlagUntilTimeout>
 8002058:	1e03      	subs	r3, r0, #0
 800205a:	d005      	beq.n	8002068 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2288      	movs	r2, #136	@ 0x88
 8002060:	2120      	movs	r1, #32
 8002062:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e03d      	b.n	80020e4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10b      	bne.n	8002086 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	001a      	movs	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	05d2      	lsls	r2, r2, #23
 800207a:	0dd2      	lsrs	r2, r2, #23
 800207c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	3302      	adds	r3, #2
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	e007      	b.n	8002096 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	781a      	ldrb	r2, [r3, #0]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	3301      	adds	r3, #1
 8002094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2256      	movs	r2, #86	@ 0x56
 800209a:	5a9b      	ldrh	r3, [r3, r2]
 800209c:	b29b      	uxth	r3, r3
 800209e:	3b01      	subs	r3, #1
 80020a0:	b299      	uxth	r1, r3
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	2256      	movs	r2, #86	@ 0x56
 80020a6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2256      	movs	r2, #86	@ 0x56
 80020ac:	5a9b      	ldrh	r3, [r3, r2]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1c8      	bne.n	8002046 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	0013      	movs	r3, r2
 80020be:	2200      	movs	r2, #0
 80020c0:	2140      	movs	r1, #64	@ 0x40
 80020c2:	f000 fe75 	bl	8002db0 <UART_WaitOnFlagUntilTimeout>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2288      	movs	r2, #136	@ 0x88
 80020ce:	2120      	movs	r1, #32
 80020d0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e006      	b.n	80020e4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2288      	movs	r2, #136	@ 0x88
 80020da:	2120      	movs	r1, #32
 80020dc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80020e2:	2302      	movs	r3, #2
  }
}
 80020e4:	0018      	movs	r0, r3
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b008      	add	sp, #32
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	1dbb      	adds	r3, r7, #6
 80020f8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	228c      	movs	r2, #140	@ 0x8c
 80020fe:	589b      	ldr	r3, [r3, r2]
 8002100:	2b20      	cmp	r3, #32
 8002102:	d145      	bne.n	8002190 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_UART_Receive_IT+0x26>
 800210a:	1dbb      	adds	r3, r7, #6
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e03d      	b.n	8002192 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	689a      	ldr	r2, [r3, #8]
 800211a:	2380      	movs	r3, #128	@ 0x80
 800211c:	015b      	lsls	r3, r3, #5
 800211e:	429a      	cmp	r2, r3
 8002120:	d109      	bne.n	8002136 <HAL_UART_Receive_IT+0x4a>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d105      	bne.n	8002136 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	2201      	movs	r2, #1
 800212e:	4013      	ands	r3, r2
 8002130:	d001      	beq.n	8002136 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e02d      	b.n	8002192 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	2380      	movs	r3, #128	@ 0x80
 8002144:	041b      	lsls	r3, r3, #16
 8002146:	4013      	ands	r3, r2
 8002148:	d019      	beq.n	800217e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800214a:	f3ef 8310 	mrs	r3, PRIMASK
 800214e:	613b      	str	r3, [r7, #16]
  return(result);
 8002150:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	2301      	movs	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	f383 8810 	msr	PRIMASK, r3
}
 800215e:	46c0      	nop			@ (mov r8, r8)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2180      	movs	r1, #128	@ 0x80
 800216c:	04c9      	lsls	r1, r1, #19
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	f383 8810 	msr	PRIMASK, r3
}
 800217c:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800217e:	1dbb      	adds	r3, r7, #6
 8002180:	881a      	ldrh	r2, [r3, #0]
 8002182:	68b9      	ldr	r1, [r7, #8]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	0018      	movs	r0, r3
 8002188:	f000 fe82 	bl	8002e90 <UART_Start_Receive_IT>
 800218c:	0003      	movs	r3, r0
 800218e:	e000      	b.n	8002192 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002190:	2302      	movs	r3, #2
  }
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b008      	add	sp, #32
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800219c:	b5b0      	push	{r4, r5, r7, lr}
 800219e:	b0aa      	sub	sp, #168	@ 0xa8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	69db      	ldr	r3, [r3, #28]
 80021aa:	22a4      	movs	r2, #164	@ 0xa4
 80021ac:	18b9      	adds	r1, r7, r2
 80021ae:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	20a0      	movs	r0, #160	@ 0xa0
 80021b8:	1839      	adds	r1, r7, r0
 80021ba:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	249c      	movs	r4, #156	@ 0x9c
 80021c4:	1939      	adds	r1, r7, r4
 80021c6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80021c8:	0011      	movs	r1, r2
 80021ca:	18bb      	adds	r3, r7, r2
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4aa2      	ldr	r2, [pc, #648]	@ (8002458 <HAL_UART_IRQHandler+0x2bc>)
 80021d0:	4013      	ands	r3, r2
 80021d2:	2298      	movs	r2, #152	@ 0x98
 80021d4:	18bd      	adds	r5, r7, r2
 80021d6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80021d8:	18bb      	adds	r3, r7, r2
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d11a      	bne.n	8002216 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2220      	movs	r2, #32
 80021e6:	4013      	ands	r3, r2
 80021e8:	d015      	beq.n	8002216 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80021ea:	183b      	adds	r3, r7, r0
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2220      	movs	r2, #32
 80021f0:	4013      	ands	r3, r2
 80021f2:	d105      	bne.n	8002200 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80021f4:	193b      	adds	r3, r7, r4
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	@ 0x80
 80021fa:	055b      	lsls	r3, r3, #21
 80021fc:	4013      	ands	r3, r2
 80021fe:	d00a      	beq.n	8002216 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002204:	2b00      	cmp	r3, #0
 8002206:	d100      	bne.n	800220a <HAL_UART_IRQHandler+0x6e>
 8002208:	e2dc      	b.n	80027c4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	0010      	movs	r0, r2
 8002212:	4798      	blx	r3
      }
      return;
 8002214:	e2d6      	b.n	80027c4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002216:	2398      	movs	r3, #152	@ 0x98
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d100      	bne.n	8002222 <HAL_UART_IRQHandler+0x86>
 8002220:	e122      	b.n	8002468 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002222:	239c      	movs	r3, #156	@ 0x9c
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a8c      	ldr	r2, [pc, #560]	@ (800245c <HAL_UART_IRQHandler+0x2c0>)
 800222a:	4013      	ands	r3, r2
 800222c:	d106      	bne.n	800223c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800222e:	23a0      	movs	r3, #160	@ 0xa0
 8002230:	18fb      	adds	r3, r7, r3
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a8a      	ldr	r2, [pc, #552]	@ (8002460 <HAL_UART_IRQHandler+0x2c4>)
 8002236:	4013      	ands	r3, r2
 8002238:	d100      	bne.n	800223c <HAL_UART_IRQHandler+0xa0>
 800223a:	e115      	b.n	8002468 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800223c:	23a4      	movs	r3, #164	@ 0xa4
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2201      	movs	r2, #1
 8002244:	4013      	ands	r3, r2
 8002246:	d012      	beq.n	800226e <HAL_UART_IRQHandler+0xd2>
 8002248:	23a0      	movs	r3, #160	@ 0xa0
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	@ 0x80
 8002250:	005b      	lsls	r3, r3, #1
 8002252:	4013      	ands	r3, r2
 8002254:	d00b      	beq.n	800226e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2201      	movs	r2, #1
 800225c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2290      	movs	r2, #144	@ 0x90
 8002262:	589b      	ldr	r3, [r3, r2]
 8002264:	2201      	movs	r2, #1
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2190      	movs	r1, #144	@ 0x90
 800226c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800226e:	23a4      	movs	r3, #164	@ 0xa4
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2202      	movs	r2, #2
 8002276:	4013      	ands	r3, r2
 8002278:	d011      	beq.n	800229e <HAL_UART_IRQHandler+0x102>
 800227a:	239c      	movs	r3, #156	@ 0x9c
 800227c:	18fb      	adds	r3, r7, r3
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	d00b      	beq.n	800229e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2202      	movs	r2, #2
 800228c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2290      	movs	r2, #144	@ 0x90
 8002292:	589b      	ldr	r3, [r3, r2]
 8002294:	2204      	movs	r2, #4
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2190      	movs	r1, #144	@ 0x90
 800229c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800229e:	23a4      	movs	r3, #164	@ 0xa4
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2204      	movs	r2, #4
 80022a6:	4013      	ands	r3, r2
 80022a8:	d011      	beq.n	80022ce <HAL_UART_IRQHandler+0x132>
 80022aa:	239c      	movs	r3, #156	@ 0x9c
 80022ac:	18fb      	adds	r3, r7, r3
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2201      	movs	r2, #1
 80022b2:	4013      	ands	r3, r2
 80022b4:	d00b      	beq.n	80022ce <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2204      	movs	r2, #4
 80022bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2290      	movs	r2, #144	@ 0x90
 80022c2:	589b      	ldr	r3, [r3, r2]
 80022c4:	2202      	movs	r2, #2
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2190      	movs	r1, #144	@ 0x90
 80022cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80022ce:	23a4      	movs	r3, #164	@ 0xa4
 80022d0:	18fb      	adds	r3, r7, r3
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2208      	movs	r2, #8
 80022d6:	4013      	ands	r3, r2
 80022d8:	d017      	beq.n	800230a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80022da:	23a0      	movs	r3, #160	@ 0xa0
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2220      	movs	r2, #32
 80022e2:	4013      	ands	r3, r2
 80022e4:	d105      	bne.n	80022f2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80022e6:	239c      	movs	r3, #156	@ 0x9c
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a5b      	ldr	r2, [pc, #364]	@ (800245c <HAL_UART_IRQHandler+0x2c0>)
 80022ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80022f0:	d00b      	beq.n	800230a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2208      	movs	r2, #8
 80022f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2290      	movs	r2, #144	@ 0x90
 80022fe:	589b      	ldr	r3, [r3, r2]
 8002300:	2208      	movs	r2, #8
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2190      	movs	r1, #144	@ 0x90
 8002308:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800230a:	23a4      	movs	r3, #164	@ 0xa4
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	4013      	ands	r3, r2
 8002316:	d013      	beq.n	8002340 <HAL_UART_IRQHandler+0x1a4>
 8002318:	23a0      	movs	r3, #160	@ 0xa0
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	04db      	lsls	r3, r3, #19
 8002322:	4013      	ands	r3, r2
 8002324:	d00c      	beq.n	8002340 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2280      	movs	r2, #128	@ 0x80
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2290      	movs	r2, #144	@ 0x90
 8002334:	589b      	ldr	r3, [r3, r2]
 8002336:	2220      	movs	r2, #32
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2190      	movs	r1, #144	@ 0x90
 800233e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2290      	movs	r2, #144	@ 0x90
 8002344:	589b      	ldr	r3, [r3, r2]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d100      	bne.n	800234c <HAL_UART_IRQHandler+0x1b0>
 800234a:	e23d      	b.n	80027c8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800234c:	23a4      	movs	r3, #164	@ 0xa4
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2220      	movs	r2, #32
 8002354:	4013      	ands	r3, r2
 8002356:	d015      	beq.n	8002384 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002358:	23a0      	movs	r3, #160	@ 0xa0
 800235a:	18fb      	adds	r3, r7, r3
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2220      	movs	r2, #32
 8002360:	4013      	ands	r3, r2
 8002362:	d106      	bne.n	8002372 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002364:	239c      	movs	r3, #156	@ 0x9c
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	2380      	movs	r3, #128	@ 0x80
 800236c:	055b      	lsls	r3, r3, #21
 800236e:	4013      	ands	r3, r2
 8002370:	d008      	beq.n	8002384 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	0010      	movs	r0, r2
 8002382:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2290      	movs	r2, #144	@ 0x90
 8002388:	589b      	ldr	r3, [r3, r2]
 800238a:	2194      	movs	r1, #148	@ 0x94
 800238c:	187a      	adds	r2, r7, r1
 800238e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2240      	movs	r2, #64	@ 0x40
 8002398:	4013      	ands	r3, r2
 800239a:	2b40      	cmp	r3, #64	@ 0x40
 800239c:	d004      	beq.n	80023a8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2228      	movs	r2, #40	@ 0x28
 80023a4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80023a6:	d04c      	beq.n	8002442 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 fe94 	bl	80030d8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2240      	movs	r2, #64	@ 0x40
 80023b8:	4013      	ands	r3, r2
 80023ba:	2b40      	cmp	r3, #64	@ 0x40
 80023bc:	d13c      	bne.n	8002438 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023be:	f3ef 8310 	mrs	r3, PRIMASK
 80023c2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80023c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80023c6:	2090      	movs	r0, #144	@ 0x90
 80023c8:	183a      	adds	r2, r7, r0
 80023ca:	6013      	str	r3, [r2, #0]
 80023cc:	2301      	movs	r3, #1
 80023ce:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023d2:	f383 8810 	msr	PRIMASK, r3
}
 80023d6:	46c0      	nop			@ (mov r8, r8)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2140      	movs	r1, #64	@ 0x40
 80023e4:	438a      	bics	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	183b      	adds	r3, r7, r0
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80023ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023f0:	f383 8810 	msr	PRIMASK, r3
}
 80023f4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2280      	movs	r2, #128	@ 0x80
 80023fa:	589b      	ldr	r3, [r3, r2]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d016      	beq.n	800242e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2280      	movs	r2, #128	@ 0x80
 8002404:	589b      	ldr	r3, [r3, r2]
 8002406:	4a17      	ldr	r2, [pc, #92]	@ (8002464 <HAL_UART_IRQHandler+0x2c8>)
 8002408:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2280      	movs	r2, #128	@ 0x80
 800240e:	589b      	ldr	r3, [r3, r2]
 8002410:	0018      	movs	r0, r3
 8002412:	f7fe fd77 	bl	8000f04 <HAL_DMA_Abort_IT>
 8002416:	1e03      	subs	r3, r0, #0
 8002418:	d01c      	beq.n	8002454 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2280      	movs	r2, #128	@ 0x80
 800241e:	589b      	ldr	r3, [r3, r2]
 8002420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	2180      	movs	r1, #128	@ 0x80
 8002426:	5852      	ldr	r2, [r2, r1]
 8002428:	0010      	movs	r0, r2
 800242a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800242c:	e012      	b.n	8002454 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	0018      	movs	r0, r3
 8002432:	f000 f9e1 	bl	80027f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002436:	e00d      	b.n	8002454 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	0018      	movs	r0, r3
 800243c:	f000 f9dc 	bl	80027f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002440:	e008      	b.n	8002454 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	0018      	movs	r0, r3
 8002446:	f000 f9d7 	bl	80027f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2290      	movs	r2, #144	@ 0x90
 800244e:	2100      	movs	r1, #0
 8002450:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002452:	e1b9      	b.n	80027c8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002454:	46c0      	nop			@ (mov r8, r8)
    return;
 8002456:	e1b7      	b.n	80027c8 <HAL_UART_IRQHandler+0x62c>
 8002458:	0000080f 	.word	0x0000080f
 800245c:	10000001 	.word	0x10000001
 8002460:	04000120 	.word	0x04000120
 8002464:	080031a5 	.word	0x080031a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800246c:	2b01      	cmp	r3, #1
 800246e:	d000      	beq.n	8002472 <HAL_UART_IRQHandler+0x2d6>
 8002470:	e13e      	b.n	80026f0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002472:	23a4      	movs	r3, #164	@ 0xa4
 8002474:	18fb      	adds	r3, r7, r3
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2210      	movs	r2, #16
 800247a:	4013      	ands	r3, r2
 800247c:	d100      	bne.n	8002480 <HAL_UART_IRQHandler+0x2e4>
 800247e:	e137      	b.n	80026f0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002480:	23a0      	movs	r3, #160	@ 0xa0
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2210      	movs	r2, #16
 8002488:	4013      	ands	r3, r2
 800248a:	d100      	bne.n	800248e <HAL_UART_IRQHandler+0x2f2>
 800248c:	e130      	b.n	80026f0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2210      	movs	r2, #16
 8002494:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2240      	movs	r2, #64	@ 0x40
 800249e:	4013      	ands	r3, r2
 80024a0:	2b40      	cmp	r3, #64	@ 0x40
 80024a2:	d000      	beq.n	80024a6 <HAL_UART_IRQHandler+0x30a>
 80024a4:	e0a4      	b.n	80025f0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2280      	movs	r2, #128	@ 0x80
 80024aa:	589b      	ldr	r3, [r3, r2]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	217e      	movs	r1, #126	@ 0x7e
 80024b2:	187b      	adds	r3, r7, r1
 80024b4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d100      	bne.n	80024c0 <HAL_UART_IRQHandler+0x324>
 80024be:	e185      	b.n	80027cc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	225c      	movs	r2, #92	@ 0x5c
 80024c4:	5a9b      	ldrh	r3, [r3, r2]
 80024c6:	187a      	adds	r2, r7, r1
 80024c8:	8812      	ldrh	r2, [r2, #0]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d300      	bcc.n	80024d0 <HAL_UART_IRQHandler+0x334>
 80024ce:	e17d      	b.n	80027cc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	187a      	adds	r2, r7, r1
 80024d4:	215e      	movs	r1, #94	@ 0x5e
 80024d6:	8812      	ldrh	r2, [r2, #0]
 80024d8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2280      	movs	r2, #128	@ 0x80
 80024de:	589b      	ldr	r3, [r3, r2]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2220      	movs	r2, #32
 80024e6:	4013      	ands	r3, r2
 80024e8:	d170      	bne.n	80025cc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ea:	f3ef 8310 	mrs	r3, PRIMASK
 80024ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80024f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024f4:	2301      	movs	r3, #1
 80024f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024fa:	f383 8810 	msr	PRIMASK, r3
}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	49b4      	ldr	r1, [pc, #720]	@ (80027dc <HAL_UART_IRQHandler+0x640>)
 800250c:	400a      	ands	r2, r1
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002512:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002516:	f383 8810 	msr	PRIMASK, r3
}
 800251a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800251c:	f3ef 8310 	mrs	r3, PRIMASK
 8002520:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002524:	677b      	str	r3, [r7, #116]	@ 0x74
 8002526:	2301      	movs	r3, #1
 8002528:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800252a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800252c:	f383 8810 	msr	PRIMASK, r3
}
 8002530:	46c0      	nop			@ (mov r8, r8)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2101      	movs	r1, #1
 800253e:	438a      	bics	r2, r1
 8002540:	609a      	str	r2, [r3, #8]
 8002542:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002544:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002548:	f383 8810 	msr	PRIMASK, r3
}
 800254c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254e:	f3ef 8310 	mrs	r3, PRIMASK
 8002552:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002554:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002556:	673b      	str	r3, [r7, #112]	@ 0x70
 8002558:	2301      	movs	r3, #1
 800255a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800255c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800255e:	f383 8810 	msr	PRIMASK, r3
}
 8002562:	46c0      	nop			@ (mov r8, r8)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2140      	movs	r1, #64	@ 0x40
 8002570:	438a      	bics	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002576:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002578:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800257a:	f383 8810 	msr	PRIMASK, r3
}
 800257e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	228c      	movs	r2, #140	@ 0x8c
 8002584:	2120      	movs	r1, #32
 8002586:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800258e:	f3ef 8310 	mrs	r3, PRIMASK
 8002592:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002596:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002598:	2301      	movs	r3, #1
 800259a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800259c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800259e:	f383 8810 	msr	PRIMASK, r3
}
 80025a2:	46c0      	nop			@ (mov r8, r8)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2110      	movs	r1, #16
 80025b0:	438a      	bics	r2, r1
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80025ba:	f383 8810 	msr	PRIMASK, r3
}
 80025be:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2280      	movs	r2, #128	@ 0x80
 80025c4:	589b      	ldr	r3, [r3, r2]
 80025c6:	0018      	movs	r0, r3
 80025c8:	f7fe fc3a 	bl	8000e40 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	225c      	movs	r2, #92	@ 0x5c
 80025d6:	5a9a      	ldrh	r2, [r3, r2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	215e      	movs	r1, #94	@ 0x5e
 80025dc:	5a5b      	ldrh	r3, [r3, r1]
 80025de:	b29b      	uxth	r3, r3
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	0011      	movs	r1, r2
 80025e8:	0018      	movs	r0, r3
 80025ea:	f000 f90d 	bl	8002808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80025ee:	e0ed      	b.n	80027cc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	225c      	movs	r2, #92	@ 0x5c
 80025f4:	5a99      	ldrh	r1, [r3, r2]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	225e      	movs	r2, #94	@ 0x5e
 80025fa:	5a9b      	ldrh	r3, [r3, r2]
 80025fc:	b29a      	uxth	r2, r3
 80025fe:	208e      	movs	r0, #142	@ 0x8e
 8002600:	183b      	adds	r3, r7, r0
 8002602:	1a8a      	subs	r2, r1, r2
 8002604:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	225e      	movs	r2, #94	@ 0x5e
 800260a:	5a9b      	ldrh	r3, [r3, r2]
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d100      	bne.n	8002614 <HAL_UART_IRQHandler+0x478>
 8002612:	e0dd      	b.n	80027d0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002614:	183b      	adds	r3, r7, r0
 8002616:	881b      	ldrh	r3, [r3, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d100      	bne.n	800261e <HAL_UART_IRQHandler+0x482>
 800261c:	e0d8      	b.n	80027d0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800261e:	f3ef 8310 	mrs	r3, PRIMASK
 8002622:	60fb      	str	r3, [r7, #12]
  return(result);
 8002624:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002626:	2488      	movs	r4, #136	@ 0x88
 8002628:	193a      	adds	r2, r7, r4
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	2301      	movs	r3, #1
 800262e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f383 8810 	msr	PRIMASK, r3
}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4967      	ldr	r1, [pc, #412]	@ (80027e0 <HAL_UART_IRQHandler+0x644>)
 8002644:	400a      	ands	r2, r1
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	193b      	adds	r3, r7, r4
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	f383 8810 	msr	PRIMASK, r3
}
 8002654:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002656:	f3ef 8310 	mrs	r3, PRIMASK
 800265a:	61bb      	str	r3, [r7, #24]
  return(result);
 800265c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800265e:	2484      	movs	r4, #132	@ 0x84
 8002660:	193a      	adds	r2, r7, r4
 8002662:	6013      	str	r3, [r2, #0]
 8002664:	2301      	movs	r3, #1
 8002666:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f383 8810 	msr	PRIMASK, r3
}
 800266e:	46c0      	nop			@ (mov r8, r8)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	495a      	ldr	r1, [pc, #360]	@ (80027e4 <HAL_UART_IRQHandler+0x648>)
 800267c:	400a      	ands	r2, r1
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	193b      	adds	r3, r7, r4
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002686:	6a3b      	ldr	r3, [r7, #32]
 8002688:	f383 8810 	msr	PRIMASK, r3
}
 800268c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	228c      	movs	r2, #140	@ 0x8c
 8002692:	2120      	movs	r1, #32
 8002694:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026a2:	f3ef 8310 	mrs	r3, PRIMASK
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80026a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026aa:	2480      	movs	r4, #128	@ 0x80
 80026ac:	193a      	adds	r2, r7, r4
 80026ae:	6013      	str	r3, [r2, #0]
 80026b0:	2301      	movs	r3, #1
 80026b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b6:	f383 8810 	msr	PRIMASK, r3
}
 80026ba:	46c0      	nop			@ (mov r8, r8)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2110      	movs	r1, #16
 80026c8:	438a      	bics	r2, r1
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	193b      	adds	r3, r7, r4
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d4:	f383 8810 	msr	PRIMASK, r3
}
 80026d8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026e0:	183b      	adds	r3, r7, r0
 80026e2:	881a      	ldrh	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	0011      	movs	r1, r2
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 f88d 	bl	8002808 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80026ee:	e06f      	b.n	80027d0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80026f0:	23a4      	movs	r3, #164	@ 0xa4
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	035b      	lsls	r3, r3, #13
 80026fa:	4013      	ands	r3, r2
 80026fc:	d010      	beq.n	8002720 <HAL_UART_IRQHandler+0x584>
 80026fe:	239c      	movs	r3, #156	@ 0x9c
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	2380      	movs	r3, #128	@ 0x80
 8002706:	03db      	lsls	r3, r3, #15
 8002708:	4013      	ands	r3, r2
 800270a:	d009      	beq.n	8002720 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2280      	movs	r2, #128	@ 0x80
 8002712:	0352      	lsls	r2, r2, #13
 8002714:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	0018      	movs	r0, r3
 800271a:	f001 fa7b 	bl	8003c14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800271e:	e05a      	b.n	80027d6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002720:	23a4      	movs	r3, #164	@ 0xa4
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2280      	movs	r2, #128	@ 0x80
 8002728:	4013      	ands	r3, r2
 800272a:	d016      	beq.n	800275a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800272c:	23a0      	movs	r3, #160	@ 0xa0
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2280      	movs	r2, #128	@ 0x80
 8002734:	4013      	ands	r3, r2
 8002736:	d106      	bne.n	8002746 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002738:	239c      	movs	r3, #156	@ 0x9c
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	041b      	lsls	r3, r3, #16
 8002742:	4013      	ands	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800274a:	2b00      	cmp	r3, #0
 800274c:	d042      	beq.n	80027d4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	0010      	movs	r0, r2
 8002756:	4798      	blx	r3
    }
    return;
 8002758:	e03c      	b.n	80027d4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800275a:	23a4      	movs	r3, #164	@ 0xa4
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2240      	movs	r2, #64	@ 0x40
 8002762:	4013      	ands	r3, r2
 8002764:	d00a      	beq.n	800277c <HAL_UART_IRQHandler+0x5e0>
 8002766:	23a0      	movs	r3, #160	@ 0xa0
 8002768:	18fb      	adds	r3, r7, r3
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2240      	movs	r2, #64	@ 0x40
 800276e:	4013      	ands	r3, r2
 8002770:	d004      	beq.n	800277c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	0018      	movs	r0, r3
 8002776:	f000 fd2c 	bl	80031d2 <UART_EndTransmit_IT>
    return;
 800277a:	e02c      	b.n	80027d6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800277c:	23a4      	movs	r3, #164	@ 0xa4
 800277e:	18fb      	adds	r3, r7, r3
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	2380      	movs	r3, #128	@ 0x80
 8002784:	041b      	lsls	r3, r3, #16
 8002786:	4013      	ands	r3, r2
 8002788:	d00b      	beq.n	80027a2 <HAL_UART_IRQHandler+0x606>
 800278a:	23a0      	movs	r3, #160	@ 0xa0
 800278c:	18fb      	adds	r3, r7, r3
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	2380      	movs	r3, #128	@ 0x80
 8002792:	05db      	lsls	r3, r3, #23
 8002794:	4013      	ands	r3, r2
 8002796:	d004      	beq.n	80027a2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	0018      	movs	r0, r3
 800279c:	f001 fa4a 	bl	8003c34 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80027a0:	e019      	b.n	80027d6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80027a2:	23a4      	movs	r3, #164	@ 0xa4
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	@ 0x80
 80027aa:	045b      	lsls	r3, r3, #17
 80027ac:	4013      	ands	r3, r2
 80027ae:	d012      	beq.n	80027d6 <HAL_UART_IRQHandler+0x63a>
 80027b0:	23a0      	movs	r3, #160	@ 0xa0
 80027b2:	18fb      	adds	r3, r7, r3
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	da0d      	bge.n	80027d6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	0018      	movs	r0, r3
 80027be:	f001 fa31 	bl	8003c24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80027c2:	e008      	b.n	80027d6 <HAL_UART_IRQHandler+0x63a>
      return;
 80027c4:	46c0      	nop			@ (mov r8, r8)
 80027c6:	e006      	b.n	80027d6 <HAL_UART_IRQHandler+0x63a>
    return;
 80027c8:	46c0      	nop			@ (mov r8, r8)
 80027ca:	e004      	b.n	80027d6 <HAL_UART_IRQHandler+0x63a>
      return;
 80027cc:	46c0      	nop			@ (mov r8, r8)
 80027ce:	e002      	b.n	80027d6 <HAL_UART_IRQHandler+0x63a>
      return;
 80027d0:	46c0      	nop			@ (mov r8, r8)
 80027d2:	e000      	b.n	80027d6 <HAL_UART_IRQHandler+0x63a>
    return;
 80027d4:	46c0      	nop			@ (mov r8, r8)
  }
}
 80027d6:	46bd      	mov	sp, r7
 80027d8:	b02a      	add	sp, #168	@ 0xa8
 80027da:	bdb0      	pop	{r4, r5, r7, pc}
 80027dc:	fffffeff 	.word	0xfffffeff
 80027e0:	fffffedf 	.word	0xfffffedf
 80027e4:	effffffe 	.word	0xeffffffe

080027e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80027f0:	46c0      	nop			@ (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002800:	46c0      	nop			@ (mov r8, r8)
 8002802:	46bd      	mov	sp, r7
 8002804:	b002      	add	sp, #8
 8002806:	bd80      	pop	{r7, pc}

08002808 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	000a      	movs	r2, r1
 8002812:	1cbb      	adds	r3, r7, #2
 8002814:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002816:	46c0      	nop			@ (mov r8, r8)
 8002818:	46bd      	mov	sp, r7
 800281a:	b002      	add	sp, #8
 800281c:	bd80      	pop	{r7, pc}
	...

08002820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b088      	sub	sp, #32
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002828:	231a      	movs	r3, #26
 800282a:	18fb      	adds	r3, r7, r3
 800282c:	2200      	movs	r2, #0
 800282e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689a      	ldr	r2, [r3, #8]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	431a      	orrs	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4313      	orrs	r3, r2
 8002846:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4aa1      	ldr	r2, [pc, #644]	@ (8002ad4 <UART_SetConfig+0x2b4>)
 8002850:	4013      	ands	r3, r2
 8002852:	0019      	movs	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	430a      	orrs	r2, r1
 800285c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	4a9c      	ldr	r2, [pc, #624]	@ (8002ad8 <UART_SetConfig+0x2b8>)
 8002866:	4013      	ands	r3, r2
 8002868:	0019      	movs	r1, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	430a      	orrs	r2, r1
 8002874:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	4313      	orrs	r3, r2
 8002884:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a93      	ldr	r2, [pc, #588]	@ (8002adc <UART_SetConfig+0x2bc>)
 800288e:	4013      	ands	r3, r2
 8002890:	0019      	movs	r1, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	69fa      	ldr	r2, [r7, #28]
 8002898:	430a      	orrs	r2, r1
 800289a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a2:	220f      	movs	r2, #15
 80028a4:	4393      	bics	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a89      	ldr	r2, [pc, #548]	@ (8002ae0 <UART_SetConfig+0x2c0>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d127      	bne.n	800290e <UART_SetConfig+0xee>
 80028be:	4b89      	ldr	r3, [pc, #548]	@ (8002ae4 <UART_SetConfig+0x2c4>)
 80028c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028c2:	2203      	movs	r2, #3
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d017      	beq.n	80028fa <UART_SetConfig+0xda>
 80028ca:	d81b      	bhi.n	8002904 <UART_SetConfig+0xe4>
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d00a      	beq.n	80028e6 <UART_SetConfig+0xc6>
 80028d0:	d818      	bhi.n	8002904 <UART_SetConfig+0xe4>
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d002      	beq.n	80028dc <UART_SetConfig+0xbc>
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d00a      	beq.n	80028f0 <UART_SetConfig+0xd0>
 80028da:	e013      	b.n	8002904 <UART_SetConfig+0xe4>
 80028dc:	231b      	movs	r3, #27
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	2200      	movs	r2, #0
 80028e2:	701a      	strb	r2, [r3, #0]
 80028e4:	e021      	b.n	800292a <UART_SetConfig+0x10a>
 80028e6:	231b      	movs	r3, #27
 80028e8:	18fb      	adds	r3, r7, r3
 80028ea:	2202      	movs	r2, #2
 80028ec:	701a      	strb	r2, [r3, #0]
 80028ee:	e01c      	b.n	800292a <UART_SetConfig+0x10a>
 80028f0:	231b      	movs	r3, #27
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	2204      	movs	r2, #4
 80028f6:	701a      	strb	r2, [r3, #0]
 80028f8:	e017      	b.n	800292a <UART_SetConfig+0x10a>
 80028fa:	231b      	movs	r3, #27
 80028fc:	18fb      	adds	r3, r7, r3
 80028fe:	2208      	movs	r2, #8
 8002900:	701a      	strb	r2, [r3, #0]
 8002902:	e012      	b.n	800292a <UART_SetConfig+0x10a>
 8002904:	231b      	movs	r3, #27
 8002906:	18fb      	adds	r3, r7, r3
 8002908:	2210      	movs	r2, #16
 800290a:	701a      	strb	r2, [r3, #0]
 800290c:	e00d      	b.n	800292a <UART_SetConfig+0x10a>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a75      	ldr	r2, [pc, #468]	@ (8002ae8 <UART_SetConfig+0x2c8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d104      	bne.n	8002922 <UART_SetConfig+0x102>
 8002918:	231b      	movs	r3, #27
 800291a:	18fb      	adds	r3, r7, r3
 800291c:	2200      	movs	r2, #0
 800291e:	701a      	strb	r2, [r3, #0]
 8002920:	e003      	b.n	800292a <UART_SetConfig+0x10a>
 8002922:	231b      	movs	r3, #27
 8002924:	18fb      	adds	r3, r7, r3
 8002926:	2210      	movs	r2, #16
 8002928:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	2380      	movs	r3, #128	@ 0x80
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	429a      	cmp	r2, r3
 8002934:	d000      	beq.n	8002938 <UART_SetConfig+0x118>
 8002936:	e065      	b.n	8002a04 <UART_SetConfig+0x1e4>
  {
    switch (clocksource)
 8002938:	231b      	movs	r3, #27
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b08      	cmp	r3, #8
 8002940:	d015      	beq.n	800296e <UART_SetConfig+0x14e>
 8002942:	dc18      	bgt.n	8002976 <UART_SetConfig+0x156>
 8002944:	2b04      	cmp	r3, #4
 8002946:	d00d      	beq.n	8002964 <UART_SetConfig+0x144>
 8002948:	dc15      	bgt.n	8002976 <UART_SetConfig+0x156>
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <UART_SetConfig+0x134>
 800294e:	2b02      	cmp	r3, #2
 8002950:	d005      	beq.n	800295e <UART_SetConfig+0x13e>
 8002952:	e010      	b.n	8002976 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002954:	f7ff f994 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8002958:	0003      	movs	r3, r0
 800295a:	617b      	str	r3, [r7, #20]
        break;
 800295c:	e012      	b.n	8002984 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800295e:	4b63      	ldr	r3, [pc, #396]	@ (8002aec <UART_SetConfig+0x2cc>)
 8002960:	617b      	str	r3, [r7, #20]
        break;
 8002962:	e00f      	b.n	8002984 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002964:	f7ff f900 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8002968:	0003      	movs	r3, r0
 800296a:	617b      	str	r3, [r7, #20]
        break;
 800296c:	e00a      	b.n	8002984 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800296e:	2380      	movs	r3, #128	@ 0x80
 8002970:	021b      	lsls	r3, r3, #8
 8002972:	617b      	str	r3, [r7, #20]
        break;
 8002974:	e006      	b.n	8002984 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800297a:	231a      	movs	r3, #26
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
        break;
 8002982:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d100      	bne.n	800298c <UART_SetConfig+0x16c>
 800298a:	e08d      	b.n	8002aa8 <UART_SetConfig+0x288>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002990:	4b57      	ldr	r3, [pc, #348]	@ (8002af0 <UART_SetConfig+0x2d0>)
 8002992:	0052      	lsls	r2, r2, #1
 8002994:	5ad3      	ldrh	r3, [r2, r3]
 8002996:	0019      	movs	r1, r3
 8002998:	6978      	ldr	r0, [r7, #20]
 800299a:	f7fd fbb9 	bl	8000110 <__udivsi3>
 800299e:	0003      	movs	r3, r0
 80029a0:	005a      	lsls	r2, r3, #1
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	085b      	lsrs	r3, r3, #1
 80029a8:	18d2      	adds	r2, r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	0019      	movs	r1, r3
 80029b0:	0010      	movs	r0, r2
 80029b2:	f7fd fbad 	bl	8000110 <__udivsi3>
 80029b6:	0003      	movs	r3, r0
 80029b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b0f      	cmp	r3, #15
 80029be:	d91c      	bls.n	80029fa <UART_SetConfig+0x1da>
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	2380      	movs	r3, #128	@ 0x80
 80029c4:	025b      	lsls	r3, r3, #9
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d217      	bcs.n	80029fa <UART_SetConfig+0x1da>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	200e      	movs	r0, #14
 80029d0:	183b      	adds	r3, r7, r0
 80029d2:	210f      	movs	r1, #15
 80029d4:	438a      	bics	r2, r1
 80029d6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	085b      	lsrs	r3, r3, #1
 80029dc:	b29b      	uxth	r3, r3
 80029de:	2207      	movs	r2, #7
 80029e0:	4013      	ands	r3, r2
 80029e2:	b299      	uxth	r1, r3
 80029e4:	183b      	adds	r3, r7, r0
 80029e6:	183a      	adds	r2, r7, r0
 80029e8:	8812      	ldrh	r2, [r2, #0]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	183a      	adds	r2, r7, r0
 80029f4:	8812      	ldrh	r2, [r2, #0]
 80029f6:	60da      	str	r2, [r3, #12]
 80029f8:	e056      	b.n	8002aa8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 80029fa:	231a      	movs	r3, #26
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e051      	b.n	8002aa8 <UART_SetConfig+0x288>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a04:	231b      	movs	r3, #27
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d015      	beq.n	8002a3a <UART_SetConfig+0x21a>
 8002a0e:	dc18      	bgt.n	8002a42 <UART_SetConfig+0x222>
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d00d      	beq.n	8002a30 <UART_SetConfig+0x210>
 8002a14:	dc15      	bgt.n	8002a42 <UART_SetConfig+0x222>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d002      	beq.n	8002a20 <UART_SetConfig+0x200>
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d005      	beq.n	8002a2a <UART_SetConfig+0x20a>
 8002a1e:	e010      	b.n	8002a42 <UART_SetConfig+0x222>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a20:	f7ff f92e 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8002a24:	0003      	movs	r3, r0
 8002a26:	617b      	str	r3, [r7, #20]
        break;
 8002a28:	e012      	b.n	8002a50 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a2a:	4b30      	ldr	r3, [pc, #192]	@ (8002aec <UART_SetConfig+0x2cc>)
 8002a2c:	617b      	str	r3, [r7, #20]
        break;
 8002a2e:	e00f      	b.n	8002a50 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a30:	f7ff f89a 	bl	8001b68 <HAL_RCC_GetSysClockFreq>
 8002a34:	0003      	movs	r3, r0
 8002a36:	617b      	str	r3, [r7, #20]
        break;
 8002a38:	e00a      	b.n	8002a50 <UART_SetConfig+0x230>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	021b      	lsls	r3, r3, #8
 8002a3e:	617b      	str	r3, [r7, #20]
        break;
 8002a40:	e006      	b.n	8002a50 <UART_SetConfig+0x230>
      default:
        pclk = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002a46:	231a      	movs	r3, #26
 8002a48:	18fb      	adds	r3, r7, r3
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	701a      	strb	r2, [r3, #0]
        break;
 8002a4e:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d028      	beq.n	8002aa8 <UART_SetConfig+0x288>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a5a:	4b25      	ldr	r3, [pc, #148]	@ (8002af0 <UART_SetConfig+0x2d0>)
 8002a5c:	0052      	lsls	r2, r2, #1
 8002a5e:	5ad3      	ldrh	r3, [r2, r3]
 8002a60:	0019      	movs	r1, r3
 8002a62:	6978      	ldr	r0, [r7, #20]
 8002a64:	f7fd fb54 	bl	8000110 <__udivsi3>
 8002a68:	0003      	movs	r3, r0
 8002a6a:	001a      	movs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	085b      	lsrs	r3, r3, #1
 8002a72:	18d2      	adds	r2, r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	0019      	movs	r1, r3
 8002a7a:	0010      	movs	r0, r2
 8002a7c:	f7fd fb48 	bl	8000110 <__udivsi3>
 8002a80:	0003      	movs	r3, r0
 8002a82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	d90a      	bls.n	8002aa0 <UART_SetConfig+0x280>
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	2380      	movs	r3, #128	@ 0x80
 8002a8e:	025b      	lsls	r3, r3, #9
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d205      	bcs.n	8002aa0 <UART_SetConfig+0x280>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	e003      	b.n	8002aa8 <UART_SetConfig+0x288>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa0:	231a      	movs	r3, #26
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	226a      	movs	r2, #106	@ 0x6a
 8002aac:	2101      	movs	r1, #1
 8002aae:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2268      	movs	r2, #104	@ 0x68
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002ac4:	231a      	movs	r3, #26
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	781b      	ldrb	r3, [r3, #0]
}
 8002aca:	0018      	movs	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b008      	add	sp, #32
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	46c0      	nop			@ (mov r8, r8)
 8002ad4:	cfff69f3 	.word	0xcfff69f3
 8002ad8:	ffffcfff 	.word	0xffffcfff
 8002adc:	11fff4ff 	.word	0x11fff4ff
 8002ae0:	40013800 	.word	0x40013800
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	40004400 	.word	0x40004400
 8002aec:	00f42400 	.word	0x00f42400
 8002af0:	08004448 	.word	0x08004448

08002af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b00:	2208      	movs	r2, #8
 8002b02:	4013      	ands	r3, r2
 8002b04:	d00b      	beq.n	8002b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	4a4a      	ldr	r2, [pc, #296]	@ (8002c38 <UART_AdvFeatureConfig+0x144>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	0019      	movs	r1, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b22:	2201      	movs	r2, #1
 8002b24:	4013      	ands	r3, r2
 8002b26:	d00b      	beq.n	8002b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4a43      	ldr	r2, [pc, #268]	@ (8002c3c <UART_AdvFeatureConfig+0x148>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	0019      	movs	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b44:	2202      	movs	r2, #2
 8002b46:	4013      	ands	r3, r2
 8002b48:	d00b      	beq.n	8002b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	4a3b      	ldr	r2, [pc, #236]	@ (8002c40 <UART_AdvFeatureConfig+0x14c>)
 8002b52:	4013      	ands	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b66:	2204      	movs	r2, #4
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d00b      	beq.n	8002b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a34      	ldr	r2, [pc, #208]	@ (8002c44 <UART_AdvFeatureConfig+0x150>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	0019      	movs	r1, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	430a      	orrs	r2, r1
 8002b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b88:	2210      	movs	r2, #16
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d00b      	beq.n	8002ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a2c      	ldr	r2, [pc, #176]	@ (8002c48 <UART_AdvFeatureConfig+0x154>)
 8002b96:	4013      	ands	r3, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	2220      	movs	r2, #32
 8002bac:	4013      	ands	r3, r2
 8002bae:	d00b      	beq.n	8002bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	4a25      	ldr	r2, [pc, #148]	@ (8002c4c <UART_AdvFeatureConfig+0x158>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	0019      	movs	r1, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bcc:	2240      	movs	r2, #64	@ 0x40
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c50 <UART_AdvFeatureConfig+0x15c>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	035b      	lsls	r3, r3, #13
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d10b      	bne.n	8002c0e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	4a15      	ldr	r2, [pc, #84]	@ (8002c54 <UART_AdvFeatureConfig+0x160>)
 8002bfe:	4013      	ands	r3, r2
 8002c00:	0019      	movs	r1, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c12:	2280      	movs	r2, #128	@ 0x80
 8002c14:	4013      	ands	r3, r2
 8002c16:	d00b      	beq.n	8002c30 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4a0e      	ldr	r2, [pc, #56]	@ (8002c58 <UART_AdvFeatureConfig+0x164>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	605a      	str	r2, [r3, #4]
  }
}
 8002c30:	46c0      	nop			@ (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b002      	add	sp, #8
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	ffff7fff 	.word	0xffff7fff
 8002c3c:	fffdffff 	.word	0xfffdffff
 8002c40:	fffeffff 	.word	0xfffeffff
 8002c44:	fffbffff 	.word	0xfffbffff
 8002c48:	ffffefff 	.word	0xffffefff
 8002c4c:	ffffdfff 	.word	0xffffdfff
 8002c50:	ffefffff 	.word	0xffefffff
 8002c54:	ff9fffff 	.word	0xff9fffff
 8002c58:	fff7ffff 	.word	0xfff7ffff

08002c5c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b092      	sub	sp, #72	@ 0x48
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2290      	movs	r2, #144	@ 0x90
 8002c68:	2100      	movs	r1, #0
 8002c6a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c6c:	f7fd ffdc 	bl	8000c28 <HAL_GetTick>
 8002c70:	0003      	movs	r3, r0
 8002c72:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2208      	movs	r2, #8
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d12d      	bne.n	8002cde <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c84:	2280      	movs	r2, #128	@ 0x80
 8002c86:	0391      	lsls	r1, r2, #14
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	4a47      	ldr	r2, [pc, #284]	@ (8002da8 <UART_CheckIdleState+0x14c>)
 8002c8c:	9200      	str	r2, [sp, #0]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f000 f88e 	bl	8002db0 <UART_WaitOnFlagUntilTimeout>
 8002c94:	1e03      	subs	r3, r0, #0
 8002c96:	d022      	beq.n	8002cde <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c98:	f3ef 8310 	mrs	r3, PRIMASK
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca8:	f383 8810 	msr	PRIMASK, r3
}
 8002cac:	46c0      	nop			@ (mov r8, r8)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2180      	movs	r1, #128	@ 0x80
 8002cba:	438a      	bics	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc4:	f383 8810 	msr	PRIMASK, r3
}
 8002cc8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2288      	movs	r2, #136	@ 0x88
 8002cce:	2120      	movs	r1, #32
 8002cd0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2284      	movs	r2, #132	@ 0x84
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e060      	b.n	8002da0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	2b04      	cmp	r3, #4
 8002cea:	d146      	bne.n	8002d7a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cee:	2280      	movs	r2, #128	@ 0x80
 8002cf0:	03d1      	lsls	r1, r2, #15
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	4a2c      	ldr	r2, [pc, #176]	@ (8002da8 <UART_CheckIdleState+0x14c>)
 8002cf6:	9200      	str	r2, [sp, #0]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f000 f859 	bl	8002db0 <UART_WaitOnFlagUntilTimeout>
 8002cfe:	1e03      	subs	r3, r0, #0
 8002d00:	d03b      	beq.n	8002d7a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d02:	f3ef 8310 	mrs	r3, PRIMASK
 8002d06:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d08:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f383 8810 	msr	PRIMASK, r3
}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4922      	ldr	r1, [pc, #136]	@ (8002dac <UART_CheckIdleState+0x150>)
 8002d24:	400a      	ands	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f383 8810 	msr	PRIMASK, r3
}
 8002d32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d34:	f3ef 8310 	mrs	r3, PRIMASK
 8002d38:	61bb      	str	r3, [r7, #24]
  return(result);
 8002d3a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d3e:	2301      	movs	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	f383 8810 	msr	PRIMASK, r3
}
 8002d48:	46c0      	nop			@ (mov r8, r8)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2101      	movs	r1, #1
 8002d56:	438a      	bics	r2, r1
 8002d58:	609a      	str	r2, [r3, #8]
 8002d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5e:	6a3b      	ldr	r3, [r7, #32]
 8002d60:	f383 8810 	msr	PRIMASK, r3
}
 8002d64:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	228c      	movs	r2, #140	@ 0x8c
 8002d6a:	2120      	movs	r1, #32
 8002d6c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2284      	movs	r2, #132	@ 0x84
 8002d72:	2100      	movs	r1, #0
 8002d74:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e012      	b.n	8002da0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2288      	movs	r2, #136	@ 0x88
 8002d7e:	2120      	movs	r1, #32
 8002d80:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	228c      	movs	r2, #140	@ 0x8c
 8002d86:	2120      	movs	r1, #32
 8002d88:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2284      	movs	r2, #132	@ 0x84
 8002d9a:	2100      	movs	r1, #0
 8002d9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b010      	add	sp, #64	@ 0x40
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	01ffffff 	.word	0x01ffffff
 8002dac:	fffffedf 	.word	0xfffffedf

08002db0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002dc0:	e051      	b.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	d04e      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc8:	f7fd ff2e 	bl	8000c28 <HAL_GetTick>
 8002dcc:	0002      	movs	r2, r0
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d302      	bcc.n	8002dde <UART_WaitOnFlagUntilTimeout+0x2e>
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e051      	b.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2204      	movs	r2, #4
 8002dea:	4013      	ands	r3, r2
 8002dec:	d03b      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b80      	cmp	r3, #128	@ 0x80
 8002df2:	d038      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	2b40      	cmp	r3, #64	@ 0x40
 8002df8:	d035      	beq.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2208      	movs	r2, #8
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b08      	cmp	r3, #8
 8002e06:	d111      	bne.n	8002e2c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	0018      	movs	r0, r3
 8002e14:	f000 f960 	bl	80030d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2290      	movs	r2, #144	@ 0x90
 8002e1c:	2108      	movs	r1, #8
 8002e1e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2284      	movs	r2, #132	@ 0x84
 8002e24:	2100      	movs	r1, #0
 8002e26:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e02c      	b.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	2380      	movs	r3, #128	@ 0x80
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	401a      	ands	r2, r3
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d112      	bne.n	8002e66 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2280      	movs	r2, #128	@ 0x80
 8002e46:	0112      	lsls	r2, r2, #4
 8002e48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	0018      	movs	r0, r3
 8002e4e:	f000 f943 	bl	80030d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2290      	movs	r2, #144	@ 0x90
 8002e56:	2120      	movs	r1, #32
 8002e58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2284      	movs	r2, #132	@ 0x84
 8002e5e:	2100      	movs	r1, #0
 8002e60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e00f      	b.n	8002e86 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	69db      	ldr	r3, [r3, #28]
 8002e6c:	68ba      	ldr	r2, [r7, #8]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	425a      	negs	r2, r3
 8002e76:	4153      	adcs	r3, r2
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	001a      	movs	r2, r3
 8002e7c:	1dfb      	adds	r3, r7, #7
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d09e      	beq.n	8002dc2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	0018      	movs	r0, r3
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	b004      	add	sp, #16
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b098      	sub	sp, #96	@ 0x60
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	1dbb      	adds	r3, r7, #6
 8002e9c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	68ba      	ldr	r2, [r7, #8]
 8002ea2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1dba      	adds	r2, r7, #6
 8002ea8:	215c      	movs	r1, #92	@ 0x5c
 8002eaa:	8812      	ldrh	r2, [r2, #0]
 8002eac:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	1dba      	adds	r2, r7, #6
 8002eb2:	215e      	movs	r1, #94	@ 0x5e
 8002eb4:	8812      	ldrh	r2, [r2, #0]
 8002eb6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	015b      	lsls	r3, r3, #5
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d10d      	bne.n	8002ee6 <UART_Start_Receive_IT+0x56>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d104      	bne.n	8002edc <UART_Start_Receive_IT+0x4c>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2260      	movs	r2, #96	@ 0x60
 8002ed6:	497b      	ldr	r1, [pc, #492]	@ (80030c4 <UART_Start_Receive_IT+0x234>)
 8002ed8:	5299      	strh	r1, [r3, r2]
 8002eda:	e02e      	b.n	8002f3a <UART_Start_Receive_IT+0xaa>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2260      	movs	r2, #96	@ 0x60
 8002ee0:	21ff      	movs	r1, #255	@ 0xff
 8002ee2:	5299      	strh	r1, [r3, r2]
 8002ee4:	e029      	b.n	8002f3a <UART_Start_Receive_IT+0xaa>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <UART_Start_Receive_IT+0x7a>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d104      	bne.n	8002f00 <UART_Start_Receive_IT+0x70>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2260      	movs	r2, #96	@ 0x60
 8002efa:	21ff      	movs	r1, #255	@ 0xff
 8002efc:	5299      	strh	r1, [r3, r2]
 8002efe:	e01c      	b.n	8002f3a <UART_Start_Receive_IT+0xaa>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2260      	movs	r2, #96	@ 0x60
 8002f04:	217f      	movs	r1, #127	@ 0x7f
 8002f06:	5299      	strh	r1, [r3, r2]
 8002f08:	e017      	b.n	8002f3a <UART_Start_Receive_IT+0xaa>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	689a      	ldr	r2, [r3, #8]
 8002f0e:	2380      	movs	r3, #128	@ 0x80
 8002f10:	055b      	lsls	r3, r3, #21
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d10d      	bne.n	8002f32 <UART_Start_Receive_IT+0xa2>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d104      	bne.n	8002f28 <UART_Start_Receive_IT+0x98>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2260      	movs	r2, #96	@ 0x60
 8002f22:	217f      	movs	r1, #127	@ 0x7f
 8002f24:	5299      	strh	r1, [r3, r2]
 8002f26:	e008      	b.n	8002f3a <UART_Start_Receive_IT+0xaa>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2260      	movs	r2, #96	@ 0x60
 8002f2c:	213f      	movs	r1, #63	@ 0x3f
 8002f2e:	5299      	strh	r1, [r3, r2]
 8002f30:	e003      	b.n	8002f3a <UART_Start_Receive_IT+0xaa>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2260      	movs	r2, #96	@ 0x60
 8002f36:	2100      	movs	r1, #0
 8002f38:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2290      	movs	r2, #144	@ 0x90
 8002f3e:	2100      	movs	r1, #0
 8002f40:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	228c      	movs	r2, #140	@ 0x8c
 8002f46:	2122      	movs	r1, #34	@ 0x22
 8002f48:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f4e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002f50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f52:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f54:	2301      	movs	r3, #1
 8002f56:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5a:	f383 8810 	msr	PRIMASK, r3
}
 8002f5e:	46c0      	nop			@ (mov r8, r8)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	609a      	str	r2, [r3, #8]
 8002f70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f72:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002f76:	f383 8810 	msr	PRIMASK, r3
}
 8002f7a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002f80:	2380      	movs	r3, #128	@ 0x80
 8002f82:	059b      	lsls	r3, r3, #22
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d150      	bne.n	800302a <UART_Start_Receive_IT+0x19a>
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2268      	movs	r2, #104	@ 0x68
 8002f8c:	5a9b      	ldrh	r3, [r3, r2]
 8002f8e:	1dba      	adds	r2, r7, #6
 8002f90:	8812      	ldrh	r2, [r2, #0]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d349      	bcc.n	800302a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	015b      	lsls	r3, r3, #5
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d107      	bne.n	8002fb2 <UART_Start_Receive_IT+0x122>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	4a46      	ldr	r2, [pc, #280]	@ (80030c8 <UART_Start_Receive_IT+0x238>)
 8002fae:	675a      	str	r2, [r3, #116]	@ 0x74
 8002fb0:	e002      	b.n	8002fb8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4a45      	ldr	r2, [pc, #276]	@ (80030cc <UART_Start_Receive_IT+0x23c>)
 8002fb6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d019      	beq.n	8002ff4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8002fc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002fc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fca:	2301      	movs	r3, #1
 8002fcc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fd0:	f383 8810 	msr	PRIMASK, r3
}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2180      	movs	r1, #128	@ 0x80
 8002fe2:	0049      	lsls	r1, r1, #1
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fee:	f383 8810 	msr	PRIMASK, r3
}
 8002ff2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002ffc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ffe:	2301      	movs	r3, #1
 8003000:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003004:	f383 8810 	msr	PRIMASK, r3
}
 8003008:	46c0      	nop			@ (mov r8, r8)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2180      	movs	r1, #128	@ 0x80
 8003016:	0549      	lsls	r1, r1, #21
 8003018:	430a      	orrs	r2, r1
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003022:	f383 8810 	msr	PRIMASK, r3
}
 8003026:	46c0      	nop			@ (mov r8, r8)
 8003028:	e047      	b.n	80030ba <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	2380      	movs	r3, #128	@ 0x80
 8003030:	015b      	lsls	r3, r3, #5
 8003032:	429a      	cmp	r2, r3
 8003034:	d107      	bne.n	8003046 <UART_Start_Receive_IT+0x1b6>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d103      	bne.n	8003046 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	4a23      	ldr	r2, [pc, #140]	@ (80030d0 <UART_Start_Receive_IT+0x240>)
 8003042:	675a      	str	r2, [r3, #116]	@ 0x74
 8003044:	e002      	b.n	800304c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	4a22      	ldr	r2, [pc, #136]	@ (80030d4 <UART_Start_Receive_IT+0x244>)
 800304a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d019      	beq.n	8003088 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003054:	f3ef 8310 	mrs	r3, PRIMASK
 8003058:	61fb      	str	r3, [r7, #28]
  return(result);
 800305a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800305c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800305e:	2301      	movs	r3, #1
 8003060:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003062:	6a3b      	ldr	r3, [r7, #32]
 8003064:	f383 8810 	msr	PRIMASK, r3
}
 8003068:	46c0      	nop			@ (mov r8, r8)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2190      	movs	r1, #144	@ 0x90
 8003076:	0049      	lsls	r1, r1, #1
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800307e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003082:	f383 8810 	msr	PRIMASK, r3
}
 8003086:	e018      	b.n	80030ba <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003088:	f3ef 8310 	mrs	r3, PRIMASK
 800308c:	613b      	str	r3, [r7, #16]
  return(result);
 800308e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003090:	653b      	str	r3, [r7, #80]	@ 0x50
 8003092:	2301      	movs	r3, #1
 8003094:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f383 8810 	msr	PRIMASK, r3
}
 800309c:	46c0      	nop			@ (mov r8, r8)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2120      	movs	r1, #32
 80030aa:	430a      	orrs	r2, r1
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80030b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f383 8810 	msr	PRIMASK, r3
}
 80030b8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	0018      	movs	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	b018      	add	sp, #96	@ 0x60
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	000001ff 	.word	0x000001ff
 80030c8:	080038cd 	.word	0x080038cd
 80030cc:	0800359d 	.word	0x0800359d
 80030d0:	080033e5 	.word	0x080033e5
 80030d4:	0800322d 	.word	0x0800322d

080030d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b08e      	sub	sp, #56	@ 0x38
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e0:	f3ef 8310 	mrs	r3, PRIMASK
 80030e4:	617b      	str	r3, [r7, #20]
  return(result);
 80030e6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ea:	2301      	movs	r3, #1
 80030ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f383 8810 	msr	PRIMASK, r3
}
 80030f4:	46c0      	nop			@ (mov r8, r8)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4926      	ldr	r1, [pc, #152]	@ (800319c <UART_EndRxTransfer+0xc4>)
 8003102:	400a      	ands	r2, r1
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003108:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f383 8810 	msr	PRIMASK, r3
}
 8003110:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003112:	f3ef 8310 	mrs	r3, PRIMASK
 8003116:	623b      	str	r3, [r7, #32]
  return(result);
 8003118:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800311a:	633b      	str	r3, [r7, #48]	@ 0x30
 800311c:	2301      	movs	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003122:	f383 8810 	msr	PRIMASK, r3
}
 8003126:	46c0      	nop			@ (mov r8, r8)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	491b      	ldr	r1, [pc, #108]	@ (80031a0 <UART_EndRxTransfer+0xc8>)
 8003134:	400a      	ands	r2, r1
 8003136:	609a      	str	r2, [r3, #8]
 8003138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800313a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313e:	f383 8810 	msr	PRIMASK, r3
}
 8003142:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d118      	bne.n	800317e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314c:	f3ef 8310 	mrs	r3, PRIMASK
 8003150:	60bb      	str	r3, [r7, #8]
  return(result);
 8003152:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003156:	2301      	movs	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f383 8810 	msr	PRIMASK, r3
}
 8003160:	46c0      	nop			@ (mov r8, r8)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2110      	movs	r1, #16
 800316e:	438a      	bics	r2, r1
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003174:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f383 8810 	msr	PRIMASK, r3
}
 800317c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	228c      	movs	r2, #140	@ 0x8c
 8003182:	2120      	movs	r1, #32
 8003184:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b00e      	add	sp, #56	@ 0x38
 8003198:	bd80      	pop	{r7, pc}
 800319a:	46c0      	nop			@ (mov r8, r8)
 800319c:	fffffedf 	.word	0xfffffedf
 80031a0:	effffffe 	.word	0xeffffffe

080031a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	225e      	movs	r2, #94	@ 0x5e
 80031b6:	2100      	movs	r1, #0
 80031b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2256      	movs	r2, #86	@ 0x56
 80031be:	2100      	movs	r1, #0
 80031c0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	0018      	movs	r0, r3
 80031c6:	f7ff fb17 	bl	80027f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031ca:	46c0      	nop			@ (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b004      	add	sp, #16
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b086      	sub	sp, #24
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031da:	f3ef 8310 	mrs	r3, PRIMASK
 80031de:	60bb      	str	r3, [r7, #8]
  return(result);
 80031e0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031e2:	617b      	str	r3, [r7, #20]
 80031e4:	2301      	movs	r3, #1
 80031e6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f383 8810 	msr	PRIMASK, r3
}
 80031ee:	46c0      	nop			@ (mov r8, r8)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2140      	movs	r1, #64	@ 0x40
 80031fc:	438a      	bics	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	f383 8810 	msr	PRIMASK, r3
}
 800320a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2288      	movs	r2, #136	@ 0x88
 8003210:	2120      	movs	r1, #32
 8003212:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	0018      	movs	r0, r3
 800321e:	f7ff fae3 	bl	80027e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	46bd      	mov	sp, r7
 8003226:	b006      	add	sp, #24
 8003228:	bd80      	pop	{r7, pc}
	...

0800322c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b094      	sub	sp, #80	@ 0x50
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003234:	204e      	movs	r0, #78	@ 0x4e
 8003236:	183b      	adds	r3, r7, r0
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	2160      	movs	r1, #96	@ 0x60
 800323c:	5a52      	ldrh	r2, [r2, r1]
 800323e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	228c      	movs	r2, #140	@ 0x8c
 8003244:	589b      	ldr	r3, [r3, r2]
 8003246:	2b22      	cmp	r3, #34	@ 0x22
 8003248:	d000      	beq.n	800324c <UART_RxISR_8BIT+0x20>
 800324a:	e0ba      	b.n	80033c2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003252:	214c      	movs	r1, #76	@ 0x4c
 8003254:	187b      	adds	r3, r7, r1
 8003256:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003258:	187b      	adds	r3, r7, r1
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	b2da      	uxtb	r2, r3
 800325e:	183b      	adds	r3, r7, r0
 8003260:	881b      	ldrh	r3, [r3, #0]
 8003262:	b2d9      	uxtb	r1, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003268:	400a      	ands	r2, r1
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003272:	1c5a      	adds	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	225e      	movs	r2, #94	@ 0x5e
 800327c:	5a9b      	ldrh	r3, [r3, r2]
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b299      	uxth	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	225e      	movs	r2, #94	@ 0x5e
 8003288:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	225e      	movs	r2, #94	@ 0x5e
 800328e:	5a9b      	ldrh	r3, [r3, r2]
 8003290:	b29b      	uxth	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d000      	beq.n	8003298 <UART_RxISR_8BIT+0x6c>
 8003296:	e09c      	b.n	80033d2 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003298:	f3ef 8310 	mrs	r3, PRIMASK
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800329e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032a2:	2301      	movs	r3, #1
 80032a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a8:	f383 8810 	msr	PRIMASK, r3
}
 80032ac:	46c0      	nop			@ (mov r8, r8)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4948      	ldr	r1, [pc, #288]	@ (80033dc <UART_RxISR_8BIT+0x1b0>)
 80032ba:	400a      	ands	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]
 80032be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c4:	f383 8810 	msr	PRIMASK, r3
}
 80032c8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032ca:	f3ef 8310 	mrs	r3, PRIMASK
 80032ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80032d4:	2301      	movs	r3, #1
 80032d6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689a      	ldr	r2, [r3, #8]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2101      	movs	r1, #1
 80032ec:	438a      	bics	r2, r1
 80032ee:	609a      	str	r2, [r3, #8]
 80032f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f6:	f383 8810 	msr	PRIMASK, r3
}
 80032fa:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	228c      	movs	r2, #140	@ 0x8c
 8003300:	2120      	movs	r1, #32
 8003302:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	2380      	movs	r3, #128	@ 0x80
 8003318:	041b      	lsls	r3, r3, #16
 800331a:	4013      	ands	r3, r2
 800331c:	d018      	beq.n	8003350 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800331e:	f3ef 8310 	mrs	r3, PRIMASK
 8003322:	61bb      	str	r3, [r7, #24]
  return(result);
 8003324:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003326:	643b      	str	r3, [r7, #64]	@ 0x40
 8003328:	2301      	movs	r3, #1
 800332a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f383 8810 	msr	PRIMASK, r3
}
 8003332:	46c0      	nop			@ (mov r8, r8)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4928      	ldr	r1, [pc, #160]	@ (80033e0 <UART_RxISR_8BIT+0x1b4>)
 8003340:	400a      	ands	r2, r1
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003346:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003348:	6a3b      	ldr	r3, [r7, #32]
 800334a:	f383 8810 	msr	PRIMASK, r3
}
 800334e:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003354:	2b01      	cmp	r3, #1
 8003356:	d12f      	bne.n	80033b8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800335e:	f3ef 8310 	mrs	r3, PRIMASK
 8003362:	60fb      	str	r3, [r7, #12]
  return(result);
 8003364:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003366:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003368:	2301      	movs	r3, #1
 800336a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f383 8810 	msr	PRIMASK, r3
}
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2110      	movs	r1, #16
 8003380:	438a      	bics	r2, r1
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003386:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f383 8810 	msr	PRIMASK, r3
}
 800338e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69db      	ldr	r3, [r3, #28]
 8003396:	2210      	movs	r2, #16
 8003398:	4013      	ands	r3, r2
 800339a:	2b10      	cmp	r3, #16
 800339c:	d103      	bne.n	80033a6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2210      	movs	r2, #16
 80033a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	225c      	movs	r2, #92	@ 0x5c
 80033aa:	5a9a      	ldrh	r2, [r3, r2]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0011      	movs	r1, r2
 80033b0:	0018      	movs	r0, r3
 80033b2:	f7ff fa29 	bl	8002808 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80033b6:	e00c      	b.n	80033d2 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	0018      	movs	r0, r3
 80033bc:	f7fd f888 	bl	80004d0 <HAL_UART_RxCpltCallback>
}
 80033c0:	e007      	b.n	80033d2 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699a      	ldr	r2, [r3, #24]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2108      	movs	r1, #8
 80033ce:	430a      	orrs	r2, r1
 80033d0:	619a      	str	r2, [r3, #24]
}
 80033d2:	46c0      	nop			@ (mov r8, r8)
 80033d4:	46bd      	mov	sp, r7
 80033d6:	b014      	add	sp, #80	@ 0x50
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	46c0      	nop			@ (mov r8, r8)
 80033dc:	fffffedf 	.word	0xfffffedf
 80033e0:	fbffffff 	.word	0xfbffffff

080033e4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b094      	sub	sp, #80	@ 0x50
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80033ec:	204e      	movs	r0, #78	@ 0x4e
 80033ee:	183b      	adds	r3, r7, r0
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	2160      	movs	r1, #96	@ 0x60
 80033f4:	5a52      	ldrh	r2, [r2, r1]
 80033f6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	228c      	movs	r2, #140	@ 0x8c
 80033fc:	589b      	ldr	r3, [r3, r2]
 80033fe:	2b22      	cmp	r3, #34	@ 0x22
 8003400:	d000      	beq.n	8003404 <UART_RxISR_16BIT+0x20>
 8003402:	e0ba      	b.n	800357a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800340a:	214c      	movs	r1, #76	@ 0x4c
 800340c:	187b      	adds	r3, r7, r1
 800340e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003414:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003416:	187b      	adds	r3, r7, r1
 8003418:	183a      	adds	r2, r7, r0
 800341a:	881b      	ldrh	r3, [r3, #0]
 800341c:	8812      	ldrh	r2, [r2, #0]
 800341e:	4013      	ands	r3, r2
 8003420:	b29a      	uxth	r2, r3
 8003422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003424:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	1c9a      	adds	r2, r3, #2
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	225e      	movs	r2, #94	@ 0x5e
 8003434:	5a9b      	ldrh	r3, [r3, r2]
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b299      	uxth	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	225e      	movs	r2, #94	@ 0x5e
 8003440:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	225e      	movs	r2, #94	@ 0x5e
 8003446:	5a9b      	ldrh	r3, [r3, r2]
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d000      	beq.n	8003450 <UART_RxISR_16BIT+0x6c>
 800344e:	e09c      	b.n	800358a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003450:	f3ef 8310 	mrs	r3, PRIMASK
 8003454:	623b      	str	r3, [r7, #32]
  return(result);
 8003456:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003458:	647b      	str	r3, [r7, #68]	@ 0x44
 800345a:	2301      	movs	r3, #1
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	f383 8810 	msr	PRIMASK, r3
}
 8003464:	46c0      	nop			@ (mov r8, r8)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4948      	ldr	r1, [pc, #288]	@ (8003594 <UART_RxISR_16BIT+0x1b0>)
 8003472:	400a      	ands	r2, r1
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003478:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800347c:	f383 8810 	msr	PRIMASK, r3
}
 8003480:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003482:	f3ef 8310 	mrs	r3, PRIMASK
 8003486:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348a:	643b      	str	r3, [r7, #64]	@ 0x40
 800348c:	2301      	movs	r3, #1
 800348e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003492:	f383 8810 	msr	PRIMASK, r3
}
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689a      	ldr	r2, [r3, #8]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2101      	movs	r1, #1
 80034a4:	438a      	bics	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034aa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ae:	f383 8810 	msr	PRIMASK, r3
}
 80034b2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	228c      	movs	r2, #140	@ 0x8c
 80034b8:	2120      	movs	r1, #32
 80034ba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685a      	ldr	r2, [r3, #4]
 80034ce:	2380      	movs	r3, #128	@ 0x80
 80034d0:	041b      	lsls	r3, r3, #16
 80034d2:	4013      	ands	r3, r2
 80034d4:	d018      	beq.n	8003508 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d6:	f3ef 8310 	mrs	r3, PRIMASK
 80034da:	617b      	str	r3, [r7, #20]
  return(result);
 80034dc:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034e0:	2301      	movs	r3, #1
 80034e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f383 8810 	msr	PRIMASK, r3
}
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4928      	ldr	r1, [pc, #160]	@ (8003598 <UART_RxISR_16BIT+0x1b4>)
 80034f8:	400a      	ands	r2, r1
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f383 8810 	msr	PRIMASK, r3
}
 8003506:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d12f      	bne.n	8003570 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003516:	f3ef 8310 	mrs	r3, PRIMASK
 800351a:	60bb      	str	r3, [r7, #8]
  return(result);
 800351c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800351e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003520:	2301      	movs	r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f383 8810 	msr	PRIMASK, r3
}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2110      	movs	r1, #16
 8003538:	438a      	bics	r2, r1
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f383 8810 	msr	PRIMASK, r3
}
 8003546:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	2210      	movs	r2, #16
 8003550:	4013      	ands	r3, r2
 8003552:	2b10      	cmp	r3, #16
 8003554:	d103      	bne.n	800355e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2210      	movs	r2, #16
 800355c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	225c      	movs	r2, #92	@ 0x5c
 8003562:	5a9a      	ldrh	r2, [r3, r2]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	0011      	movs	r1, r2
 8003568:	0018      	movs	r0, r3
 800356a:	f7ff f94d 	bl	8002808 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800356e:	e00c      	b.n	800358a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	0018      	movs	r0, r3
 8003574:	f7fc ffac 	bl	80004d0 <HAL_UART_RxCpltCallback>
}
 8003578:	e007      	b.n	800358a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	699a      	ldr	r2, [r3, #24]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2108      	movs	r1, #8
 8003586:	430a      	orrs	r2, r1
 8003588:	619a      	str	r2, [r3, #24]
}
 800358a:	46c0      	nop			@ (mov r8, r8)
 800358c:	46bd      	mov	sp, r7
 800358e:	b014      	add	sp, #80	@ 0x50
 8003590:	bd80      	pop	{r7, pc}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	fffffedf 	.word	0xfffffedf
 8003598:	fbffffff 	.word	0xfbffffff

0800359c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b0a0      	sub	sp, #128	@ 0x80
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80035a4:	237a      	movs	r3, #122	@ 0x7a
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	2160      	movs	r1, #96	@ 0x60
 80035ac:	5a52      	ldrh	r2, [r2, r1]
 80035ae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	228c      	movs	r2, #140	@ 0x8c
 80035cc:	589b      	ldr	r3, [r3, r2]
 80035ce:	2b22      	cmp	r3, #34	@ 0x22
 80035d0:	d000      	beq.n	80035d4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80035d2:	e165      	b.n	80038a0 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80035d4:	236e      	movs	r3, #110	@ 0x6e
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	687a      	ldr	r2, [r7, #4]
 80035da:	2168      	movs	r1, #104	@ 0x68
 80035dc:	5a52      	ldrh	r2, [r2, r1]
 80035de:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80035e0:	e10c      	b.n	80037fc <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035e8:	216c      	movs	r1, #108	@ 0x6c
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	b2da      	uxtb	r2, r3
 80035f4:	237a      	movs	r3, #122	@ 0x7a
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	b2d9      	uxtb	r1, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003600:	400a      	ands	r2, r1
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	225e      	movs	r2, #94	@ 0x5e
 8003614:	5a9b      	ldrh	r3, [r3, r2]
 8003616:	b29b      	uxth	r3, r3
 8003618:	3b01      	subs	r3, #1
 800361a:	b299      	uxth	r1, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	225e      	movs	r2, #94	@ 0x5e
 8003620:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800362a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800362c:	2207      	movs	r2, #7
 800362e:	4013      	ands	r3, r2
 8003630:	d049      	beq.n	80036c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003632:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003634:	2201      	movs	r2, #1
 8003636:	4013      	ands	r3, r2
 8003638:	d010      	beq.n	800365c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800363a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800363c:	2380      	movs	r3, #128	@ 0x80
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4013      	ands	r3, r2
 8003642:	d00b      	beq.n	800365c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2201      	movs	r2, #1
 800364a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2290      	movs	r2, #144	@ 0x90
 8003650:	589b      	ldr	r3, [r3, r2]
 8003652:	2201      	movs	r2, #1
 8003654:	431a      	orrs	r2, r3
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2190      	movs	r1, #144	@ 0x90
 800365a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800365c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800365e:	2202      	movs	r2, #2
 8003660:	4013      	ands	r3, r2
 8003662:	d00f      	beq.n	8003684 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003664:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003666:	2201      	movs	r2, #1
 8003668:	4013      	ands	r3, r2
 800366a:	d00b      	beq.n	8003684 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2202      	movs	r2, #2
 8003672:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2290      	movs	r2, #144	@ 0x90
 8003678:	589b      	ldr	r3, [r3, r2]
 800367a:	2204      	movs	r2, #4
 800367c:	431a      	orrs	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2190      	movs	r1, #144	@ 0x90
 8003682:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003686:	2204      	movs	r2, #4
 8003688:	4013      	ands	r3, r2
 800368a:	d00f      	beq.n	80036ac <UART_RxISR_8BIT_FIFOEN+0x110>
 800368c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800368e:	2201      	movs	r2, #1
 8003690:	4013      	ands	r3, r2
 8003692:	d00b      	beq.n	80036ac <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2204      	movs	r2, #4
 800369a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2290      	movs	r2, #144	@ 0x90
 80036a0:	589b      	ldr	r3, [r3, r2]
 80036a2:	2202      	movs	r2, #2
 80036a4:	431a      	orrs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2190      	movs	r1, #144	@ 0x90
 80036aa:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2290      	movs	r2, #144	@ 0x90
 80036b0:	589b      	ldr	r3, [r3, r2]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	0018      	movs	r0, r3
 80036ba:	f7ff f89d 	bl	80027f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2290      	movs	r2, #144	@ 0x90
 80036c2:	2100      	movs	r1, #0
 80036c4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	225e      	movs	r2, #94	@ 0x5e
 80036ca:	5a9b      	ldrh	r3, [r3, r2]
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d000      	beq.n	80036d4 <UART_RxISR_8BIT_FIFOEN+0x138>
 80036d2:	e093      	b.n	80037fc <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d4:	f3ef 8310 	mrs	r3, PRIMASK
 80036d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80036da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036de:	2301      	movs	r3, #1
 80036e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e4:	f383 8810 	msr	PRIMASK, r3
}
 80036e8:	46c0      	nop			@ (mov r8, r8)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4970      	ldr	r1, [pc, #448]	@ (80038b8 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 80036f6:	400a      	ands	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80036fc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003700:	f383 8810 	msr	PRIMASK, r3
}
 8003704:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003706:	f3ef 8310 	mrs	r3, PRIMASK
 800370a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800370c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800370e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003710:	2301      	movs	r3, #1
 8003712:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003714:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003716:	f383 8810 	msr	PRIMASK, r3
}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4965      	ldr	r1, [pc, #404]	@ (80038bc <UART_RxISR_8BIT_FIFOEN+0x320>)
 8003728:	400a      	ands	r2, r1
 800372a:	609a      	str	r2, [r3, #8]
 800372c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800372e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003730:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003732:	f383 8810 	msr	PRIMASK, r3
}
 8003736:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	228c      	movs	r2, #140	@ 0x8c
 800373c:	2120      	movs	r1, #32
 800373e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	2380      	movs	r3, #128	@ 0x80
 8003754:	041b      	lsls	r3, r3, #16
 8003756:	4013      	ands	r3, r2
 8003758:	d018      	beq.n	800378c <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375a:	f3ef 8310 	mrs	r3, PRIMASK
 800375e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003762:	663b      	str	r3, [r7, #96]	@ 0x60
 8003764:	2301      	movs	r3, #1
 8003766:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800376a:	f383 8810 	msr	PRIMASK, r3
}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4951      	ldr	r1, [pc, #324]	@ (80038c0 <UART_RxISR_8BIT_FIFOEN+0x324>)
 800377c:	400a      	ands	r2, r1
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003782:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003786:	f383 8810 	msr	PRIMASK, r3
}
 800378a:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003790:	2b01      	cmp	r3, #1
 8003792:	d12f      	bne.n	80037f4 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379a:	f3ef 8310 	mrs	r3, PRIMASK
 800379e:	623b      	str	r3, [r7, #32]
  return(result);
 80037a0:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037a4:	2301      	movs	r3, #1
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	f383 8810 	msr	PRIMASK, r3
}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2110      	movs	r1, #16
 80037bc:	438a      	bics	r2, r1
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c6:	f383 8810 	msr	PRIMASK, r3
}
 80037ca:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	2210      	movs	r2, #16
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b10      	cmp	r3, #16
 80037d8:	d103      	bne.n	80037e2 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2210      	movs	r2, #16
 80037e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	225c      	movs	r2, #92	@ 0x5c
 80037e6:	5a9a      	ldrh	r2, [r3, r2]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0011      	movs	r1, r2
 80037ec:	0018      	movs	r0, r3
 80037ee:	f7ff f80b 	bl	8002808 <HAL_UARTEx_RxEventCallback>
 80037f2:	e003      	b.n	80037fc <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7fc fe6a 	bl	80004d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80037fc:	236e      	movs	r3, #110	@ 0x6e
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	881b      	ldrh	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d004      	beq.n	8003810 <UART_RxISR_8BIT_FIFOEN+0x274>
 8003806:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003808:	2220      	movs	r2, #32
 800380a:	4013      	ands	r3, r2
 800380c:	d000      	beq.n	8003810 <UART_RxISR_8BIT_FIFOEN+0x274>
 800380e:	e6e8      	b.n	80035e2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003810:	205a      	movs	r0, #90	@ 0x5a
 8003812:	183b      	adds	r3, r7, r0
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	215e      	movs	r1, #94	@ 0x5e
 8003818:	5a52      	ldrh	r2, [r2, r1]
 800381a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800381c:	0001      	movs	r1, r0
 800381e:	187b      	adds	r3, r7, r1
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d044      	beq.n	80038b0 <UART_RxISR_8BIT_FIFOEN+0x314>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2268      	movs	r2, #104	@ 0x68
 800382a:	5a9b      	ldrh	r3, [r3, r2]
 800382c:	187a      	adds	r2, r7, r1
 800382e:	8812      	ldrh	r2, [r2, #0]
 8003830:	429a      	cmp	r2, r3
 8003832:	d23d      	bcs.n	80038b0 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003834:	f3ef 8310 	mrs	r3, PRIMASK
 8003838:	60bb      	str	r3, [r7, #8]
  return(result);
 800383a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800383c:	657b      	str	r3, [r7, #84]	@ 0x54
 800383e:	2301      	movs	r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f383 8810 	msr	PRIMASK, r3
}
 8003848:	46c0      	nop			@ (mov r8, r8)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	491b      	ldr	r1, [pc, #108]	@ (80038c4 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8003856:	400a      	ands	r2, r1
 8003858:	609a      	str	r2, [r3, #8]
 800385a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800385c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f383 8810 	msr	PRIMASK, r3
}
 8003864:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a17      	ldr	r2, [pc, #92]	@ (80038c8 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800386a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386c:	f3ef 8310 	mrs	r3, PRIMASK
 8003870:	617b      	str	r3, [r7, #20]
  return(result);
 8003872:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003874:	653b      	str	r3, [r7, #80]	@ 0x50
 8003876:	2301      	movs	r3, #1
 8003878:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	f383 8810 	msr	PRIMASK, r3
}
 8003880:	46c0      	nop			@ (mov r8, r8)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2120      	movs	r1, #32
 800388e:	430a      	orrs	r2, r1
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003894:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	f383 8810 	msr	PRIMASK, r3
}
 800389c:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800389e:	e007      	b.n	80038b0 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2108      	movs	r1, #8
 80038ac:	430a      	orrs	r2, r1
 80038ae:	619a      	str	r2, [r3, #24]
}
 80038b0:	46c0      	nop			@ (mov r8, r8)
 80038b2:	46bd      	mov	sp, r7
 80038b4:	b020      	add	sp, #128	@ 0x80
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	fffffeff 	.word	0xfffffeff
 80038bc:	effffffe 	.word	0xeffffffe
 80038c0:	fbffffff 	.word	0xfbffffff
 80038c4:	efffffff 	.word	0xefffffff
 80038c8:	0800322d 	.word	0x0800322d

080038cc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b0a2      	sub	sp, #136	@ 0x88
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80038d4:	2382      	movs	r3, #130	@ 0x82
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	2160      	movs	r1, #96	@ 0x60
 80038dc:	5a52      	ldrh	r2, [r2, r1]
 80038de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	2284      	movs	r2, #132	@ 0x84
 80038e8:	18ba      	adds	r2, r7, r2
 80038ea:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	228c      	movs	r2, #140	@ 0x8c
 8003900:	589b      	ldr	r3, [r3, r2]
 8003902:	2b22      	cmp	r3, #34	@ 0x22
 8003904:	d000      	beq.n	8003908 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8003906:	e16f      	b.n	8003be8 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003908:	2376      	movs	r3, #118	@ 0x76
 800390a:	18fb      	adds	r3, r7, r3
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	2168      	movs	r1, #104	@ 0x68
 8003910:	5a52      	ldrh	r2, [r2, r1]
 8003912:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003914:	e114      	b.n	8003b40 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800391c:	2174      	movs	r1, #116	@ 0x74
 800391e:	187b      	adds	r3, r7, r1
 8003920:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003926:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8003928:	187b      	adds	r3, r7, r1
 800392a:	2282      	movs	r2, #130	@ 0x82
 800392c:	18ba      	adds	r2, r7, r2
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	8812      	ldrh	r2, [r2, #0]
 8003932:	4013      	ands	r3, r2
 8003934:	b29a      	uxth	r2, r3
 8003936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003938:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800393e:	1c9a      	adds	r2, r3, #2
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	225e      	movs	r2, #94	@ 0x5e
 8003948:	5a9b      	ldrh	r3, [r3, r2]
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b299      	uxth	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	225e      	movs	r2, #94	@ 0x5e
 8003954:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	2184      	movs	r1, #132	@ 0x84
 800395e:	187a      	adds	r2, r7, r1
 8003960:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003962:	187b      	adds	r3, r7, r1
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	2207      	movs	r2, #7
 8003968:	4013      	ands	r3, r2
 800396a:	d04e      	beq.n	8003a0a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800396c:	187b      	adds	r3, r7, r1
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2201      	movs	r2, #1
 8003972:	4013      	ands	r3, r2
 8003974:	d010      	beq.n	8003998 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8003976:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003978:	2380      	movs	r3, #128	@ 0x80
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	4013      	ands	r3, r2
 800397e:	d00b      	beq.n	8003998 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2201      	movs	r2, #1
 8003986:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2290      	movs	r2, #144	@ 0x90
 800398c:	589b      	ldr	r3, [r3, r2]
 800398e:	2201      	movs	r2, #1
 8003990:	431a      	orrs	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2190      	movs	r1, #144	@ 0x90
 8003996:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003998:	2384      	movs	r3, #132	@ 0x84
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2202      	movs	r2, #2
 80039a0:	4013      	ands	r3, r2
 80039a2:	d00f      	beq.n	80039c4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80039a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039a6:	2201      	movs	r2, #1
 80039a8:	4013      	ands	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	2202      	movs	r2, #2
 80039b2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2290      	movs	r2, #144	@ 0x90
 80039b8:	589b      	ldr	r3, [r3, r2]
 80039ba:	2204      	movs	r2, #4
 80039bc:	431a      	orrs	r2, r3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2190      	movs	r1, #144	@ 0x90
 80039c2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039c4:	2384      	movs	r3, #132	@ 0x84
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2204      	movs	r2, #4
 80039cc:	4013      	ands	r3, r2
 80039ce:	d00f      	beq.n	80039f0 <UART_RxISR_16BIT_FIFOEN+0x124>
 80039d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039d2:	2201      	movs	r2, #1
 80039d4:	4013      	ands	r3, r2
 80039d6:	d00b      	beq.n	80039f0 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2204      	movs	r2, #4
 80039de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2290      	movs	r2, #144	@ 0x90
 80039e4:	589b      	ldr	r3, [r3, r2]
 80039e6:	2202      	movs	r2, #2
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2190      	movs	r1, #144	@ 0x90
 80039ee:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2290      	movs	r2, #144	@ 0x90
 80039f4:	589b      	ldr	r3, [r3, r2]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d007      	beq.n	8003a0a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	0018      	movs	r0, r3
 80039fe:	f7fe fefb 	bl	80027f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2290      	movs	r2, #144	@ 0x90
 8003a06:	2100      	movs	r1, #0
 8003a08:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	225e      	movs	r2, #94	@ 0x5e
 8003a0e:	5a9b      	ldrh	r3, [r3, r2]
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d000      	beq.n	8003a18 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8003a16:	e093      	b.n	8003b40 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a18:	f3ef 8310 	mrs	r3, PRIMASK
 8003a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003a1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a20:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003a22:	2301      	movs	r3, #1
 8003a24:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a28:	f383 8810 	msr	PRIMASK, r3
}
 8003a2c:	46c0      	nop			@ (mov r8, r8)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4971      	ldr	r1, [pc, #452]	@ (8003c00 <UART_RxISR_16BIT_FIFOEN+0x334>)
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a40:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a44:	f383 8810 	msr	PRIMASK, r3
}
 8003a48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003a4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003a50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003a52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003a54:	2301      	movs	r3, #1
 8003a56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a5a:	f383 8810 	msr	PRIMASK, r3
}
 8003a5e:	46c0      	nop			@ (mov r8, r8)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4966      	ldr	r1, [pc, #408]	@ (8003c04 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8003a6c:	400a      	ands	r2, r1
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a72:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a76:	f383 8810 	msr	PRIMASK, r3
}
 8003a7a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	228c      	movs	r2, #140	@ 0x8c
 8003a80:	2120      	movs	r1, #32
 8003a82:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	2380      	movs	r3, #128	@ 0x80
 8003a98:	041b      	lsls	r3, r3, #16
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	d018      	beq.n	8003ad0 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003aa6:	667b      	str	r3, [r7, #100]	@ 0x64
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003aae:	f383 8810 	msr	PRIMASK, r3
}
 8003ab2:	46c0      	nop			@ (mov r8, r8)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4952      	ldr	r1, [pc, #328]	@ (8003c08 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003ac0:	400a      	ands	r2, r1
 8003ac2:	601a      	str	r2, [r3, #0]
 8003ac4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aca:	f383 8810 	msr	PRIMASK, r3
}
 8003ace:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d12f      	bne.n	8003b38 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ade:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ae8:	2301      	movs	r3, #1
 8003aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aee:	f383 8810 	msr	PRIMASK, r3
}
 8003af2:	46c0      	nop			@ (mov r8, r8)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2110      	movs	r1, #16
 8003b00:	438a      	bics	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]
 8003b04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0a:	f383 8810 	msr	PRIMASK, r3
}
 8003b0e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	2210      	movs	r2, #16
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d103      	bne.n	8003b26 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2210      	movs	r2, #16
 8003b24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	225c      	movs	r2, #92	@ 0x5c
 8003b2a:	5a9a      	ldrh	r2, [r3, r2]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	0011      	movs	r1, r2
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7fe fe69 	bl	8002808 <HAL_UARTEx_RxEventCallback>
 8003b36:	e003      	b.n	8003b40 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f7fc fcc8 	bl	80004d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003b40:	2376      	movs	r3, #118	@ 0x76
 8003b42:	18fb      	adds	r3, r7, r3
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d006      	beq.n	8003b58 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8003b4a:	2384      	movs	r3, #132	@ 0x84
 8003b4c:	18fb      	adds	r3, r7, r3
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2220      	movs	r2, #32
 8003b52:	4013      	ands	r3, r2
 8003b54:	d000      	beq.n	8003b58 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8003b56:	e6de      	b.n	8003916 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003b58:	205e      	movs	r0, #94	@ 0x5e
 8003b5a:	183b      	adds	r3, r7, r0
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	215e      	movs	r1, #94	@ 0x5e
 8003b60:	5a52      	ldrh	r2, [r2, r1]
 8003b62:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003b64:	0001      	movs	r1, r0
 8003b66:	187b      	adds	r3, r7, r1
 8003b68:	881b      	ldrh	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d044      	beq.n	8003bf8 <UART_RxISR_16BIT_FIFOEN+0x32c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2268      	movs	r2, #104	@ 0x68
 8003b72:	5a9b      	ldrh	r3, [r3, r2]
 8003b74:	187a      	adds	r2, r7, r1
 8003b76:	8812      	ldrh	r2, [r2, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d23d      	bcs.n	8003bf8 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b80:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b82:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b86:	2301      	movs	r3, #1
 8003b88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f383 8810 	msr	PRIMASK, r3
}
 8003b90:	46c0      	nop			@ (mov r8, r8)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	491b      	ldr	r1, [pc, #108]	@ (8003c0c <UART_RxISR_16BIT_FIFOEN+0x340>)
 8003b9e:	400a      	ands	r2, r1
 8003ba0:	609a      	str	r2, [r3, #8]
 8003ba2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ba4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f383 8810 	msr	PRIMASK, r3
}
 8003bac:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a17      	ldr	r2, [pc, #92]	@ (8003c10 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8003bb2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bb4:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb8:	61bb      	str	r3, [r7, #24]
  return(result);
 8003bba:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003bbc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	f383 8810 	msr	PRIMASK, r3
}
 8003bc8:	46c0      	nop			@ (mov r8, r8)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2120      	movs	r1, #32
 8003bd6:	430a      	orrs	r2, r1
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003bdc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	f383 8810 	msr	PRIMASK, r3
}
 8003be4:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003be6:	e007      	b.n	8003bf8 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	699a      	ldr	r2, [r3, #24]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2108      	movs	r1, #8
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	619a      	str	r2, [r3, #24]
}
 8003bf8:	46c0      	nop			@ (mov r8, r8)
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b022      	add	sp, #136	@ 0x88
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	fffffeff 	.word	0xfffffeff
 8003c04:	effffffe 	.word	0xeffffffe
 8003c08:	fbffffff 	.word	0xfbffffff
 8003c0c:	efffffff 	.word	0xefffffff
 8003c10:	080033e5 	.word	0x080033e5

08003c14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003c1c:	46c0      	nop			@ (mov r8, r8)
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b002      	add	sp, #8
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003c2c:	46c0      	nop			@ (mov r8, r8)
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b002      	add	sp, #8
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003c3c:	46c0      	nop			@ (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b002      	add	sp, #8
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2284      	movs	r2, #132	@ 0x84
 8003c50:	5c9b      	ldrb	r3, [r3, r2]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <HAL_UARTEx_DisableFifoMode+0x16>
 8003c56:	2302      	movs	r3, #2
 8003c58:	e027      	b.n	8003caa <HAL_UARTEx_DisableFifoMode+0x66>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2284      	movs	r2, #132	@ 0x84
 8003c5e:	2101      	movs	r1, #1
 8003c60:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2288      	movs	r2, #136	@ 0x88
 8003c66:	2124      	movs	r1, #36	@ 0x24
 8003c68:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	438a      	bics	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a0b      	ldr	r2, [pc, #44]	@ (8003cb4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68fa      	ldr	r2, [r7, #12]
 8003c96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2288      	movs	r2, #136	@ 0x88
 8003c9c:	2120      	movs	r1, #32
 8003c9e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2284      	movs	r2, #132	@ 0x84
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	0018      	movs	r0, r3
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b004      	add	sp, #16
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	46c0      	nop			@ (mov r8, r8)
 8003cb4:	dfffffff 	.word	0xdfffffff

08003cb8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2284      	movs	r2, #132	@ 0x84
 8003cc6:	5c9b      	ldrb	r3, [r3, r2]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e02e      	b.n	8003d2e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2284      	movs	r2, #132	@ 0x84
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2288      	movs	r2, #136	@ 0x88
 8003cdc:	2124      	movs	r1, #36	@ 0x24
 8003cde:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	438a      	bics	r2, r1
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	08d9      	lsrs	r1, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	683a      	ldr	r2, [r7, #0]
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	0018      	movs	r0, r3
 8003d10:	f000 f854 	bl	8003dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2288      	movs	r2, #136	@ 0x88
 8003d20:	2120      	movs	r1, #32
 8003d22:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2284      	movs	r2, #132	@ 0x84
 8003d28:	2100      	movs	r1, #0
 8003d2a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b004      	add	sp, #16
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2284      	movs	r2, #132	@ 0x84
 8003d46:	5c9b      	ldrb	r3, [r3, r2]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e02f      	b.n	8003db0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2284      	movs	r2, #132	@ 0x84
 8003d54:	2101      	movs	r1, #1
 8003d56:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2288      	movs	r2, #136	@ 0x88
 8003d5c:	2124      	movs	r1, #36	@ 0x24
 8003d5e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2101      	movs	r1, #1
 8003d74:	438a      	bics	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8003db8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	0019      	movs	r1, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f000 f813 	bl	8003dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2288      	movs	r2, #136	@ 0x88
 8003da2:	2120      	movs	r1, #32
 8003da4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2284      	movs	r2, #132	@ 0x84
 8003daa:	2100      	movs	r1, #0
 8003dac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	0018      	movs	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b004      	add	sp, #16
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	f1ffffff 	.word	0xf1ffffff

08003dbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d108      	bne.n	8003dde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	226a      	movs	r2, #106	@ 0x6a
 8003dd0:	2101      	movs	r1, #1
 8003dd2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2268      	movs	r2, #104	@ 0x68
 8003dd8:	2101      	movs	r1, #1
 8003dda:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ddc:	e043      	b.n	8003e66 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003dde:	260f      	movs	r6, #15
 8003de0:	19bb      	adds	r3, r7, r6
 8003de2:	2208      	movs	r2, #8
 8003de4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003de6:	200e      	movs	r0, #14
 8003de8:	183b      	adds	r3, r7, r0
 8003dea:	2208      	movs	r2, #8
 8003dec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	0e5b      	lsrs	r3, r3, #25
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	240d      	movs	r4, #13
 8003dfa:	193b      	adds	r3, r7, r4
 8003dfc:	2107      	movs	r1, #7
 8003dfe:	400a      	ands	r2, r1
 8003e00:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	0f5b      	lsrs	r3, r3, #29
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	250c      	movs	r5, #12
 8003e0e:	197b      	adds	r3, r7, r5
 8003e10:	2107      	movs	r1, #7
 8003e12:	400a      	ands	r2, r1
 8003e14:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e16:	183b      	adds	r3, r7, r0
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	197a      	adds	r2, r7, r5
 8003e1c:	7812      	ldrb	r2, [r2, #0]
 8003e1e:	4914      	ldr	r1, [pc, #80]	@ (8003e70 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e20:	5c8a      	ldrb	r2, [r1, r2]
 8003e22:	435a      	muls	r2, r3
 8003e24:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e26:	197b      	adds	r3, r7, r5
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	4a12      	ldr	r2, [pc, #72]	@ (8003e74 <UARTEx_SetNbDataToProcess+0xb8>)
 8003e2c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e2e:	0019      	movs	r1, r3
 8003e30:	f7fc f9f8 	bl	8000224 <__divsi3>
 8003e34:	0003      	movs	r3, r0
 8003e36:	b299      	uxth	r1, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	226a      	movs	r2, #106	@ 0x6a
 8003e3c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e3e:	19bb      	adds	r3, r7, r6
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	193a      	adds	r2, r7, r4
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	490a      	ldr	r1, [pc, #40]	@ (8003e70 <UARTEx_SetNbDataToProcess+0xb4>)
 8003e48:	5c8a      	ldrb	r2, [r1, r2]
 8003e4a:	435a      	muls	r2, r3
 8003e4c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e4e:	193b      	adds	r3, r7, r4
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	4a08      	ldr	r2, [pc, #32]	@ (8003e74 <UARTEx_SetNbDataToProcess+0xb8>)
 8003e54:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e56:	0019      	movs	r1, r3
 8003e58:	f7fc f9e4 	bl	8000224 <__divsi3>
 8003e5c:	0003      	movs	r3, r0
 8003e5e:	b299      	uxth	r1, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2268      	movs	r2, #104	@ 0x68
 8003e64:	5299      	strh	r1, [r3, r2]
}
 8003e66:	46c0      	nop			@ (mov r8, r8)
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b005      	add	sp, #20
 8003e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e6e:	46c0      	nop			@ (mov r8, r8)
 8003e70:	08004460 	.word	0x08004460
 8003e74:	08004468 	.word	0x08004468

08003e78 <_ZdlPvj>:
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	f000 f8bf 	bl	8003ffc <_ZdlPv>
 8003e7e:	bd10      	pop	{r4, pc}

08003e80 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	2a00      	cmp	r2, #0
 8003e84:	d001      	beq.n	8003e8a <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0xa>
 8003e86:	f000 fa3d 	bl	8004304 <memcpy>
 8003e8a:	bd10      	pop	{r4, pc}

08003e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>:
 8003e8c:	0008      	movs	r0, r1
 8003e8e:	b510      	push	{r4, lr}
 8003e90:	2900      	cmp	r1, #0
 8003e92:	da01      	bge.n	8003e98 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j+0xc>
 8003e94:	f000 f8c8 	bl	8004028 <_ZSt17__throw_bad_allocv>
 8003e98:	f000 f8b4 	bl	8004004 <_Znwj>
 8003e9c:	bd10      	pop	{r4, pc}

08003e9e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	6800      	ldr	r0, [r0, #0]
 8003ea2:	3308      	adds	r3, #8
 8003ea4:	1ac0      	subs	r0, r0, r3
 8003ea6:	4243      	negs	r3, r0
 8003ea8:	4158      	adcs	r0, r3
 8003eaa:	b2c0      	uxtb	r0, r0
 8003eac:	4770      	bx	lr
	...

08003eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8003eb0:	b510      	push	{r4, lr}
 8003eb2:	2480      	movs	r4, #128	@ 0x80
 8003eb4:	680b      	ldr	r3, [r1, #0]
 8003eb6:	05e4      	lsls	r4, r4, #23
 8003eb8:	42a3      	cmp	r3, r4
 8003eba:	d302      	bcc.n	8003ec2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x12>
 8003ebc:	4809      	ldr	r0, [pc, #36]	@ (8003ee4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x34>)
 8003ebe:	f000 f8b9 	bl	8004034 <_ZSt20__throw_length_errorPKc>
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d905      	bls.n	8003ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8003ec6:	0052      	lsls	r2, r2, #1
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d202      	bcs.n	8003ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8003ecc:	42a2      	cmp	r2, r4
 8003ece:	d205      	bcs.n	8003edc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8003ed0:	600a      	str	r2, [r1, #0]
 8003ed2:	6809      	ldr	r1, [r1, #0]
 8003ed4:	3101      	adds	r1, #1
 8003ed6:	f7ff ffd9 	bl	8003e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_S_allocateERS3_j>
 8003eda:	bd10      	pop	{r4, pc}
 8003edc:	4b02      	ldr	r3, [pc, #8]	@ (8003ee8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x38>)
 8003ede:	600b      	str	r3, [r1, #0]
 8003ee0:	e7f7      	b.n	8003ed2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x22>
 8003ee2:	46c0      	nop			@ (mov r8, r8)
 8003ee4:	08004470 	.word	0x08004470
 8003ee8:	3fffffff 	.word	0x3fffffff

08003eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>:
 8003eec:	b510      	push	{r4, lr}
 8003eee:	6800      	ldr	r0, [r0, #0]
 8003ef0:	f000 f884 	bl	8003ffc <_ZdlPv>
 8003ef4:	bd10      	pop	{r4, pc}

08003ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8003ef6:	b510      	push	{r4, lr}
 8003ef8:	0004      	movs	r4, r0
 8003efa:	f7ff ffd0 	bl	8003e9e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d103      	bne.n	8003f0a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 8003f02:	0020      	movs	r0, r4
 8003f04:	68a1      	ldr	r1, [r4, #8]
 8003f06:	f7ff fff1 	bl	8003eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_destroyEj>
 8003f0a:	bd10      	pop	{r4, pc}

08003f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	2a01      	cmp	r2, #1
 8003f10:	d102      	bne.n	8003f18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8003f12:	780b      	ldrb	r3, [r1, #0]
 8003f14:	7003      	strb	r3, [r0, #0]
 8003f16:	bd10      	pop	{r4, pc}
 8003f18:	f7ff ffb2 	bl	8003e80 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 8003f1c:	e7fb      	b.n	8003f16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08003f1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8003f1e:	b510      	push	{r4, lr}
 8003f20:	1a52      	subs	r2, r2, r1
 8003f22:	f7ff fff3 	bl	8003f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003f26:	bd10      	pop	{r4, pc}

08003f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8003f28:	b510      	push	{r4, lr}
 8003f2a:	1a52      	subs	r2, r2, r1
 8003f2c:	f7ff ffee 	bl	8003f0c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8003f30:	bd10      	pop	{r4, pc}

08003f32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8003f32:	b510      	push	{r4, lr}
 8003f34:	0004      	movs	r4, r0
 8003f36:	f7ff ffde 	bl	8003ef6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8003f3a:	0020      	movs	r0, r4
 8003f3c:	bd10      	pop	{r4, pc}

08003f3e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8003f3e:	6840      	ldr	r0, [r0, #4]
 8003f40:	4770      	bx	lr

08003f42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 8003f42:	6800      	ldr	r0, [r0, #0]
 8003f44:	1840      	adds	r0, r0, r1
 8003f46:	4770      	bx	lr

08003f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8003f48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f4a:	1a53      	subs	r3, r2, r1
 8003f4c:	0004      	movs	r4, r0
 8003f4e:	000d      	movs	r5, r1
 8003f50:	0016      	movs	r6, r2
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	2b0f      	cmp	r3, #15
 8003f56:	d906      	bls.n	8003f66 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x1e>
 8003f58:	2200      	movs	r2, #0
 8003f5a:	a901      	add	r1, sp, #4
 8003f5c:	f7ff ffa8 	bl	8003eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003f60:	9b01      	ldr	r3, [sp, #4]
 8003f62:	6020      	str	r0, [r4, #0]
 8003f64:	60a3      	str	r3, [r4, #8]
 8003f66:	0032      	movs	r2, r6
 8003f68:	0029      	movs	r1, r5
 8003f6a:	6820      	ldr	r0, [r4, #0]
 8003f6c:	f7ff ffd7 	bl	8003f1e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8003f70:	2100      	movs	r1, #0
 8003f72:	9b01      	ldr	r3, [sp, #4]
 8003f74:	6822      	ldr	r2, [r4, #0]
 8003f76:	6063      	str	r3, [r4, #4]
 8003f78:	54d1      	strb	r1, [r2, r3]
 8003f7a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003f7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8003f7c:	0002      	movs	r2, r0
 8003f7e:	000b      	movs	r3, r1
 8003f80:	b510      	push	{r4, lr}
 8003f82:	0004      	movs	r4, r0
 8003f84:	3208      	adds	r2, #8
 8003f86:	6002      	str	r2, [r0, #0]
 8003f88:	cb06      	ldmia	r3!, {r1, r2}
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	188a      	adds	r2, r1, r2
 8003f8e:	f7ff ffdb 	bl	8003f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8003f92:	0020      	movs	r0, r4
 8003f94:	bd10      	pop	{r4, pc}

08003f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8003f96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f98:	1a53      	subs	r3, r2, r1
 8003f9a:	0004      	movs	r4, r0
 8003f9c:	000d      	movs	r5, r1
 8003f9e:	0016      	movs	r6, r2
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	2b0f      	cmp	r3, #15
 8003fa4:	d906      	bls.n	8003fb4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x1e>
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	a901      	add	r1, sp, #4
 8003faa:	f7ff ff81 	bl	8003eb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8003fae:	9b01      	ldr	r3, [sp, #4]
 8003fb0:	6020      	str	r0, [r4, #0]
 8003fb2:	60a3      	str	r3, [r4, #8]
 8003fb4:	0032      	movs	r2, r6
 8003fb6:	0029      	movs	r1, r5
 8003fb8:	6820      	ldr	r0, [r4, #0]
 8003fba:	f7ff ffb5 	bl	8003f28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8003fbe:	2100      	movs	r1, #0
 8003fc0:	9b01      	ldr	r3, [sp, #4]
 8003fc2:	6822      	ldr	r2, [r4, #0]
 8003fc4:	6063      	str	r3, [r4, #4]
 8003fc6:	54d1      	strb	r1, [r2, r3]
 8003fc8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
	...

08003fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8003fcc:	0003      	movs	r3, r0
 8003fce:	3308      	adds	r3, #8
 8003fd0:	b570      	push	{r4, r5, r6, lr}
 8003fd2:	0004      	movs	r4, r0
 8003fd4:	1e0d      	subs	r5, r1, #0
 8003fd6:	6003      	str	r3, [r0, #0]
 8003fd8:	d102      	bne.n	8003fe0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x14>
 8003fda:	4807      	ldr	r0, [pc, #28]	@ (8003ff8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x2c>)
 8003fdc:	f000 f827 	bl	800402e <_ZSt19__throw_logic_errorPKc>
 8003fe0:	0008      	movs	r0, r1
 8003fe2:	f7fc f88d 	bl	8000100 <strlen>
 8003fe6:	0029      	movs	r1, r5
 8003fe8:	182a      	adds	r2, r5, r0
 8003fea:	2300      	movs	r3, #0
 8003fec:	0020      	movs	r0, r4
 8003fee:	f7ff ffd2 	bl	8003f96 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8003ff2:	0020      	movs	r0, r4
 8003ff4:	bd70      	pop	{r4, r5, r6, pc}
 8003ff6:	46c0      	nop			@ (mov r8, r8)
 8003ff8:	08004488 	.word	0x08004488

08003ffc <_ZdlPv>:
 8003ffc:	b510      	push	{r4, lr}
 8003ffe:	f000 f835 	bl	800406c <free>
 8004002:	bd10      	pop	{r4, pc}

08004004 <_Znwj>:
 8004004:	b510      	push	{r4, lr}
 8004006:	1e04      	subs	r4, r0, #0
 8004008:	d100      	bne.n	800400c <_Znwj+0x8>
 800400a:	3401      	adds	r4, #1
 800400c:	0020      	movs	r0, r4
 800400e:	f000 f823 	bl	8004058 <malloc>
 8004012:	2800      	cmp	r0, #0
 8004014:	d000      	beq.n	8004018 <_Znwj+0x14>
 8004016:	bd10      	pop	{r4, pc}
 8004018:	f000 f810 	bl	800403c <_ZSt15get_new_handlerv>
 800401c:	2800      	cmp	r0, #0
 800401e:	d101      	bne.n	8004024 <_Znwj+0x20>
 8004020:	f000 f812 	bl	8004048 <abort>
 8004024:	4780      	blx	r0
 8004026:	e7f1      	b.n	800400c <_Znwj+0x8>

08004028 <_ZSt17__throw_bad_allocv>:
 8004028:	b510      	push	{r4, lr}
 800402a:	f000 f80d 	bl	8004048 <abort>

0800402e <_ZSt19__throw_logic_errorPKc>:
 800402e:	b510      	push	{r4, lr}
 8004030:	f000 f80a 	bl	8004048 <abort>

08004034 <_ZSt20__throw_length_errorPKc>:
 8004034:	b510      	push	{r4, lr}
 8004036:	f000 f807 	bl	8004048 <abort>
	...

0800403c <_ZSt15get_new_handlerv>:
 800403c:	4b01      	ldr	r3, [pc, #4]	@ (8004044 <_ZSt15get_new_handlerv+0x8>)
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	4770      	bx	lr
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	20000148 	.word	0x20000148

08004048 <abort>:
 8004048:	2006      	movs	r0, #6
 800404a:	b510      	push	{r4, lr}
 800404c:	f000 f8fc 	bl	8004248 <raise>
 8004050:	2001      	movs	r0, #1
 8004052:	f7fc fcf9 	bl	8000a48 <_exit>
	...

08004058 <malloc>:
 8004058:	b510      	push	{r4, lr}
 800405a:	4b03      	ldr	r3, [pc, #12]	@ (8004068 <malloc+0x10>)
 800405c:	0001      	movs	r1, r0
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	f000 f830 	bl	80040c4 <_malloc_r>
 8004064:	bd10      	pop	{r4, pc}
 8004066:	46c0      	nop			@ (mov r8, r8)
 8004068:	2000000c 	.word	0x2000000c

0800406c <free>:
 800406c:	b510      	push	{r4, lr}
 800406e:	4b03      	ldr	r3, [pc, #12]	@ (800407c <free+0x10>)
 8004070:	0001      	movs	r1, r0
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	f000 f950 	bl	8004318 <_free_r>
 8004078:	bd10      	pop	{r4, pc}
 800407a:	46c0      	nop			@ (mov r8, r8)
 800407c:	2000000c 	.word	0x2000000c

08004080 <sbrk_aligned>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	4e0f      	ldr	r6, [pc, #60]	@ (80040c0 <sbrk_aligned+0x40>)
 8004084:	000d      	movs	r5, r1
 8004086:	6831      	ldr	r1, [r6, #0]
 8004088:	0004      	movs	r4, r0
 800408a:	2900      	cmp	r1, #0
 800408c:	d102      	bne.n	8004094 <sbrk_aligned+0x14>
 800408e:	f000 f8fb 	bl	8004288 <_sbrk_r>
 8004092:	6030      	str	r0, [r6, #0]
 8004094:	0029      	movs	r1, r5
 8004096:	0020      	movs	r0, r4
 8004098:	f000 f8f6 	bl	8004288 <_sbrk_r>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d103      	bne.n	80040a8 <sbrk_aligned+0x28>
 80040a0:	2501      	movs	r5, #1
 80040a2:	426d      	negs	r5, r5
 80040a4:	0028      	movs	r0, r5
 80040a6:	bd70      	pop	{r4, r5, r6, pc}
 80040a8:	2303      	movs	r3, #3
 80040aa:	1cc5      	adds	r5, r0, #3
 80040ac:	439d      	bics	r5, r3
 80040ae:	42a8      	cmp	r0, r5
 80040b0:	d0f8      	beq.n	80040a4 <sbrk_aligned+0x24>
 80040b2:	1a29      	subs	r1, r5, r0
 80040b4:	0020      	movs	r0, r4
 80040b6:	f000 f8e7 	bl	8004288 <_sbrk_r>
 80040ba:	3001      	adds	r0, #1
 80040bc:	d1f2      	bne.n	80040a4 <sbrk_aligned+0x24>
 80040be:	e7ef      	b.n	80040a0 <sbrk_aligned+0x20>
 80040c0:	2000014c 	.word	0x2000014c

080040c4 <_malloc_r>:
 80040c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040c6:	2203      	movs	r2, #3
 80040c8:	1ccb      	adds	r3, r1, #3
 80040ca:	4393      	bics	r3, r2
 80040cc:	3308      	adds	r3, #8
 80040ce:	0005      	movs	r5, r0
 80040d0:	001f      	movs	r7, r3
 80040d2:	2b0c      	cmp	r3, #12
 80040d4:	d234      	bcs.n	8004140 <_malloc_r+0x7c>
 80040d6:	270c      	movs	r7, #12
 80040d8:	42b9      	cmp	r1, r7
 80040da:	d833      	bhi.n	8004144 <_malloc_r+0x80>
 80040dc:	0028      	movs	r0, r5
 80040de:	f000 f871 	bl	80041c4 <__malloc_lock>
 80040e2:	4e37      	ldr	r6, [pc, #220]	@ (80041c0 <_malloc_r+0xfc>)
 80040e4:	6833      	ldr	r3, [r6, #0]
 80040e6:	001c      	movs	r4, r3
 80040e8:	2c00      	cmp	r4, #0
 80040ea:	d12f      	bne.n	800414c <_malloc_r+0x88>
 80040ec:	0039      	movs	r1, r7
 80040ee:	0028      	movs	r0, r5
 80040f0:	f7ff ffc6 	bl	8004080 <sbrk_aligned>
 80040f4:	0004      	movs	r4, r0
 80040f6:	1c43      	adds	r3, r0, #1
 80040f8:	d15f      	bne.n	80041ba <_malloc_r+0xf6>
 80040fa:	6834      	ldr	r4, [r6, #0]
 80040fc:	9400      	str	r4, [sp, #0]
 80040fe:	9b00      	ldr	r3, [sp, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d14a      	bne.n	800419a <_malloc_r+0xd6>
 8004104:	2c00      	cmp	r4, #0
 8004106:	d052      	beq.n	80041ae <_malloc_r+0xea>
 8004108:	6823      	ldr	r3, [r4, #0]
 800410a:	0028      	movs	r0, r5
 800410c:	18e3      	adds	r3, r4, r3
 800410e:	9900      	ldr	r1, [sp, #0]
 8004110:	9301      	str	r3, [sp, #4]
 8004112:	f000 f8b9 	bl	8004288 <_sbrk_r>
 8004116:	9b01      	ldr	r3, [sp, #4]
 8004118:	4283      	cmp	r3, r0
 800411a:	d148      	bne.n	80041ae <_malloc_r+0xea>
 800411c:	6823      	ldr	r3, [r4, #0]
 800411e:	0028      	movs	r0, r5
 8004120:	1aff      	subs	r7, r7, r3
 8004122:	0039      	movs	r1, r7
 8004124:	f7ff ffac 	bl	8004080 <sbrk_aligned>
 8004128:	3001      	adds	r0, #1
 800412a:	d040      	beq.n	80041ae <_malloc_r+0xea>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	19db      	adds	r3, r3, r7
 8004130:	6023      	str	r3, [r4, #0]
 8004132:	6833      	ldr	r3, [r6, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	2a00      	cmp	r2, #0
 8004138:	d133      	bne.n	80041a2 <_malloc_r+0xde>
 800413a:	9b00      	ldr	r3, [sp, #0]
 800413c:	6033      	str	r3, [r6, #0]
 800413e:	e019      	b.n	8004174 <_malloc_r+0xb0>
 8004140:	2b00      	cmp	r3, #0
 8004142:	dac9      	bge.n	80040d8 <_malloc_r+0x14>
 8004144:	230c      	movs	r3, #12
 8004146:	602b      	str	r3, [r5, #0]
 8004148:	2000      	movs	r0, #0
 800414a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800414c:	6821      	ldr	r1, [r4, #0]
 800414e:	1bc9      	subs	r1, r1, r7
 8004150:	d420      	bmi.n	8004194 <_malloc_r+0xd0>
 8004152:	290b      	cmp	r1, #11
 8004154:	d90a      	bls.n	800416c <_malloc_r+0xa8>
 8004156:	19e2      	adds	r2, r4, r7
 8004158:	6027      	str	r7, [r4, #0]
 800415a:	42a3      	cmp	r3, r4
 800415c:	d104      	bne.n	8004168 <_malloc_r+0xa4>
 800415e:	6032      	str	r2, [r6, #0]
 8004160:	6863      	ldr	r3, [r4, #4]
 8004162:	6011      	str	r1, [r2, #0]
 8004164:	6053      	str	r3, [r2, #4]
 8004166:	e005      	b.n	8004174 <_malloc_r+0xb0>
 8004168:	605a      	str	r2, [r3, #4]
 800416a:	e7f9      	b.n	8004160 <_malloc_r+0x9c>
 800416c:	6862      	ldr	r2, [r4, #4]
 800416e:	42a3      	cmp	r3, r4
 8004170:	d10e      	bne.n	8004190 <_malloc_r+0xcc>
 8004172:	6032      	str	r2, [r6, #0]
 8004174:	0028      	movs	r0, r5
 8004176:	f000 f82d 	bl	80041d4 <__malloc_unlock>
 800417a:	0020      	movs	r0, r4
 800417c:	2207      	movs	r2, #7
 800417e:	300b      	adds	r0, #11
 8004180:	1d23      	adds	r3, r4, #4
 8004182:	4390      	bics	r0, r2
 8004184:	1ac2      	subs	r2, r0, r3
 8004186:	4298      	cmp	r0, r3
 8004188:	d0df      	beq.n	800414a <_malloc_r+0x86>
 800418a:	1a1b      	subs	r3, r3, r0
 800418c:	50a3      	str	r3, [r4, r2]
 800418e:	e7dc      	b.n	800414a <_malloc_r+0x86>
 8004190:	605a      	str	r2, [r3, #4]
 8004192:	e7ef      	b.n	8004174 <_malloc_r+0xb0>
 8004194:	0023      	movs	r3, r4
 8004196:	6864      	ldr	r4, [r4, #4]
 8004198:	e7a6      	b.n	80040e8 <_malloc_r+0x24>
 800419a:	9c00      	ldr	r4, [sp, #0]
 800419c:	6863      	ldr	r3, [r4, #4]
 800419e:	9300      	str	r3, [sp, #0]
 80041a0:	e7ad      	b.n	80040fe <_malloc_r+0x3a>
 80041a2:	001a      	movs	r2, r3
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	42a3      	cmp	r3, r4
 80041a8:	d1fb      	bne.n	80041a2 <_malloc_r+0xde>
 80041aa:	2300      	movs	r3, #0
 80041ac:	e7da      	b.n	8004164 <_malloc_r+0xa0>
 80041ae:	230c      	movs	r3, #12
 80041b0:	0028      	movs	r0, r5
 80041b2:	602b      	str	r3, [r5, #0]
 80041b4:	f000 f80e 	bl	80041d4 <__malloc_unlock>
 80041b8:	e7c6      	b.n	8004148 <_malloc_r+0x84>
 80041ba:	6007      	str	r7, [r0, #0]
 80041bc:	e7da      	b.n	8004174 <_malloc_r+0xb0>
 80041be:	46c0      	nop			@ (mov r8, r8)
 80041c0:	20000150 	.word	0x20000150

080041c4 <__malloc_lock>:
 80041c4:	b510      	push	{r4, lr}
 80041c6:	4802      	ldr	r0, [pc, #8]	@ (80041d0 <__malloc_lock+0xc>)
 80041c8:	f000 f89a 	bl	8004300 <__retarget_lock_acquire_recursive>
 80041cc:	bd10      	pop	{r4, pc}
 80041ce:	46c0      	nop			@ (mov r8, r8)
 80041d0:	20000290 	.word	0x20000290

080041d4 <__malloc_unlock>:
 80041d4:	b510      	push	{r4, lr}
 80041d6:	4802      	ldr	r0, [pc, #8]	@ (80041e0 <__malloc_unlock+0xc>)
 80041d8:	f000 f893 	bl	8004302 <__retarget_lock_release_recursive>
 80041dc:	bd10      	pop	{r4, pc}
 80041de:	46c0      	nop			@ (mov r8, r8)
 80041e0:	20000290 	.word	0x20000290

080041e4 <memset>:
 80041e4:	0003      	movs	r3, r0
 80041e6:	1882      	adds	r2, r0, r2
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d100      	bne.n	80041ee <memset+0xa>
 80041ec:	4770      	bx	lr
 80041ee:	7019      	strb	r1, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	e7f9      	b.n	80041e8 <memset+0x4>

080041f4 <_raise_r>:
 80041f4:	b570      	push	{r4, r5, r6, lr}
 80041f6:	0004      	movs	r4, r0
 80041f8:	000d      	movs	r5, r1
 80041fa:	291f      	cmp	r1, #31
 80041fc:	d904      	bls.n	8004208 <_raise_r+0x14>
 80041fe:	2316      	movs	r3, #22
 8004200:	6003      	str	r3, [r0, #0]
 8004202:	2001      	movs	r0, #1
 8004204:	4240      	negs	r0, r0
 8004206:	bd70      	pop	{r4, r5, r6, pc}
 8004208:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800420a:	2b00      	cmp	r3, #0
 800420c:	d004      	beq.n	8004218 <_raise_r+0x24>
 800420e:	008a      	lsls	r2, r1, #2
 8004210:	189b      	adds	r3, r3, r2
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	2a00      	cmp	r2, #0
 8004216:	d108      	bne.n	800422a <_raise_r+0x36>
 8004218:	0020      	movs	r0, r4
 800421a:	f000 f831 	bl	8004280 <_getpid_r>
 800421e:	002a      	movs	r2, r5
 8004220:	0001      	movs	r1, r0
 8004222:	0020      	movs	r0, r4
 8004224:	f000 f81a 	bl	800425c <_kill_r>
 8004228:	e7ed      	b.n	8004206 <_raise_r+0x12>
 800422a:	2a01      	cmp	r2, #1
 800422c:	d009      	beq.n	8004242 <_raise_r+0x4e>
 800422e:	1c51      	adds	r1, r2, #1
 8004230:	d103      	bne.n	800423a <_raise_r+0x46>
 8004232:	2316      	movs	r3, #22
 8004234:	6003      	str	r3, [r0, #0]
 8004236:	2001      	movs	r0, #1
 8004238:	e7e5      	b.n	8004206 <_raise_r+0x12>
 800423a:	2100      	movs	r1, #0
 800423c:	0028      	movs	r0, r5
 800423e:	6019      	str	r1, [r3, #0]
 8004240:	4790      	blx	r2
 8004242:	2000      	movs	r0, #0
 8004244:	e7df      	b.n	8004206 <_raise_r+0x12>
	...

08004248 <raise>:
 8004248:	b510      	push	{r4, lr}
 800424a:	4b03      	ldr	r3, [pc, #12]	@ (8004258 <raise+0x10>)
 800424c:	0001      	movs	r1, r0
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	f7ff ffd0 	bl	80041f4 <_raise_r>
 8004254:	bd10      	pop	{r4, pc}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	2000000c 	.word	0x2000000c

0800425c <_kill_r>:
 800425c:	2300      	movs	r3, #0
 800425e:	b570      	push	{r4, r5, r6, lr}
 8004260:	4d06      	ldr	r5, [pc, #24]	@ (800427c <_kill_r+0x20>)
 8004262:	0004      	movs	r4, r0
 8004264:	0008      	movs	r0, r1
 8004266:	0011      	movs	r1, r2
 8004268:	602b      	str	r3, [r5, #0]
 800426a:	f7fc fbdd 	bl	8000a28 <_kill>
 800426e:	1c43      	adds	r3, r0, #1
 8004270:	d103      	bne.n	800427a <_kill_r+0x1e>
 8004272:	682b      	ldr	r3, [r5, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d000      	beq.n	800427a <_kill_r+0x1e>
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	bd70      	pop	{r4, r5, r6, pc}
 800427c:	2000028c 	.word	0x2000028c

08004280 <_getpid_r>:
 8004280:	b510      	push	{r4, lr}
 8004282:	f7fc fbcb 	bl	8000a1c <_getpid>
 8004286:	bd10      	pop	{r4, pc}

08004288 <_sbrk_r>:
 8004288:	2300      	movs	r3, #0
 800428a:	b570      	push	{r4, r5, r6, lr}
 800428c:	4d06      	ldr	r5, [pc, #24]	@ (80042a8 <_sbrk_r+0x20>)
 800428e:	0004      	movs	r4, r0
 8004290:	0008      	movs	r0, r1
 8004292:	602b      	str	r3, [r5, #0]
 8004294:	f7fc fbe6 	bl	8000a64 <_sbrk>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d103      	bne.n	80042a4 <_sbrk_r+0x1c>
 800429c:	682b      	ldr	r3, [r5, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d000      	beq.n	80042a4 <_sbrk_r+0x1c>
 80042a2:	6023      	str	r3, [r4, #0]
 80042a4:	bd70      	pop	{r4, r5, r6, pc}
 80042a6:	46c0      	nop			@ (mov r8, r8)
 80042a8:	2000028c 	.word	0x2000028c

080042ac <__errno>:
 80042ac:	4b01      	ldr	r3, [pc, #4]	@ (80042b4 <__errno+0x8>)
 80042ae:	6818      	ldr	r0, [r3, #0]
 80042b0:	4770      	bx	lr
 80042b2:	46c0      	nop			@ (mov r8, r8)
 80042b4:	2000000c 	.word	0x2000000c

080042b8 <__libc_init_array>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	2600      	movs	r6, #0
 80042bc:	4c0c      	ldr	r4, [pc, #48]	@ (80042f0 <__libc_init_array+0x38>)
 80042be:	4d0d      	ldr	r5, [pc, #52]	@ (80042f4 <__libc_init_array+0x3c>)
 80042c0:	1b64      	subs	r4, r4, r5
 80042c2:	10a4      	asrs	r4, r4, #2
 80042c4:	42a6      	cmp	r6, r4
 80042c6:	d109      	bne.n	80042dc <__libc_init_array+0x24>
 80042c8:	2600      	movs	r6, #0
 80042ca:	f000 f86f 	bl	80043ac <_init>
 80042ce:	4c0a      	ldr	r4, [pc, #40]	@ (80042f8 <__libc_init_array+0x40>)
 80042d0:	4d0a      	ldr	r5, [pc, #40]	@ (80042fc <__libc_init_array+0x44>)
 80042d2:	1b64      	subs	r4, r4, r5
 80042d4:	10a4      	asrs	r4, r4, #2
 80042d6:	42a6      	cmp	r6, r4
 80042d8:	d105      	bne.n	80042e6 <__libc_init_array+0x2e>
 80042da:	bd70      	pop	{r4, r5, r6, pc}
 80042dc:	00b3      	lsls	r3, r6, #2
 80042de:	58eb      	ldr	r3, [r5, r3]
 80042e0:	4798      	blx	r3
 80042e2:	3601      	adds	r6, #1
 80042e4:	e7ee      	b.n	80042c4 <__libc_init_array+0xc>
 80042e6:	00b3      	lsls	r3, r6, #2
 80042e8:	58eb      	ldr	r3, [r5, r3]
 80042ea:	4798      	blx	r3
 80042ec:	3601      	adds	r6, #1
 80042ee:	e7f2      	b.n	80042d6 <__libc_init_array+0x1e>
 80042f0:	080044bc 	.word	0x080044bc
 80042f4:	080044bc 	.word	0x080044bc
 80042f8:	080044c4 	.word	0x080044c4
 80042fc:	080044bc 	.word	0x080044bc

08004300 <__retarget_lock_acquire_recursive>:
 8004300:	4770      	bx	lr

08004302 <__retarget_lock_release_recursive>:
 8004302:	4770      	bx	lr

08004304 <memcpy>:
 8004304:	2300      	movs	r3, #0
 8004306:	b510      	push	{r4, lr}
 8004308:	429a      	cmp	r2, r3
 800430a:	d100      	bne.n	800430e <memcpy+0xa>
 800430c:	bd10      	pop	{r4, pc}
 800430e:	5ccc      	ldrb	r4, [r1, r3]
 8004310:	54c4      	strb	r4, [r0, r3]
 8004312:	3301      	adds	r3, #1
 8004314:	e7f8      	b.n	8004308 <memcpy+0x4>
	...

08004318 <_free_r>:
 8004318:	b570      	push	{r4, r5, r6, lr}
 800431a:	0005      	movs	r5, r0
 800431c:	1e0c      	subs	r4, r1, #0
 800431e:	d010      	beq.n	8004342 <_free_r+0x2a>
 8004320:	3c04      	subs	r4, #4
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	da00      	bge.n	800432a <_free_r+0x12>
 8004328:	18e4      	adds	r4, r4, r3
 800432a:	0028      	movs	r0, r5
 800432c:	f7ff ff4a 	bl	80041c4 <__malloc_lock>
 8004330:	4a1d      	ldr	r2, [pc, #116]	@ (80043a8 <_free_r+0x90>)
 8004332:	6813      	ldr	r3, [r2, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <_free_r+0x2c>
 8004338:	6063      	str	r3, [r4, #4]
 800433a:	6014      	str	r4, [r2, #0]
 800433c:	0028      	movs	r0, r5
 800433e:	f7ff ff49 	bl	80041d4 <__malloc_unlock>
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	42a3      	cmp	r3, r4
 8004346:	d908      	bls.n	800435a <_free_r+0x42>
 8004348:	6820      	ldr	r0, [r4, #0]
 800434a:	1821      	adds	r1, r4, r0
 800434c:	428b      	cmp	r3, r1
 800434e:	d1f3      	bne.n	8004338 <_free_r+0x20>
 8004350:	6819      	ldr	r1, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	1809      	adds	r1, r1, r0
 8004356:	6021      	str	r1, [r4, #0]
 8004358:	e7ee      	b.n	8004338 <_free_r+0x20>
 800435a:	001a      	movs	r2, r3
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <_free_r+0x4e>
 8004362:	42a3      	cmp	r3, r4
 8004364:	d9f9      	bls.n	800435a <_free_r+0x42>
 8004366:	6811      	ldr	r1, [r2, #0]
 8004368:	1850      	adds	r0, r2, r1
 800436a:	42a0      	cmp	r0, r4
 800436c:	d10b      	bne.n	8004386 <_free_r+0x6e>
 800436e:	6820      	ldr	r0, [r4, #0]
 8004370:	1809      	adds	r1, r1, r0
 8004372:	1850      	adds	r0, r2, r1
 8004374:	6011      	str	r1, [r2, #0]
 8004376:	4283      	cmp	r3, r0
 8004378:	d1e0      	bne.n	800433c <_free_r+0x24>
 800437a:	6818      	ldr	r0, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	1841      	adds	r1, r0, r1
 8004380:	6011      	str	r1, [r2, #0]
 8004382:	6053      	str	r3, [r2, #4]
 8004384:	e7da      	b.n	800433c <_free_r+0x24>
 8004386:	42a0      	cmp	r0, r4
 8004388:	d902      	bls.n	8004390 <_free_r+0x78>
 800438a:	230c      	movs	r3, #12
 800438c:	602b      	str	r3, [r5, #0]
 800438e:	e7d5      	b.n	800433c <_free_r+0x24>
 8004390:	6820      	ldr	r0, [r4, #0]
 8004392:	1821      	adds	r1, r4, r0
 8004394:	428b      	cmp	r3, r1
 8004396:	d103      	bne.n	80043a0 <_free_r+0x88>
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	1809      	adds	r1, r1, r0
 800439e:	6021      	str	r1, [r4, #0]
 80043a0:	6063      	str	r3, [r4, #4]
 80043a2:	6054      	str	r4, [r2, #4]
 80043a4:	e7ca      	b.n	800433c <_free_r+0x24>
 80043a6:	46c0      	nop			@ (mov r8, r8)
 80043a8:	20000150 	.word	0x20000150

080043ac <_init>:
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	46c0      	nop			@ (mov r8, r8)
 80043b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043b2:	bc08      	pop	{r3}
 80043b4:	469e      	mov	lr, r3
 80043b6:	4770      	bx	lr

080043b8 <_fini>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043be:	bc08      	pop	{r3}
 80043c0:	469e      	mov	lr, r3
 80043c2:	4770      	bx	lr
